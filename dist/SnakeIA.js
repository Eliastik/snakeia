(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["SnakeIA"] = factory();
	else
		root["SnakeIA"] = factory();
})(typeof self !== "undefined" ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/locales/engine.js":
/*!**********************************!*\
  !*** ./assets/locales/engine.js ***!
  \**********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */
 // French

i18next__WEBPACK_IMPORTED_MODULE_0__["default"].addResourceBundle("fr", "translation", {
  "engine": {
    "score": "Score",
    "num": "n°",
    "initFailed": "Échec de l'initialisation du jeu : le Snake est plus grand que la grille",
    "continue": "Reprendre",
    "reset": "Recommencer la partie",
    "retryInit": "Réessayer",
    "exit": "Quitter",
    "yes": "Oui",
    "no": "Non",
    "ok": "OK",
    "about": "À propos…",
    "infosGame": "Infos partie",
    "player": "Joueur :",
    "playerHuman": "Vous",
    "playerAI": "IA",
    "aiLevel": "Niveau de l'IA :",
    "aiLevelList": {
      "random": "Au hasard",
      "low": "Faible",
      "normal": "Normal",
      "high": "Élevé",
      "ultra": "Ultra",
      "custom": "Personnalisé",
      "mock": "Mock"
    },
    "sizeGrid": "Taille de la grille :",
    "currentSpeed": "Vitesse actuelle :",
    "progressiveSpeed": "Vitesse progressive",
    "loading": "Chargement des ressources…",
    "exited": "Cette partie a été définitivement quittée. En attente de la fin des autres parties…",
    "error": "Une erreur est survenue !",
    "errorLoading": "Une erreur est survenue lors du chargement des ressources. Vérifiez votre connexion Internet.",
    "exitConfirm": "Êtes-vous sûr de vouloir quitter la partie ?",
    "resetConfirm": "Êtes-vous sûr de vouloir recommencer la partie ?",
    "scoreMax": "Score maximal atteint !",
    "gameOver": "Game Over !",
    "gameFinished": "Partie terminée !",
    "pause": "Pause",
    "playerMin": "J",
    "aiMin": "IA",
    "aboutScreen": {
      "title": "SnakeIA par Eliastik",
      "versionAndDate": "Version {{version}} ({{date, DD/MM/YYYY}})"
    },
    "debug": {
      "fps": "IPS :",
      "frames": "Images :",
      "ticks": "Tours :",
      "speed": "Vit. :",
      "paused": "En pause"
    },
    "colors": {
      "white": "Blanc",
      "gray": "Gris",
      "black": "Noir",
      "red": "Rouge",
      "brown": "Marron",
      "orange": "Orange",
      "yellow": "Jaune",
      "green": "Vert",
      "blue": "Bleu",
      "purple": "Mauve",
      "pink": "Rose"
    },
    "colorPlayer": "Vous êtes le Snake\nen {{color}}",
    "arrowPlayer": "Vous êtes le Snake\nindiqué par la\nflèche",
    "ready": "Partez !",
    "assistAI": "Assistant IA",
    "exitFullScreen": "Quitter plein-écran",
    "enterFullScreen": "Mode plein-écran",
    "mazeMode": "Mode labyrinthe ! Trouvez le chemin vers la pomme pour réussir la partie.\nLe Snake n'avance pas automatiquement.",
    "mazeWin": "Bien joué !",
    "mazeModeMin": "Mode labyrinthe",
    "onlineMode": "Jeu en ligne",
    "ranking": "Classement",
    "infosGameAdvanced": "Avancé…",
    "seedGrid": "Valeur aléatoire grille :",
    "seedGame": "Valeur aléatoire jeu :",
    "ping": "Ping :",
    "aiStuck": "Toutes les IAs sont bloquées. La partie se terminera si les IAs restent bloquées.",
    "servers": {
      "errorConnection": "Une erreur est survenue lors de la connexion au serveur.",
      "waitingPlayers": "En attente de joueurs…",
      "gameStart": "Début de la partie\ndans",
      "nextGameStart": "Prochaine partie\ndans",
      "spectatorMode": "Mode spectateur",
      "startGame": "Commencer la partie"
    },
    "loadingWorker": "Chargement…",
    "errorJSGameToolsConsole": "Une erreur fatale est survenue au niveau du moteur JSGameTools.",
    "errorJSGameTools": ":'(\nUne erreur fatale est survenue au niveau du moteur JSGameTools."
  }
}, true, false); // English

i18next__WEBPACK_IMPORTED_MODULE_0__["default"].addResourceBundle("en", "translation", {
  "engine": {
    "score": "Score",
    "num": "n°",
    "initFailed": "Game init failed: the Snake is bigger than the grid",
    "continue": "Continue",
    "reset": "Reset the game",
    "retryInit": "Retry",
    "exit": "Exit",
    "yes": "Yes",
    "no": "No",
    "ok": "OK",
    "about": "About…",
    "infosGame": "Game infos",
    "player": "Player:",
    "playerHuman": "You",
    "playerAI": "AI",
    "aiLevel": "AI level:",
    "aiLevelList": {
      "random": "Random",
      "low": "Low",
      "normal": "Normal",
      "high": "High",
      "ultra": "Ultra",
      "custom": "Custom",
      "mock": "Mock"
    },
    "sizeGrid": "Grid size:",
    "currentSpeed": "Current speed:",
    "progressiveSpeed": "Progressive speed",
    "loading": "Loading resources…",
    "exited": "This game has been definitively exited. Waiting for the end of the other games…",
    "error": "An error has occurred!",
    "errorLoading": "An error occurred while loading resources. Check your Internet connection.",
    "exitConfirm": "Are you sure that you want to exit the game?",
    "resetConfirm": "Are you sure that you want to reset the game?",
    "scoreMax": "Maximum score reached!",
    "gameFinished": "Game finished!",
    "gameOver": "Game Over!",
    "pause": "Pause",
    "playerMin": "P",
    "aiMin": "AI",
    "aboutScreen": {
      "title": "SnakeIA by Eliastik",
      "versionAndDate": "Version {{version}} ({{date, MM/DD/YYYY}})"
    },
    "debug": {
      "fps": "FPS:",
      "frames": "Frames:",
      "ticks": "Ticks:",
      "speed": "Speed:",
      "paused": "Paused"
    },
    "colors": {
      "white": "White",
      "gray": "Gray",
      "black": "Black",
      "red": "Red",
      "brown": "Brown",
      "orange": "Orange",
      "yellow": "Yellow",
      "green": "Green",
      "blue": "Blue",
      "purple": "Purple",
      "pink": "Pink"
    },
    "colorPlayer": "You are the Snake\nin {{color}}",
    "arrowPlayer": "You are the Snake\npointed by the\narrow",
    "ready": "Go!",
    "assistAI": "AI assistant",
    "exitFullScreen": "Exit fullscreen",
    "enterFullScreen": "Fullscreen mode",
    "mazeMode": "Maze mode! Find the path to the apple to finish this game.\nThe Snake doesn't move automatically.",
    "mazeWin": "Good game!",
    "mazeModeMin": "Maze mode",
    "onlineMode": "Online game",
    "ranking": "Ranking",
    "infosGameAdvanced": "Advanced…",
    "seedGrid": "Grid random value:",
    "seedGame": "Game random value:",
    "ping": "Ping:",
    "aiStuck": "All the AIs are stuck. The game will end if the AIs remain stuck.",
    "servers": {
      "errorConnection": "An error has occurred when connecting to the server.",
      "waitingPlayers": "Waiting for players…",
      "gameStart": "Start of the game\nin",
      "nextGameStart": "Next game\nin",
      "spectatorMode": "Spectator mode",
      "startGame": "Start the game"
    },
    "loadingWorker": "Loading…",
    "errorJSGameToolsConsole": "A fatal error has occurred at the JSGameTools engine level.",
    "errorJSGameTools": ":'(\nA fatal error has occurred at the JSGameTools engine level."
  }
}, true, false);

/***/ }),

/***/ "./assets/locales/init.js":
/*!********************************!*\
  !*** ./assets/locales/init.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var i18next_browser_languagedetector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! i18next-browser-languagedetector */ "./node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js");
/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */


i18next__WEBPACK_IMPORTED_MODULE_0__["default"].use(i18next_browser_languagedetector__WEBPACK_IMPORTED_MODULE_1__["default"]).init({
  fallbackLng: ['en', 'fr'],
  load: 'languageOnly',
  detection: {
    order: ['localStorage', 'querystring', 'navigator', 'htmlTag'],
    lookupQuerystring: 'lng',
    lookupLocalStorage: 'i18nextLng',
    caches: ['localStorage']
  }
});

/***/ }),

/***/ "./assets/locales/menu.js":
/*!********************************!*\
  !*** ./assets/locales/menu.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */
 // French

i18next__WEBPACK_IMPORTED_MODULE_0__["default"].addResourceBundle("fr", "translation", {
  "debugModeEnabled": "Mode de debug activé",
  "lang": {
    "fr": "Français",
    "en": "English"
  },
  "update": {
    "updateAvailable": "Une mise à jour du jeu est disponible",
    "version": "Version",
    "of": "du",
    "current": "Vous disposez actuellement de la version",
    "versionDate": "{{date, DD/MM/YYYY}}",
    "download": "Télécharger la mise à jour",
    "getURL": "Obtenir l'adresse URL du téléchargement",
    "getChanges": "Obtenir la liste des changements",
    "URLToDownload": "Adresse URL menant au téléchargement :",
    "noChanges": "Aucun changement renseigné.",
    "changes": "Changements de la nouvelle version :"
  },
  "menu": {
    "selectGame": "Sélectionnez un mode de jeu :",
    "soloAi": "IA solo",
    "soloPlayer": "Joueur solo",
    "playerVsAi": "Joueur VS IA",
    "aiVsAi": "IA VS IA",
    "battleRoyale": "Battle Royale",
    "onlineBattleRoyale": "Battle Royale en ligne",
    "levelsSoloPlayer": "Niveaux (joueur solo)",
    "levelsSoloAI": "Niveaux (IA solo)",
    "version": "Version",
    "versionDate": "{{date, DD/MM/YYYY}}",
    "by": "Par",
    "infos": "Plus d'infos",
    "readme": "Fichier Lisez-moi",
    "source": "Télécharger la source",
    "language": "Langue :",
    "othersSettings": "Paramètres",
    "enableAnimations": "Activer les animations",
    "showDebugInfo": "Activer le mode de débogage",
    "renderBlur": "Activer le rendu de flou",
    "enableMultithreading": "Activer le multi-threading",
    "onlineEnableClientSidePredictions": "Activer les prédictions côté client pour le jeu en ligne",
    "settingNotAvailable": "Ce paramètre est actuellement indisponible.",
    "multithreadingInfos": "Si activé, le moteur de jeu et le moteur graphique seront exécutés de manière indépendante ce qui améliorera les performances du jeu.",
    "onlineEnableClientSidePredictionsInfos": "Si activé, les performances du mode de jeu en ligne seront plus stables. Fonctionnalité expérimentale.",
    "textOutput": "Activer le rendu en mode texte",
    "graphicSkin": "Skin graphique :",
    "flat": "Flat (par défaut)",
    "tropical": "Tropical",
    "pixel": "Pixel",
    "maxFPS": "FPS maximum :"
  },
  "settings": {
    "title": "Paramètres de la partie :",
    "possibleFailInitGame": "Il est possible que l'initialisation de la partie échoue avec vos paramètres car il n'y aura pas assez d'espace pour placer tous les Snake. Dans ce cas, un message « Une erreur est survenue » peut s'afficher. Essayez avec d'autres paramètres.",
    "gridSize": "Taille de la grille :",
    "placeholderHeight": "Hauteur",
    "placeholderWidth": "Largeur",
    "invalidSize": "Cette valeur doit être comprise entre {{min}} et {{max}}",
    "options": "Autres options :",
    "borderWalls": "Entourer la grille de murs",
    "generateWalls": "Générer des murs à des positions aléatoires",
    "mazeGrid": "Générer un labyrinthe",
    "sameGrid": "Partie sur la même grille",
    "speed": "Vitesse du jeu :",
    "speedSelect": {
      "1": "1 – La plus rapide",
      "3": "3 – Rapide",
      "5": "5 – Moyenne",
      "8": "8 – Normale",
      "10": "10 – Assez lente",
      "15": "15 – Lente",
      "20": "20 – Très lente",
      "25": "25 – Extrêmement lente",
      "custom": "Vitesse personnalisée…"
    },
    "invalidSpeed": "Cette valeur doit être comprise entre {{min}} et {{max}}",
    "progressiveSpeed": "Augmenter la vitesse progressivement",
    "customSpeed": "Vitesse personnalisée :",
    "placeholderCustomSpeed": "Entrez la vitesse…",
    "customSpeedHelp": "Plus le nombre est élevé, plus la vitesse du jeu est lente, et inversement",
    "playerSettings": "Options du joueur :",
    "aiAssistant": "Activer l'assistant IA",
    "aiAssistantInfos": "En activant cette option, une IA tentera de corriger votre trajectoire si vous êtes sur le point de vous écraser sur un obstacle. Réduit la difficulté du jeu.",
    "aiLevel": "Niveau de l'IA :",
    "aiLevelSelect": {
      "random": "Au hasard",
      "low": "Faible",
      "normal": "Normal",
      "high": "Élevé",
      "ultra": "Ultra"
    },
    "invalidaiLevel": "Cette valeur est invalide",
    "autoRetry": "Faire que l'IA recommence auto sa partie après un Game Over",
    "numberIA": "Nombre d'IA :",
    "placeholderNumberIA": "Entrez le nombre…",
    "invalidIANumber": "Cette valeur doit être comprise entre 2 et 100",
    "battleAgainstAIs": "Jouer contre les IA",
    "validate": "Valider",
    "reset": "Réinitialiser",
    "backToMenu": "Retour au menu",
    "privateGame": "Garder la partie privée",
    "enableAI": "Activer les IA",
    "seedGrid": "Valeur aléatoire grille :",
    "seedGame": "Valeur aléatoire jeu :",
    "advancedSettings": "Paramètres avancés…",
    "invalidValue": "Cette valeur est invalide."
  },
  "game": {
    "backToMenu": "Retour au menu",
    "currentMode": "Mode de jeu actuel :",
    "confirmQuit": "Êtes-vous sûr de vouloir retourner au menu ?",
    "equalityPlayerVSAI": "Vous avez fini ex-aequo avec l'IA !",
    "winPlayerVSAI": "Bravo, vous avez gagné !",
    "losePlayerVSAI": "Dommage, l'IA vous a battu avec un score supérieur !",
    "oneWinnerAIVSAI": "L'IA n°{{numWinner}} a gagné !",
    "equalityAIVSAI": "Les deux IA ont fini ex-aequo !",
    "oneWinnerBattleRoyale": "L'IA n°{{numWinner}} a gagné avec un score de {{score}} !",
    "winnersBattleRoyale": "Les IA",
    "winnerAIBattleRoyale": "L'IA",
    "winnersNumBattleRoyale": "n°{{numWinner}}",
    "andWinnersBattleRoyale": "et",
    "andPlayerWinnersBattleRoyale": "ainsi que vous",
    "winScoreBattleRoyale": "ont gagné avec un score de {{score}} !",
    "winPlayerScoreBattleRoyale": "avez gagné avec un score de {{score}} !",
    "playerWinnerBattleRoyale": "Vous avez gagné avec un score de {{score}} !"
  },
  "levels": {
    "default": "Niveaux par défaut",
    "downloaded": "Niveaux téléchargés",
    "titlePlayer": "Niveaux (joueur solo)",
    "titleAI": "Niveaux (IA solo)",
    "emptyList": "Aucun niveau trouvé…",
    "download": "Télécharger des niveaux",
    "downloadLink": "Les niveaux seront téléchargés depuis {{url}}",
    "editDownloadURL": "Modifier l'URL de téléchargement",
    "editDownloadURLPrompt": "Entrez l'URL de téléchargement des niveaux.\n* Variables disponibles :\n{player} - type de joueur (humain, IA)\n{appVersion} - version de l'application.\n\nLa modification de ce paramètre peut faire planter le jeu ou vous exposer à des problèmes de sécurité. Ne la modifiez que si vous savez ce que vous faites. Ce paramètre n'est pas persistant et sera effacé si vous rechargez l'application.",
    "downloading": "Téléchargement en cours, veuillez patienter… Si le bouton reste grisé après plus de 10 secondes, cliquez sur le bouton ci-dessous pour le débloquer et réessayer le téléchargement :",
    "buttonDeblock": "Débloquer le téléchargement",
    "disabledLevel": "Niveau bloqué. Terminez les niveaux précédents pour le débloquer.",
    "notCompatible": "Ce niveau n'est pas compatible avec cette version du jeu. Mettez-le à jour.",
    "goalAchieved": "Objectif atteint ! Vous pouvez passer au prochain niveau.",
    "goalNotAchieved": "Objectif raté ! Essayez à nouveau.",
    "level": "Niveau",
    "reachScore": "Atteignez au moins le score de {{value}} pour passer ce niveau !",
    "reachScoreTime": "Atteignez le score de {{value}} en moins de {{count}} seconde !",
    "reachScoreTime_plural": "Atteignez le score de {{value}} en moins de {{count}} secondes !",
    "reachMaxScore": "Atteignez le score maximal pour cette grille pour passer ce niveau !",
    "multiBestScore": "Terminez cette partie en obtenant un meilleur score que l'adversaire pour passer ce niveau !",
    "multiBestScore_plural": "Terminez cette partie en obtenant un meilleur score que les adversaires pour passer ce niveau !",
    "multiReachScoreFirst": "Atteignez le score de {{value}} avant l'adversaire pour passer ce niveau !",
    "multiReachScoreFirst_plural": "Atteignez le score de {{value}} avant les adversaires pour passer ce niveau !",
    "mazeMode": "Mode labyrinthe ! Trouvez le chemin vers la pomme pour passer ce niveau.\nLe Snake n'avance pas automatiquement.",
    "bestScore": "Meilleur score : {{count}}",
    "bestTime": "Meilleur temps : {{count}} seconde",
    "bestTime_plural": "Meilleur temps : {{count}} secondes",
    "bestScoreShort": "× {{count}}",
    "bestTimeShort": "{{count}} seconde",
    "bestTimeShort_plural": "{{count}} secondes",
    "timerRemaining": "Il reste {{count}} seconde",
    "timerRemaining_plural": "Il reste {{count}} secondes",
    "localstorageDisabled": "Les cookies sont désactivés sur votre navigateur. Vous perdrez votre progression au prochain rechargement de la page. Activez-les puis rechargez la page pour éviter cela.",
    "difficulty": "Difficulté :",
    "levelBonusShop": "Boutique des bonus",
    "displayBonusShop": "Afficher la boutique…",
    "bonusNotApplicable": "Ce bonus n'est pas applicable.",
    "notEnoughFruits": "Vous n'avez pas assez de crédit pour acheter ce bonus.",
    "bonusAlreadyEquipped": "Vous êtes déjà équipé d'un bonus. Utilisez-le en jouant à un niveau ou vendez-le.",
    "bonusEquipped": "Bonus équipé :",
    "none": "aucun",
    "sellBonus": "Vendre le bonus",
    "bonus": {
      "passLevel": "Passer un niveau",
      "passLevelInfo": "Ce bonus vous permet de passer un niveau. Achetez-le, puis sélectionnez un niveau : celui-ci sera automatiquement passé, comme si vous l'aviez réussi.",
      "aiAssistant": "Mode assistant IA",
      "aiAssistantInfo": "Ce bonus permet d'activer le mode assistant IA. Achetez-le, puis sélectionnez un niveau : le mode assistant IA sera activé. Ne fonctionne pas pour certains niveaux, comme les labyrinthes.",
      "unlockAllLevels": "Débloquer tous les niveaux",
      "unlockAllLevelsInfo": "Ce bonus vous permet de débloquer tous les niveaux, qu'ils soient présents ou futurs.",
      "increaseGoldFruits": "Augmenter la fréquence d'apparition des pommes dorées",
      "increaseGoldFruitsInfo": "Ce bonus vous permet d'augmenter la fréquence d'apparition des pommes dorées : la chance d'apparition passe de 1 chance sur 100 à 1 chance sur 3.",
      "destroyAis": "Détruire les IAs adverses",
      "destroyAisInfo": "Ce bonus vous permet de détruire les IAs adverses, ce qui rend les niveaux contenant des IAs plus faciles.",
      "unknown": "Bonus inconnu",
      "unknownInfo": "Ce bonus est inconnu. Peut-être a-t-il été acheté sur une version plus récente du jeu. Voulez-vous le vendre quand même, sachant que son prix est inconnu ? Autrement dit, vous ne serez pas remboursé.",
      "noTimeLimit": "Pas de limite de temps",
      "noTimeLimitInfo": "Désactive la limite de temps pour les niveaux qui en ont une."
    }
  },
  "servers": {
    "serverList": "Liste des serveurs",
    "selectInfo": "Sélectionnez un serveur :",
    "noServerFound": "Aucun serveur trouvé…",
    "loadingList": "Chargement de la liste des serveurs… Veuillez patienter.",
    "noRoomound": "Aucune salle trouvée…",
    "infos": "{{width}}×{{height}} – Vitesse : {{speed}}",
    "infosBorderWalls": "Grille entourée de murs",
    "infosGenerateWalls": "Murs générés aléatoirement",
    "infosPlayers": "{{count}} joueur/{{max}}",
    "infosPlayers_plural": "{{count}} joueurs/{{max}}",
    "infosSpectators": "{{count}} spectateur",
    "infosSpectators_plural": "{{count}} spectateurs",
    "backToList": "Retour à la liste des serveurs",
    "roomsListTitle": "Liste des salles",
    "roomsListInfos": "Sélectionnez une salle :",
    "loadingRooms": "Chargement de la liste des salles… Veuillez patienter.",
    "createRoom": "Créer une salle",
    "connectionError": "Une erreur est survenue lors de la connexion au serveur. Veuillez réessayer.",
    "errorLoadingRooms": "Une erreur est survenue lors du chargement de la liste des salles. Veuillez réessayer.",
    "creatingRoom": "Création de la salle… Veuillez patienter.",
    "room": "Salle n°{{number}}",
    "errorRoomCreation": "Une erreur est survenue lors de la création de la salle. Veuillez réessayer.",
    "joinPrivateRoom": "Rejoindre une salle privée",
    "enterCode": "Entrez le code de la salle :",
    "customServer": "Serveur personnalisé…",
    "enterCustomServer": "Entrez l'adresse du serveur :",
    "connectingToServer": "Connexion au serveur… Veuillez patienter.",
    "cancel": "Annuler",
    "refreshRooms": "Actualiser la liste",
    "joinRoom": "Connexion à la salle… Veuillez patienter.",
    "errorRoomJoin": "Une erreur est survenue lors de la connexion à la salle. Veuillez réessayer.",
    "errorReason": "Raison de l'erreur :",
    "errorReason_unknown": "Inconnue",
    "errorRoomJoinReason_roomNotFound": "La salle n'a pas été trouvée.",
    "errorRoomJoinReason_roomAlreadyJoined": "Vous avez déjà rejoint cette salle.",
    "errorRoomCreationReason_maxRoomLimitReached": "Le nombre maximal de salles que le serveur peut gérer a été atteint.",
    "errorRoomCreationReason_invalidSettings": "Paramètres invalides.",
    "errorRoomCreationReason_alreadyCreatedRoom": "Vous avez déjà créé une salle ou vous avez déjà rejoint une salle.",
    "errorServerVersion": "La version de ce serveur ({{server_version}}) est différente de votre version du jeu ({{client_version}}). Vous risquez de rencontrer des problèmes.",
    "addressLabel": "Adresse du serveur :",
    "roomCode": "Code de la salle :",
    "untitled": "Sans titre",
    "searchingPlayers": "(recherche de joueurs)",
    "started": "(partie démarrée)",
    "starting": "(démarrage en cours)",
    "authenticationServer": "Authentification au serveur",
    "linkAuthenticationServer": "Si le formulaire ne s'affiche pas, cliquez ici",
    "disconnectedError": "Vous avez été déconnecté du serveur. Veuillez réessayer."
  }
}, true, false); // English

i18next__WEBPACK_IMPORTED_MODULE_0__["default"].addResourceBundle("en", "translation", {
  "debugModeEnabled": "Debug mode enabled",
  "lang": {
    "fr": "Français",
    "en": "English"
  },
  "update": {
    "updateAvailable": "An update of the game is available",
    "version": "Version",
    "of": "of",
    "current": "You currently have the version",
    "versionDate": "{{date, MM/DD/YYYY}}",
    "download": "Download the update",
    "getURL": "Get the URL to the download",
    "getChanges": "Get the list of changes",
    "URLToDownload": "Download URL:",
    "noChanges": "No change provided.",
    "changes": "Changes in the new version:"
  },
  "menu": {
    "selectGame": "Select a game mode:",
    "soloAi": "Single AI",
    "soloPlayer": "Single player",
    "playerVsAi": "Player VS AI",
    "aiVsAi": "AI VS AI",
    "battleRoyale": "Battle Royale",
    "onlineBattleRoyale": "Online Battle Royale",
    "levelsSoloPlayer": "Levels (single player)",
    "levelsSoloAI": "Levels (single AI)",
    "version": "Version",
    "versionDate": "{{date, MM/DD/YYYY}}",
    "by": "By",
    "infos": "More informations",
    "readme": "Readme file",
    "source": "Download the source",
    "language": "Language:",
    "othersSettings": "Settings",
    "enableAnimations": "Enable the animations",
    "showDebugInfo": "Enable the debug mode",
    "renderBlur": "Enable the blur rendering",
    "enableMultithreading": "Enable the multithreading",
    "onlineEnableClientSidePredictions": "Enable the client-side predictions for online game",
    "settingNotAvailable": "This setting is currently unavailable.",
    "multithreadingInfos": "If enabled, the game engine and the graphics engine will run independently which will improve game performance.",
    "onlineEnableClientSidePredictionsInfos": "If enabled, the performance of the online game mode will be more stable. Experimental functionality.",
    "textOutput": "Enable the text mode rendering",
    "graphicSkin": "Graphic skin:",
    "flat": "Flat (by default)",
    "tropical": "Tropical",
    "pixel": "Pixel",
    "maxFPS": "Maximum FPS:"
  },
  "settings": {
    "title": "Game settings:",
    "possibleFailInitGame": "It's possible that the initialization of the game fails with your settings because there will not be enough space to place all the Snake. In this case, a message \"An error has occurred\" may be displayed. Try with other settings.",
    "gridSize": "Grid size:",
    "placeholderHeight": "Height",
    "placeholderWidth": "Width",
    "invalidSize": "This value must be between {{min}} and {{max}}",
    "options": "Others options:",
    "borderWalls": "Surround the grid with walls",
    "generateWalls": "Generate walls at random positions",
    "mazeGrid": "Generate a maze",
    "sameGrid": "Game on the same grid",
    "speed": "Speed:",
    "speedSelect": {
      "1": "1 – Fastest",
      "3": "3 – Fast",
      "5": "5 – Medium",
      "8": "8 – Normal",
      "10": "10 – Quite slow",
      "15": "15 – Slow",
      "20": "20 – Very slow",
      "25": "25 – Extremely slow",
      "custom": "Custom speed…"
    },
    "invalidSpeed": "This value must be between {{min}} and {{max}}",
    "progressiveSpeed": "Increase the speed progressively",
    "customSpeed": "Custom speed:",
    "placeholderCustomSpeed": "Enter the speed…",
    "customSpeedHelp": "The higher the number, the slower the game speed, and vice versa",
    "playerSettings": "Player options:",
    "aiAssistant": "Enable the AI assistant",
    "aiAssistantInfos": "By enabling this option, an AI ​​will try to correct your trajectory if you are about to crash into an obstacle. Reduces the difficulty of the game.",
    "aiLevel": "AI level:",
    "aiLevelSelect": {
      "random": "Random",
      "low": "Low",
      "normal": "Normal",
      "high": "High",
      "ultra": "Ultra"
    },
    "invalidaiLevel": "This value is invalid",
    "autoRetry": "Make the AI restarts its game after a Game Over",
    "numberIA": "Number of AI:",
    "placeholderNumberIA": "Enter the number…",
    "invalidIANumber": "This value must be between 2 and 100",
    "battleAgainstAIs": "Play against AIs",
    "validate": "Validate",
    "reset": "Reset",
    "backToMenu": "Back to the menu",
    "privateGame": "Keep the game private",
    "enableAI": "Enable the AIs",
    "seedGrid": "Grid random value:",
    "seedGame": "Game random value:",
    "advancedSettings": "Advanced settings…",
    "invalidValue": "This value is invalid."
  },
  "game": {
    "backToMenu": "Back to the menu",
    "currentMode": "Current game mode:",
    "confirmQuit": "Are you sure that you want to go back to the menu?",
    "equalityPlayerVSAI": "You finished tied with AI!",
    "winPlayerVSAI": "Congratulations, you won!",
    "losePlayerVSAI": "Too bad, the AI ​​beat you with a higher score!",
    "oneWinnerAIVSAI": "The AI n°{{numWinner}} won!",
    "equalityAIVSAI": "The two AIs finished tied!",
    "oneWinnerBattleRoyale": "The AI n°{{numWinner}} won with a score of {{score}}!",
    "winnersBattleRoyale": "The AIs",
    "winnerAIBattleRoyale": "The AI",
    "winnersNumBattleRoyale": "n°{{numWinner}}",
    "andWinnersBattleRoyale": "and",
    "andPlayerWinnersBattleRoyale": "as well as you",
    "winScoreBattleRoyale": "won with a score of {{score}}!",
    "winPlayerScoreBattleRoyale": "won with a score of {{score}}!",
    "playerWinnerBattleRoyale": "You won with a score of {{score}}!"
  },
  "levels": {
    "default": "Default levels",
    "downloaded": "Downloaded levels",
    "titlePlayer": "Levels (single player)",
    "titleAI": "Levels (single AI)",
    "emptyList": "No level found…",
    "download": "Download levels",
    "downloadLink": "The levels will be downloaded from {{url}}",
    "editDownloadURL": "Edit the download URL",
    "editDownloadURLPrompt": "Enter the download URL of the levels.\n* Available variables:\n{player} - player type (human, AI)\n{appVersion} - version of the application.\n\nChanging this setting may cause the game to crash or expose you to security issues. Only change it if you know what you are doing. This setting is not persistent and will be erased if you reload the application.",
    "downloading": "Downloading, please wait… If the button remains gray after more than 10 seconds, click on the button below to unblock and try again:",
    "buttonDeblock": "Unlock the download",
    "disabledLevel": "Level locked. Complete the previous levels to unlock it.",
    "notCompatible": "This level is not compatible with this version of the game. Update it.",
    "goalAchieved": "Goal achieved! You can move to the next level.",
    "goalNotAchieved": "Goal missed! Try again.",
    "level": "Level",
    "reachScore": "Reach at least the score of {{value}} to pass this level!",
    "reachScoreTime": "Reach the score of {{value}} in less than {{count}} second!",
    "reachScoreTime_plural": "Reach the score of {{value}} in less than {{count}} seconds!",
    "reachMaxScore": "Reach the maximum score for this grid to pass this level!",
    "multiBestScore": "Finish this game by getting a better score than the opponent to pass this level!",
    "multiBestScore_plural": "Finish this game by getting a better score than the opponents to pass this level!",
    "multiReachScoreFirst": "Reach the score of {{value}} before the opponent to pass this level!",
    "multiReachScoreFirst_plural": "Reach the score of {{value}} before the opponents to pass this level!",
    "mazeMode": "Maze mode! Find the path to the apple to pass this level.\nThe Snake doesn't move automatically.",
    "bestScore": "Best score: {{count}}",
    "bestTime": "Best time: {{count}} second",
    "bestTime_plural": "Best time: {{count}} seconds",
    "timerRemaining": "{{count}} second left",
    "timerRemaining_plural": "{{count}} seconds left",
    "bestScoreShort": "× {{count}}",
    "bestTimeShort": "{{count}} second",
    "bestTimeShort_plural": "{{count}} seconds",
    "localstorageDisabled": "Cookies are disabled on your browser. You will lose your progress the next time you reload the page. Activate them and reload the page to avoid this.",
    "difficulty": "Difficulty :",
    "levelBonusShop": "Bonus shop",
    "displayBonusShop": "Display the shop…",
    "bonusNotApplicable": "This bonus is not applicable.",
    "notEnoughFruits": "You don't have enough credit to buy this bonus.",
    "bonusAlreadyEquipped": "You are already equipped with a bonus. Use it while playing a level or sell it.",
    "bonusEquipped": "Equipped bonus:",
    "none": "none",
    "sellBonus": "Sell the bonus",
    "bonus": {
      "passLevel": "Pass a level",
      "passLevelInfo": "This bonus allows you to pass a level. Buy it, then select a level: it will be automatically passed, as if you had succeeded it.",
      "aiAssistant": "Assistant AI mode",
      "aiAssistantInfo": "This bonus enables the AI ​​assistant mode to be activated. Buy it, then select a level: AI assistant mode will be activated. Does not work for some levels, like mazes.",
      "unlockAllLevels": "Unlock all levels",
      "unlockAllLevelsInfo": "This bonus allows you to unlock all levels, whether present or future.",
      "increaseGoldFruits": "Increase the frequency of appearance of golden apples",
      "increaseGoldFruitsInfo": "This bonus allows you to increase the frequency of appearance of golden apples: the chance of appearing is reduced from 1 in 100 to 1 in 3.",
      "destroyAis": "Destroy opponent AIs",
      "destroyAisInfo": "This bonus allows you to destroy enemy AIs, which makes levels with AIs easier.",
      "unknown": "Unknown bonus",
      "unknownInfo": "This bonus is unknown. Perhaps it was purchased on a newer version of the game. Do you want to sell it anyway, knowing that its price is unknown? In other words, you will not be refunded.",
      "noTimeLimit": "No time limit",
      "noTimeLimitInfo": "Disables the time limit for levels that have one."
    }
  },
  "servers": {
    "serverList": "Servers list",
    "selectInfo": "Select a server:",
    "noServerFound": "No server found…",
    "loadingList": "Loading servers list… Please wait.",
    "noRoomound": "No room found…",
    "infos": "{{width}}×{{height}} – Speed: {{speed}}",
    "infosBorderWalls": "Grid bordered by walls",
    "infosGenerateWalls": "Random walls",
    "infosPlayers": "{{count}} player/{{max}}",
    "infosPlayers_plural": "{{count}} players/{{max}}",
    "infosSpectators": "{{count}} spectator",
    "infosSpectators_plural": "{{count}} spectators",
    "backToList": "Back to the servers list",
    "roomsListTitle": "Rooms list",
    "roomsListInfos": "Select a room:",
    "loadingRooms": "Loading the rooms list… Please wait.",
    "createRoom": "Create a room",
    "connectionError": "An error has occurred when connecting to the server. Please retry.",
    "errorLoadingRooms": "An error has occurred when loading the rooms list. Please retry.",
    "creatingRoom": "Creating the room… Please wait.",
    "room": "Room n°{{number}}",
    "errorRoomCreation": "An error has occurred when creating the room. Please retry.",
    "joinPrivateRoom": "Join a private room",
    "enterCode": "Enter the code of the room:",
    "customServer": "Custom server…",
    "enterCustomServer": "Enter the address of the server:",
    "connectingToServer": "Connecting to the server… Please wait.",
    "cancel": "Cancel",
    "refreshRooms": "Refresh the list",
    "joinRoom": "Joining the room… Please wait.",
    "errorRoomJoin": "An error has occurred when joining the room. Please retry.",
    "errorReason": "Error reason:",
    "errorReason_unknown": "Unknown",
    "errorRoomJoinReason_roomNotFound": "The room was not found.",
    "errorRoomJoinReason_roomAlreadyJoined": "You already joined this room.",
    "errorRoomCreationReason_maxRoomLimitReached": "The maximum number of rooms the server can manage has been reached.",
    "errorRoomCreationReason_invalidSettings": "Invalid settings.",
    "errorRoomCreationReason_alreadyCreatedRoom": "You have already created a room or you have already joined a room.",
    "errorServerVersion": "This server version ({{server_version}}) is different from your version of the game ({{client_version}}). You may encounter issues.",
    "addressLabel": "Server address:",
    "roomCode": "Room code:",
    "untitled": "Untitled",
    "searchingPlayers": "(searching players)",
    "started": "(game started)",
    "starting": "(game starting)",
    "authenticationServer": "Server authentication",
    "linkAuthenticationServer": "If the form does not appear, click here",
    "disconnectedError": "You have been disconnected from the server. Please retry."
  }
}, true, false);

/***/ }),

/***/ "./libs/lowlight.astar.min.js":
/*!************************************!*\
  !*** ./libs/lowlight.astar.min.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
Copyright 2017, Lecoq Simon (lowlight.fr)

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
(function(a){var b=Math.sign,c=Math.min,d=Math.abs;"undefined"==typeof a.Lowlight&&(a.Lowlight={}), true&&"object"==typeof module.exports&&(module.exports=a.Lowlight);class e{constructor(){this.nodes=new Map}id(a){return a}node(a,b=!1){return b?this.nodes.get(this.id(arguments[0])):this.nodes.get(a)}data(a,b){return 2===arguments.length&&(a.graph.get(this)._data=b),a.graph.get(this)._data}adjacent(c,a){return c.graph.get(this).has(a)}neighbors(a){return Array.from(a.graph.get(this).keys())}connected(c,a){return c.graph.get(this)._connectivity===a.graph.get(this)._connectivity}connect(){let a=Array.from(this.nodes.values()),b=0;for(let b=0;b<a.length;b++)a[b].graph.get(this)._connectivity=void 0;for(let c=0;c<a.length;c++){if(void 0!==a[c].graph.get(this)._connectivity)continue;let d=[a[c]];for(b++;d.length;){let a=d.shift();a.graph.get(this)._connectivity=b,this.neighbors(a).map((a)=>{void 0===a.graph.get(this)._connectivity&&0>d.indexOf(a)&&d.push(a)})}}}add(a){return 1<arguments.length?Array.from(arguments).map((a)=>this.add(a)):(a.graph.set(this,new Map),this.nodes.set(a.id,a),a)}delete(a){return 1<arguments.length?Array.from(arguments).map((a)=>this.delete(a)):(a.graph.delete(this),this.nodes.delete(a.id),a)}edge(c,a,b=1,d=1){if(!c.graph.has(this)||!a.graph.has(this))throw new Error("Nodes must be on the same graph");return null===b?c.graph.get(this).delete(a):c.graph.get(this).set(a,b),null===d?a.graph.get(this).delete(c):a.graph.get(this).set(c,d),this}cost(c,a){return this.adjacent(c,a)?c.graph.get(this).get(a):null}}e.fromArray=function(a,b={}){let c=e.fromArray.X(a,b.order),d=e.fromArray.Y(a,b.order),g=e.fromArray.at.bind(null,a,b.order),h=[],j=null;for(let k,l=1;l<Math.max(2,arguments.length);l++){k=new e,h.push(k),b=arguments[l]||{};let a=e.fromArray.id.bind(null,c,d,b.torus),i=b.cost||e.fromArray.cost,n=e.fromArray.edge.bind(null,k,i);for(let b=0;b<c;b++)for(let c,e=0;e<d;e++)c=k.add(j?j.get(a(b,e)):new f(a(b,e))),c.x=b,c.y=e,c.graph.get(k)._data=g(b,e),n(c,k.nodes.get(a(b-1,e))),n(c,k.nodes.get(a(b+1,e))),n(c,k.nodes.get(a(b,e-1))),n(c,k.nodes.get(a(b,e+1)));if(b.diagonals)for(let e=0;e<c;e++)for(let c=0;c<d;c++){let d=k.nodes.get(a(e,c)),f=k.adjacent(d,k.nodes.get(a(e-1,c))),g=k.adjacent(d,k.nodes.get(a(e+1,c))),h=k.adjacent(d,k.nodes.get(a(e,c-1))),i=k.adjacent(d,k.nodes.get(a(e,c+1)));"strict"===b.cutting?(f&&h&&n(d,k.nodes.get(a(e-1,c-1))),f&&i&&n(d,k.nodes.get(a(e-1,c+1))),g&&h&&n(d,k.nodes.get(a(e+1,c-1))),g&&i&&n(d,k.nodes.get(a(e+1,c+1)))):((f||h||b.cutting)&&n(d,k.nodes.get(a(e-1,c-1))),(f||i||b.cutting)&&n(d,k.nodes.get(a(e-1,c+1))),(g||h||b.cutting)&&n(d,k.nodes.get(a(e+1,c-1))),(g||i||b.cutting)&&n(d,k.nodes.get(a(e+1,c+1))))}Object.defineProperty(k,"id",{enumerable:!1,configurable:!1,writable:!0,value(b){return a(b.x,b.y)}}),k.connect(),k.X=c,k.Y=d,k.TORUS=b.torus,j||(j=k.nodes)}return 1<h.length?h:h[0]},e.fromArray.X=function(a,b="yx"){return"xy"===b?a.length:"yx"===b?a[0].length:0},e.fromArray.Y=function(a,b="yx"){return"xy"===b?a[0].length:"yx"===b?a.length:0},e.fromArray.at=function(a,b="yx",c,d){return"xy"===b?a[c][d]:a[d][c]},e.fromArray.id=function(a=0,b=0,c=!1,d,e){return c?(e+b)%b*a+(d+a)%a:0<=d&&d<a&&0<=e&&e<b?e*a+d:null},e.fromArray.cost=function(){return 1},e.fromArray.edge=function(c,d,e,a){a&&c.edge(e,a,d(c.data(e),c.data(a)),d(c.data(a),c.data(e)))},e.fromArray.update=function(){console.warn("Graph.fromArray isn't implemented yet")};class f{constructor(a,b){for(let c in this.id=a,this.graph=new Map,b)"id"!=c&&"graph"!=c&&(this[c]=b[c])}}class g{constructor(a){this.nodes=[],this.score="function"==typeof a?a:(b)=>+b}get size(){return this.nodes.length}add(a){if(1<arguments.length){for(let a=0;a<arguments.length;a++)this.add(arguments[a]);return this}return this.nodes.push(a),this.bubble(this.size-1)}set(a){let b=this.nodes.indexOf(a);return~b?this.score(a)<=this.score(this.nodes[b])?this.bubble(this.nodes.indexOf(a)):this.sink(this.nodes.indexOf(a)):this.add(a)}pop(){let a=this.nodes[0],b=this.nodes.pop();return 0<this.size&&(this.nodes[0]=b,this.sink(0)),a}top(){return this.nodes[0]}delete(a){if(1<arguments.length){for(let a=0;a<arguments.length;a++)this.delete(arguments[a]);return this}for(let b=0;b<this.size;b++){if(this.nodes[b]!=a)continue;let c=this.nodes.pop();return b==this.size-1?this:(this.nodes[b]=c,this.bubble(b).sink(b))}}bubble(a){let b=this.nodes[a],c=this.score(b);for(;0<a;){let d=Math.floor((a+1)/2)-1,e=this.nodes[d];if(c>=this.score(e))break;this.nodes[d]=b,this.nodes[a]=e,a=d}return this}sink(a){let b=this.nodes[a],c=this.score(b);for(;;){let d=2*(a+1),e=d-1,f=null;if(e<this.size&&this.score(this.nodes[e])<c&&(f=e),d<this.size&&this.score(this.nodes[d])<(f?this.score(this.nodes[f]):c)&&(f=d),null===f)break;this.nodes[a]=this.nodes[f],this.nodes[f]=b,a=f}return this}}let h={manhattan:function(c,a,b={}){let e=d(a.x-c.x),f=d(a.y-c.y);return(b.multiplier||1)*(e+f)},manhattanTorus:function(e,a,b={}){let f=c(d(a.x-e.x),a.x+(b.x||0)-e.x,e.x+(b.x||0)-a.x),g=c(d(a.y-e.y),a.y+(b.y||0)-e.y,e.y+(b.y||0)-a.y);return(b.multiplier||1)*(f+g)},diagonal:function(e,a,b={}){let f=d(a.x-e.x),g=d(a.y-e.y);return m*(f+g)+(dm-2*m)*c(f,g)},diagonalTorus:function(e,a,b={}){let f=c(d(a.x-e.x),a.x+(b.x||0)-e.x,e.x+(b.x||0)-a.x),g=c(d(a.y-e.y),a.y+(b.y||0)-e.y,e.y+(b.y||0)-a.y);return(b.multiplier||1)*(f+g)+((b.diagonalMultiplier||1.4)-2*(b.multiplier||1))*c(f,g)},euclidian:function(c,a,b={}){let e=d(a.x-c.x),f=d(a.y-c.y);return(b.multiplier||1)*Math.sqrt(e*e+f*f)},euclidianTorus:function(e,a,b={}){let f=c(d(a.x-e.x),a.x+(b.x||0)-e.x,e.x+(b.x||0)-a.x),g=c(d(a.y-e.y),a.y+(b.y||0)-e.y,e.y+(b.y||0)-a.y);return(b.multiplier||1)*(f+g)+((b.diagonalMultiplier||1.4)-2*(b.multiplier||1))*c(f,g)}};class i extends Error{constructor(a){super(a),this.name="WorkerError"}}class j{constructor(a,b={}){if(this.graphs=[],this.heuristic=b.heuristic||"manhattan",this.heuristicOptions=b.heuristicOptions||{},Array.isArray(a)&&(this.heuristic=b.heuristic in h?b.heuristic:b.diagonals?b.torus?"diagonalTorus":"diagonal":b.torus?"manhattanTorus":"manhattan",this.heuristicOptions.x=e.fromArray.X(a,b.order),this.heuristicOptions.y=e.fromArray.Y(a,b.order),this.graphs=e.fromArray.apply(this,arguments),!Array.isArray(this.graphs)&&(this.graphs=[this.graphs])),b.thread&&("undefined"==typeof WorkerGlobalScope||!(self instanceof WorkerGlobalScope))){this.worker=null;try{this.worker=new Worker(b.thread)}catch(a){throw"file:"===window.location.protocol&&console.warn("WebWorkers in local files may not be supported by your browser."),new i(`${b.thread} couldn't be opened.`)}"cost"in b&&(b.cost=b.cost.toString()),this.worker.postMessage(["constructor",a,b]),this.path=(a,b,c={})=>{this._worker_path_callback=c.callback,delete c.callback,this.worker.postMessage(["path",a,b,c])},this.worker.onmessage=(a)=>{let b=JSON.parse(a.data);switch(b[0]){case"path":this._worker_path_callback(b[1]);}}}}path(a,b,c={}){if(c.jps)return this.jps(a,b,c);let d=new g((a)=>a.estimated),e=new Map,f=this.graphs[c.layer||0];if(a=f.node(a,!0),b=f.node(b,!0),d.add({node:a,estimated:0}),e.set(a,{score:0,from:null}),!c.static||f.connected(a,b))for(;d.size;){let a=d.pop().node;if(a===b)break;f.neighbors(a).map((g)=>{let i=(e.has(a)?e.get(a).score:0)+f.cost(a,g);i<(e.has(g)?e.get(g).score:Infinity)&&(e.set(g,{score:i,from:a}),d.set({node:g,estimated:i+h[c.heuristic||this.heuristic](g,b,c.heuristicOptions||this.heuristicOptions)}))}),d.delete(a)}let i=[];if(e.has(b)){let a=b;for(i.push(b);null!==(a=e.get(a).from);)i.push(a);i=i.reverse()}return c.callback&&c.callback(i,e),i}}if(j.JPS=class{constructor(){}static access(c,d,a,b){return c.adjacent(d,b?c.node(a,!0):a)}static neighborhood(a,c,d,e){let f=[],g=d.get(e).from||null;if(null!==g){let h={x:b(e.x-g.x),y:b(e.y-g.y)};if(0!=h.x&&0!=h.y){let b=a(e,{x:e.x+h.x,y:e.y},!0),d=a(e,{x:e.x,y:e.y+h.y},!0);(b||d)&&(f.push(c.node({x:e.x+h.x,y:e.y+h.y},!0)),b&&(f.push(c.node({x:e.x+h.x,y:e.y},!0)),!a(e,{x:e.x,y:e.y-h.y},!0)&&f.push(c.node({x:e.x+h.x,y:e.y-h.y},!0))),d&&(f.push(c.node({x:e.x,y:e.y+h.y},!0)),!a(e,{x:e.x-h.x,y:e.y},!0)&&f.push(c.node({x:e.x-h.x,y:e.y+h.y},!0))))}else a(e,{x:e.x+h.x,y:e.y+h.y},!0)&&(f.push(c.node({x:e.x+h.x,y:e.y+h.y},!0)),0==h.x?0!=h.y&&(!a(e,{x:e.x-1,y:e.y},!0)&&f.push(c.node({x:e.x-1,y:e.y+h.y},!0)),!a(e,{x:e.x+1,y:e.y},!0)&&f.push(c.node({x:e.x+1,y:e.y+h.y},!0))):(!a(e,{x:e.x,y:e.y-1},!0)&&f.push(c.node({x:e.x+h.x,y:e.y-1},!0)),!a(e,{x:e.x,y:e.y+1},!0)&&f.push(c.node({x:e.x+h.x,y:e.y+1},!0))))}else return c.neighbors(e);return f.filter((a)=>a)}static jump(a,c,e,f,g,h){for(;;){if(!a(h,g))return null;if(g.x===f.x&&g.y===f.y)return g;let i={x:b(g.x-h.x),y:b(g.y-h.y)};if(0!=i.x&&0!=i.y){if(!a(g,{x:g.x-i.x,y:g.y},!0)&&a(g,{x:g.x-i.x,y:g.y+i.y},!0)||!a(g,{x:g.x,y:g.y-i.y},!0)&&a(g,{x:g.x+i.x,y:g.y-i.y},!0))return g;let b=j.JPS.jump.bind(this,a,c,e,f);if(null!==b(c.node({x:g.x+i.x,y:g.y},!0),g)||null!==b(c.node({x:g.x,y:g.y+i.y},!0),g))return g}else if(0!=i.x){if(!a(g,{x:g.x,y:g.y-1},!0)&&a(g,{x:g.x+i.x,y:g.y-1},!0)||!a(g,{x:g.x,y:g.y+1},!0)&&a(g,{x:g.x+i.x,y:g.y+1},!0))return g;}else if(0!=i.y&&(!a(g,{x:g.x-1,y:g.y},!0)&&a(g,{x:g.x-1,y:g.y+i.y},!0)||!a(g,{x:g.x+1,y:g.y},!0)&&a(g,{x:g.x+1,y:g.y+i.y},!0)))return g;h=g,g=c.node({x:g.x+i.x,y:g.y+i.y},!0)}return null}},j.prototype.jps=function(a,c,d={}){if(this.graphs[d.layer||0].TORUS)return console.warn("Torus map aren't yet supported by JPS"),d.callback&&d.callback([],new Map),[];let e=new g((a)=>a.estimated),f=new Map,i=this.graphs[d.layer||0],k=null;a=i.node(a,!0),c=i.node(c,!0),e.add({node:a,estimated:0}),f.set(a,{score:0,from:null});let l=j.JPS.access.bind(this,i),n=j.JPS.neighborhood.bind(this,l,i,f),o=j.JPS.jump.bind(this,l,i,f,c);if(!d.static||i.connected(a,c))for(;e.size;){let a=e.pop().node;if(a===c)break;n(a).map((b)=>{if(null!==(k=o(b,a))){let b=(f.has(a)?f.get(a).score:0)+i.cost(a,k);b<(f.has(k)?f.get(k).score:Infinity)&&(f.set(k,{score:b,from:a,jumped:!0}),e.set({node:k,estimated:b+h[d.heuristic||this.heuristic](k,c,d.heuristicOptions||this.heuristicOptions)}))}}),e.delete(a)}let p=[];if(f.has(c)){let d=c;for(;d.x!=a.x||d.y!=a.y;)for(let a=f.get(d).from;d.x!=a.x||d.y!=a.y;)p.push(d),d=i.node({x:d.x+b(a.x-d.x),y:d.y+b(a.y-d.y)},!0);p.push(d),p.reverse()}return d.callback&&d.callback(p,f),p},"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope){let a;onmessage=function(b){let c=b.data;switch(c[0]){case"constructor":if("cost"in c[2]){let a=/^\((.*?)\)\s*=>\s*{/.test(c[2].cost),b=/^function /.test(c[2].cost);c[2].cost=eval(`(${a||b?"":"function "}${c[2].cost})`)}a=new j(c[1],c[2]);break;case"path":postMessage(JSON.stringify(["path",a.path(c[1],c[2],c[3])]));}}}a.Lowlight.Astar={Graph:e,Node:f,BinaryHeap:g,Heuristic:h,Configuration:j,WorkerError:i}})("undefined"==typeof window?this:window);

/***/ }),

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _src_Shim__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/Shim */ "./src/Shim.js");
/* harmony import */ var _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/engine/Constants */ "./src/engine/Constants.js");
/* harmony import */ var _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/engine/Snake */ "./src/engine/Snake.js");
/* harmony import */ var _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/engine/Grid */ "./src/engine/Grid.js");
/* harmony import */ var _src_engine_GameGroup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/engine/GameGroup */ "./src/engine/GameGroup.js");
/* harmony import */ var _src_engine_OnlineClient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/engine/OnlineClient */ "./src/engine/OnlineClient.js");
/* harmony import */ var _src_ui_GameUI_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/ui/GameUI.js */ "./src/ui/GameUI.js");
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! seedrandom */ "./node_modules/seedrandom/index.js");
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(seedrandom__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _src_StorageFactory__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./src/StorageFactory */ "./src/StorageFactory.js");
/* harmony import */ var _src_Timers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./src/Timers */ "./src/Timers.js");
/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */










 // Modes :

window.SOLO_AI = "SOLO_AI";
window.SOLO_PLAYER = "SOLO_PLAYER";
window.PLAYER_VS_AI = "PLAYER_VS_AI";
window.AI_VS_AI = "AI_VS_AI";
window.BATTLE_ROYALE = "BATTLE_ROYALE";
window.BATTLE_ROYALE_ONLINE = "BATTLE_ROYALE_ONLINE"; // URIs :

window.UPDATER_URI = "https://www.eliastiksofts.com/snakeia/update/";
window.SERVERS_LIST_URI = "https://www.eliastiksofts.com/snakeia/serversList/"; // Levels types :

window.LEVEL_REACH_SCORE = "LEVEL_REACH_SCORE";
window.LEVEL_REACH_MAX_SCORE = "LEVEL_REACH_MAX_SCORE";
window.LEVEL_MULTI_BEST_SCORE = "LEVEL_MULTI_BEST_SCORE";
window.LEVEL_MULTI_REACH_SCORE_FIRST = "LEVEL_MULTI_REACH_SCORE_FIRST";
window.LEVEL_REACH_SCORE_ON_TIME = "LEVEL_REACH_SCORE_ON_TIME";
window.LEVEL_MAZE_WIN = "LEVEL_MAZE_WIN";
window.DEFAULT_LEVEL = "DEFAULT_LEVEL";
window.DOWNLOADED_LEVEL = "DOWNLOADED_LEVEL"; // Default levels :
// Level model : { settings: [heightGrid, widthGrid, borderWalls, generateWalls, sameGrid, speed, progressiveSpeed, aiLevel, numberIA, generateMaze, customGrid, mazeForceAuto, seedGrid, seedGame], type: levelType(see below), typeValue: levelTypeValue(score, time, ...), version: (version min to play the level) }

window.DEFAULT_LEVELS_SOLO_PLAYER = {
  1: {
    settings: [20, 20, false, false, true, null, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 20,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  2: {
    settings: [20, 20, true, false, true, null, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 20,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  3: {
    settings: [20, 20, true, true, true, 15, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 15,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  4: {
    settings: [20, 20, false, false, true, null, false, null, 0],
    type: LEVEL_REACH_SCORE_ON_TIME,
    typeValue: [20, 60],
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  5: {
    settings: [10, 10, true, false, true, 15, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 20,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  6: {
    settings: [15, 15, true, true, true, 15, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 20,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  7: {
    settings: [15, 15, false, false, true, null, false, null, 0],
    type: LEVEL_REACH_SCORE_ON_TIME,
    typeValue: [20, 45],
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  8: {
    settings: [20, 20, false, false, true, null, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 35,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  9: {
    settings: [15, 15, false, false, false, null, false, null, 1],
    type: LEVEL_MULTI_BEST_SCORE,
    typeValue: null,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  10: {
    settings: [10, 10, false, false, true, null, false, null, 0],
    type: LEVEL_REACH_SCORE_ON_TIME,
    typeValue: [10, 15],
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  11: {
    settings: [20, 20, false, false, true, null, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 50,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  12: {
    settings: [20, 20, true, false, true, null, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 50,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  13: {
    settings: [20, 20, true, true, true, 15, false, null, 0],
    type: LEVEL_REACH_SCORE_ON_TIME,
    typeValue: [15, 60],
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  14: {
    settings: [20, 20, true, false, true, 5, true, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 30,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  15: {
    settings: [15, 15, false, false, true, null, false, null, 1],
    type: LEVEL_REACH_SCORE_ON_TIME,
    typeValue: [15, 60],
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  16: {
    settings: [20, 20, false, false, true, null, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 75,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  17: {
    settings: [15, 15, true, false, true, 15, false, null, 2],
    type: LEVEL_MULTI_BEST_SCORE,
    typeValue: null,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  18: {
    settings: [5, 5, true, false, true, 25, false, null, 0],
    type: LEVEL_REACH_MAX_SCORE,
    typeValue: null,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  19: {
    settings: [5, 5, false, true, true, 10, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 10,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  },
  20: {
    settings: [20, 20, false, true, true, 15, false, null, 0],
    type: LEVEL_REACH_SCORE,
    typeValue: 50,
    version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
  }
};
window.SOLO_PLAYER_SAVE = "snakeia_solo_player_";
window.DEFAULT_LEVELS_SOLO_AI = DEFAULT_LEVELS_SOLO_PLAYER;
window.SOLO_AI_SAVE = "snakeia_solo_ai_"; // Downloadable levels :

window.DOWNLOAD_DEFAULT_URI = "https://www.eliastiksofts.com/snakeia/downloadLevels/?player={player}&ver={appVersion}";
window.SOLO_PLAYER_DOWNLOAD_LEVELS_TO = "snakeia_solo_player_downloadedLevels";
window.SOLO_AI_DOWNLOAD_LEVELS_TO = "snakeia_solo_ai_downloadedLevels";
var onlineClient = new _src_engine_OnlineClient__WEBPACK_IMPORTED_MODULE_6__["default"]();
var storageGlobal = new _src_StorageFactory__WEBPACK_IMPORTED_MODULE_9__["default"]();
var selectedMode = SOLO_AI;
var customSettings = {};
var workersAvailable = false;
document.getElementById("versionTxt").innerHTML = _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION;
document.getElementById("appVersion").innerHTML = _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION;
document.getElementById("dateTxt").innerHTML = DATE_VERSION;
document.getElementById("appUpdateDate").innerHTML = DATE_VERSION; // Libs

String.prototype.strcmp = function (str) {
  return this == str ? 0 : this > str ? 1 : -1;
};

if (!storageGlobal.isSupported) {
  document.getElementById("localstorageDisabled").style.display = "block";
} // Settings handling


Object(_src_Shim__WEBPACK_IMPORTED_MODULE_1__["WorkersAvailable"])(function (result) {
  workersAvailable = result;
  showSettings();
});

function restoreSettings() {
  customSettings = {
    enableAnimations: true,
    onlineEnableClientSidePredictions: false,
    renderBlur: false,
    enableMultithreading: true,
    showDebugInfo: false,
    textOutput: false,
    graphicSkin: "flat",
    maxFPS: -1,
    unlockAllLevels: false
  };
}

function saveSettings() {
  storageGlobal.setItem("snakeia_settings", JSON.stringify(customSettings));
  showSettings();
}

function getSettings() {
  return storageGlobal.getItem("snakeia_settings") && JSON.parse(storageGlobal.getItem("snakeia_settings")) || customSettings;
}

function showSettings() {
  var settings = getSettings();
  document.getElementById("enableAnimations").checked = false;
  document.getElementById("renderBlur").checked = false;
  document.getElementById("enableMultithreading").checked = false;
  document.getElementById("onlineEnableClientSidePredictions").checked = false;
  document.getElementById("showDebugInfo").checked = false;
  document.getElementById("textOutput").checked = false;
  if (settings.enableAnimations) document.getElementById("enableAnimations").checked = true;
  if (settings.renderBlur) document.getElementById("renderBlur").checked = true;
  if (settings.enableMultithreading && workersAvailable) document.getElementById("enableMultithreading").checked = true;
  if (settings.onlineEnableClientSidePredictions) document.getElementById("onlineEnableClientSidePredictions").checked = true;
  if (settings.showDebugInfo) document.getElementById("showDebugInfo").checked = true;
  if (settings.textOutput) document.getElementById("textOutput").checked = true;
  document.getElementById("graphicSkin").value = settings.graphicSkin;

  if (!workersAvailable) {
    document.getElementById("enableMultithreading").disabled = true;
    document.getElementById("multithreadingNotAvailable").style.display = "inline-block";
  } else {
    document.getElementById("enableMultithreading").disabled = false;
    document.getElementById("multithreadingNotAvailable").style.display = "none";
  }

  if (settings.maxFPS && !isNaN(settings.maxFPS)) {
    document.getElementById("maxFPS").value = settings.maxFPS;
  } else {
    document.getElementById("maxFPS").value = -1;
  }
}

restoreSettings();
customSettings = getSettings();
showSettings();

document.getElementById("enableAnimations").onchange = function () {
  customSettings.enableAnimations = this.checked;
  saveSettings();
};

document.getElementById("renderBlur").onchange = function () {
  customSettings.renderBlur = this.checked;
  saveSettings();
};

document.getElementById("enableMultithreading").onchange = function () {
  customSettings.enableMultithreading = this.checked;
  saveSettings();
};

document.getElementById("onlineEnableClientSidePredictions").onchange = function () {
  customSettings.onlineEnableClientSidePredictions = this.checked;
  saveSettings();
};

document.getElementById("showDebugInfo").onchange = function () {
  customSettings.showDebugInfo = this.checked;
  saveSettings();
};

document.getElementById("textOutput").onclick = function () {
  customSettings.textOutput = this.checked;
  saveSettings();
};

document.getElementById("graphicSkin").onchange = function () {
  customSettings.graphicSkin = this.value;
  saveSettings();
};

document.getElementById("maxFPS").oninput = function () {
  customSettings.maxFPS = this.value;
  saveSettings();
};

document.getElementById("resetParameters").onclick = function () {
  restoreSettings();
  saveSettings();
}; // Updater


function checkUpdate() {
  var script = document.createElement("script");
  script.src = UPDATER_URI;
  document.getElementsByTagName('head')[0].appendChild(script);
}

window.updateCallback = function (data) {
  if (typeof data !== "undefined" && data !== null && typeof data.version !== "undefined" && data.version !== null) {
    var newVersionTest = _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION.strcmp(data.version);

    if (newVersionTest < 0) {
      document.getElementById("updateAvailable").style.display = "block";
      document.getElementById("appUpdateVersion").textContent = data.version;
      var appUpdateDate = DATE_VERSION;

      if (typeof data.date !== "undefined" && data.date !== null) {
        appUpdateDate = data.date;
      }

      document.getElementById("appUpdateDate").textContent = appUpdateDate;
      var downloadURL = "http://eliastiksofts.com/snakeia/downloads/";

      if (typeof data.url !== "undefined" && data.url !== null) {
        downloadURL = data.url;
      }

      document.getElementById("appDownloadLink").onclick = function () {
        window.open(downloadURL, '_blank');
      };

      document.getElementById("appDownloadURLGet").onclick = function () {
        prompt(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("update.URLToDownload"), downloadURL);
      };

      var changes = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("update.noChanges");

      if (typeof data.changes !== "undefined" && data.changes !== null) {
        changes = data.changes;
      }

      document.getElementById("appUpdateChanges").onclick = function () {
        alert(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("update.changes") + "\n" + changes);
      };

      translateContent();
    }
  }
}; // Load server list


function loadServerList() {
  var script = document.createElement("script");
  script.src = SERVERS_LIST_URI;
  document.getElementsByTagName('head')[0].appendChild(script);
  document.getElementById("loadingServersList").style.display = "inline-block";
  document.getElementById("serverListGroup").innerHTML = "";
}

window.listServersCallback = function (data) {
  document.getElementById("serverListGroup").innerHTML = "";

  if (data != null && data.length > 0) {
    for (var i = 0; i < data.length; i++) {
      if (data[i]["url"] != null) {
        var url = data[i]["url"];
        var port = data[i]["port"];
        var name = data[i]["name"];
        var linkServer = document.createElement("a");
        linkServer.classList.add("list-group-item");
        linkServer.classList.add("list-group-item-action");

        if (name != null) {
          linkServer.textContent = name;
        } else {
          linkServer.textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.untitled");
        }

        linkServer.onclick = function (u, p) {
          connectToServer(u, p);
        }.bind(null, url, port);

        var serverAddress = document.createElement("div");
        serverAddress.classList.add("small");
        serverAddress.classList.add("text-muted");

        if (port != null && port.trim() != "") {
          serverAddress.textContent = url + ":" + port;
        } else {
          serverAddress.textContent = url;
        }

        linkServer.appendChild(serverAddress);
        document.getElementById("serverListGroup").appendChild(linkServer);
      }
    }
  } else {
    var noServerFound = document.createElement("strong");
    noServerFound.textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.noServerFound");
    document.getElementById("serverListGroup").appendChild(noServerFound);
  }

  document.getElementById("loadingServersList").style.display = "none";
};

document.getElementById("linkCustomServer").onclick = function () {
  var url = prompt(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.enterCustomServer"), "http://");

  if (url != null && url.trim() != "") {
    connectToServer(url);
  }
};

function connectToServer(url, port) {
  document.getElementById("menu").style.display = "none";
  document.getElementById("levelContainer").style.display = "none";
  document.getElementById("gameContainer").style.display = "none";
  document.getElementById("serverListContainer").style.display = "none";
  document.getElementById("roomsOnlineListContainer").style.display = "none";
  document.getElementById("roomsOnlineCreation").style.display = "none";
  document.getElementById("errorRoomCreation").style.display = "none";
  document.getElementById("settings").style.display = "none";
  document.getElementById("connectingToServer").style.display = "block";
  document.getElementById("roomsOnlineJoin").style.display = "none";
  document.getElementById("authenticationServer").style.display = "none";
  onlineClient.connect(url, port, function (success, data, id) {
    document.getElementById("connectingToServer").style.display = "none";

    if (!success) {
      if (data == _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.AUTHENTICATION_REQUIRED || data == _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.BANNED) {
        document.getElementById("authenticationServerContainer").innerHTML = "";
        var authent_frame = document.createElement("iframe");
        authent_frame.id = "authent_frame";
        authent_frame.src = onlineClient.getURL() + "/authentication?lang=" + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].language.substr(0, 2) + (id ? "&id=" + id : "");
        authent_frame.classList.add("frame-responsive");
        document.getElementById("authenticationServerContainer").appendChild(authent_frame);
        document.getElementById("linkAuthenticationServer").href = onlineClient.getURL() + "/authentication?lang=" + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].language.substr(0, 2) + (id ? "&id=" + id : "");
        displayAuthentication();
      } else if (data == _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.DISCONNECTED) {
        alert(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.disconnectedError"));
        displayServerList();
      } else {
        alert(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.connectionError"));
        displayServerList();
      }
    } else {
      displayRoomsList();
    }
  });
}

document.getElementById("cancelConnectingToServer").onclick = function () {
  document.getElementById("connectingToServer").style.display = "none";
  onlineClient.disconnect();
  displayServerList();
};

document.getElementById("cancelAuthenticationToServer").onclick = function () {
  document.getElementById("authenticationServerContainer").innerHTML = "";
  document.getElementById("connectingToServer").style.display = "none";
  onlineClient.disconnect();
  displayServerList();
};

function displayRooms() {
  document.getElementById("loadingRoomsOnlineList").style.display = "inline-block";
  document.getElementById("roomsOnlineListGroup").innerHTML = "";
  document.getElementById("refreshRooms").disabled = "disabled";
  document.getElementById("errorRoomJoin").style.display = "none";
  document.getElementById("errorServerVersion").style.display = "none";
  onlineClient.displayRooms(function (success, data) {
    // Request rooms data
    document.getElementById("roomsOnlineListGroup").innerHTML = "";
    document.getElementById("errorRoomsList").style.display = "none";
    document.getElementById("refreshRooms").disabled = "";

    if (!success) {
      if (data == _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.AUTHENTICATION_REQUIRED) {
        connectToServer(onlineClient.url, onlineClient.port);
      } else {
        document.getElementById("errorRoomsList").style.display = "block";
      }
    } else if (data.rooms != null && Object.keys(data.rooms).length > 0) {
      var _loop = function _loop(i) {
        var room = data.rooms[Object.keys(data.rooms)[i]];
        var code = room["code"];
        var linkRoom = document.createElement("a");
        linkRoom.classList.add("list-group-item");
        linkRoom.classList.add("list-group-item-action");
        linkRoom.textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.room", {
          number: i + 1
        }) + (room.state != null ? " " + (room.state == _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].GameState.SEARCHING_PLAYERS ? i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.searchingPlayers") : room.state == _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].GameState.STARTING ? i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.starting") : room.state == _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].GameState.STARTED ? i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.started") : "") : "");

        linkRoom.onclick = function () {
          joinRoom(code);
        };

        var gameInfos = document.createElement("div");
        gameInfos.classList.add("small");
        gameInfos.classList.add("text-muted");
        gameInfos.textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.infos", {
          width: room.width,
          height: room.height,
          speed: room.speed
        });
        var gameInfosSecond = document.createElement("div");
        gameInfosSecond.classList.add("small");
        gameInfosSecond.classList.add("text-muted");
        gameInfosSecond.textContent = room.borderWalls ? i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.infosBorderWalls") : "";
        var gameInfosThird = document.createElement("div");
        gameInfosThird.classList.add("small");
        gameInfosThird.classList.add("text-muted");
        gameInfosThird.textContent = room.generateWalls ? i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.infosGenerateWalls") : "";
        var gameInfosPlayers = document.createElement("div");
        gameInfosPlayers.classList.add("small");
        gameInfosPlayers.classList.add("text-muted");
        gameInfosPlayers.textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.infosPlayers", {
          count: room.players,
          max: room.maxPlayers
        });
        linkRoom.appendChild(gameInfos);
        linkRoom.appendChild(gameInfosSecond);
        linkRoom.appendChild(gameInfosThird);
        linkRoom.appendChild(gameInfosPlayers);

        if (room.spectators > 0) {
          var gameInfosSpectators = document.createElement("div");
          gameInfosSpectators.classList.add("small");
          gameInfosSpectators.classList.add("text-muted");
          gameInfosSpectators.textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.infosSpectators", {
            count: room.spectators
          });
          linkRoom.appendChild(gameInfosSpectators);
        }

        document.getElementById("roomsOnlineListGroup").appendChild(linkRoom);
      };

      for (var i = 0; i < Object.keys(data.rooms).length; i++) {
        _loop(i);
      }
    } else {
      var noRoomFound = document.createElement("strong");
      noRoomFound.textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.noRoomound");
      document.getElementById("roomsOnlineListGroup").appendChild(noRoomFound);
    }

    if (data && data.version) {
      onlineClient.engineServerVersion = data.version;
      onlineClient.serverVersion = data.serverVersion;

      if (data.version != _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION) {
        document.getElementById("errorServerVersion").style.display = "block";
        document.getElementById("errorServerVersionText").textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.errorServerVersion", {
          server_version: data.version,
          client_version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION
        });
      }
    }

    document.getElementById("loadingRoomsOnlineList").style.display = "none";
    document.getElementById("serverAddress").textContent = onlineClient.url + (onlineClient.port != null && onlineClient.port.trim() != "" ? ":" + onlineClient.port : "");
  });
}

document.getElementById("refreshRooms").onclick = function () {
  displayRooms();
};

function joinRoom(code) {
  document.getElementById("menu").style.display = "none";
  document.getElementById("levelContainer").style.display = "none";
  document.getElementById("gameContainer").style.display = "none";
  document.getElementById("serverListContainer").style.display = "none";
  document.getElementById("roomsOnlineListContainer").style.display = "none";
  document.getElementById("roomsOnlineCreation").style.display = "none";
  document.getElementById("errorRoomCreation").style.display = "none";
  document.getElementById("settings").style.display = "none";
  document.getElementById("connectingToServer").style.display = "none";
  document.getElementById("roomsOnlineJoin").style.display = "block";
  document.getElementById("authenticationServer").style.display = "none";
  document.getElementById("errorRoomJoin").style.display = "none";
  onlineClient.joinRoom(code, function (data) {
    document.getElementById("roomsOnlineJoin").style.display = "none";

    if (data.success) {
      var ui = new _src_ui_GameUI_js__WEBPACK_IMPORTED_MODULE_7__["default"](null, document.getElementById("gameContainer"), null, null, customSettings.showDebugInfo ? true : false, null, customSettings);
      var game = onlineClient.getGame(ui, customSettings);
      game.init();
      document.getElementById("gameContainer").style.display = "block";
      document.getElementById("titleGame").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.currentMode") + " " + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("menu.onlineBattleRoyale");
      document.getElementById("gameOrder").textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.roomCode") + " " + code;
      document.getElementById("gameStatus").textContent = "";
      document.getElementById("gameStatusError").textContent = "";

      if (ui.canvas != undefined) {
        ui.canvas.scrollIntoView();
      }

      game.onExit(function () {
        onlineClient.stopGame();
        displayRoomsList();
      });
      game.onKill(function () {
        onlineClient.stopGame();
        displayRoomsList();
      });

      document.getElementById("backToMenuGame").onclick = function () {
        if (confirm(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.confirmQuit"))) {
          onlineClient.stopGame();
          displayRoomsList();
        }
      };
    } else {
      var errorCode = data.errorCode;
      var errorCode_text = "";

      switch (errorCode) {
        case _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.ROOM_NOT_FOUND:
          errorCode_text = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.errorRoomJoinReason_roomNotFound");
          break;

        case _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.ROOM_ALREADY_JOINED:
          errorCode_text = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.errorRoomJoinReason_roomAlreadyJoined");
          break;

        case _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.ALREADY_CREATED_ROOM:
          errorCode_text = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.errorRoomCreationReason_alreadyCreatedRoom");
          break;

        default:
          errorCode_text = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.errorReason_unknown");
          break;
      }

      document.getElementById("errorRoomJoinReason").textContent = errorCode_text;
      document.getElementById("errorRoomJoin").style.display = "block";
      document.getElementById("roomsOnlineJoin").style.display = "none";
      document.getElementById("roomsOnlineListContainer").style.display = "block";
    }
  });
}

document.getElementById("joinPrivateRoom").onclick = function () {
  var code = prompt(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.enterCode"));

  if (code != null) {
    joinRoom(code);
  }
}; // Simple modes


function selectMode(mode) {
  selectedMode = mode;

  if (selectedMode == SOLO_PLAYER) {
    document.getElementById("iaSettings").style.display = "none";
  } else {
    document.getElementById("iaSettings").style.display = "block";
  }

  if (selectedMode == SOLO_AI) {
    document.getElementById("autoRetrySettings").style.display = "block";
  } else {
    document.getElementById("autoRetrySettings").style.display = "none";
  }

  if (selectedMode == BATTLE_ROYALE) {
    document.getElementById("numberIASettings").style.display = "block";
  } else {
    document.getElementById("numberIASettings").style.display = "none";
  }

  if (selectedMode == PLAYER_VS_AI || selectedMode == AI_VS_AI || selectedMode == BATTLE_ROYALE) {
    document.getElementById("sameGridDiv").style.display = "block";
  } else {
    document.getElementById("sameGridDiv").style.display = "none";
  }

  if (selectedMode == SOLO_AI || selectedMode == SOLO_PLAYER) {
    document.getElementById("mazeGridDiv").style.display = "block";
  } else {
    document.getElementById("mazeGridDiv").style.display = "none";
  }

  if (selectedMode == BATTLE_ROYALE_ONLINE) {
    document.getElementById("sameGridDiv").style.display = "none";
    document.getElementById("mazeGridDiv").style.display = "none";
    document.getElementById("autoRetrySettings").style.display = "none";
    document.getElementById("progressiveSpeedDiv").style.display = "none";
    document.getElementById("privateGameDiv").style.display = "block";
    document.getElementById("iaSettings").style.display = "none";
    document.getElementById("seedSettings").style.display = "none";

    if (onlineClient.serverSettings && onlineClient.serverSettings.enableAI) {
      document.getElementById("enableAIDiv").style.display = "block";
    } else {
      document.getElementById("enableAIDiv").style.display = "none";
    }
  } else {
    document.getElementById("progressiveSpeedDiv").style.display = "block";
    document.getElementById("seedSettings").style.display = "block";
    document.getElementById("privateGameDiv").style.display = "none";
    document.getElementById("enableAIDiv").style.display = "none";
  }

  displaySettings();
}

document.getElementById("soloAi").onclick = function () {
  selectMode(SOLO_AI);
};

document.getElementById("soloPlayer").onclick = function () {
  selectMode(SOLO_PLAYER);
};

document.getElementById("playerVsAi").onclick = function () {
  selectMode(PLAYER_VS_AI);
};

document.getElementById("aiVsAi").onclick = function () {
  selectMode(AI_VS_AI);
};

document.getElementById("battleRoyale").onclick = function () {
  selectMode(BATTLE_ROYALE);
};

document.getElementById("createRoom").onclick = function () {
  selectMode(BATTLE_ROYALE_ONLINE);
};

function displayMenu() {
  document.getElementById("settings").style.display = "none";
  document.getElementById("levelContainer").style.display = "none";
  document.getElementById("gameContainer").style.display = "none";
  document.getElementById("serverListContainer").style.display = "none";
  document.getElementById("roomsOnlineListContainer").style.display = "none";
  document.getElementById("roomsOnlineCreation").style.display = "none";
  document.getElementById("errorRoomCreation").style.display = "none";
  document.getElementById("menu").style.display = "block";
  document.getElementById("connectingToServer").style.display = "none";
  document.getElementById("roomsOnlineJoin").style.display = "none";
  document.getElementById("authenticationServer").style.display = "none";
  document.getElementById("parameters").style.display = "none";
}

function displaySettings() {
  displayMenu();
  document.getElementById("settings").style.display = "block";
  document.getElementById("menu").style.display = "none";
  resetForm(false, true);

  if (selectedMode == BATTLE_ROYALE_ONLINE) {
    document.getElementById("backToMenu").onclick = function () {
      displayRoomsList();
    };
  } else {
    document.getElementById("backToMenu").onclick = function () {
      displayMenu();
    };
  }
}

function displayOthersSettings() {
  displayMenu();
  document.getElementById("menu").style.display = "none";
  document.getElementById("parameters").style.display = "block";
}

document.getElementById("backToMenu").onclick = function () {
  displayMenu();
};

document.getElementById("backToMenuLevelList").onclick = function () {
  displayMenu();
};

document.getElementById("backToMenuParameters").onclick = function () {
  displayMenu();
};

document.getElementById("othersSettings").onclick = function () {
  displayOthersSettings();
};

document.getElementById("backToMenuServerList").onclick = function () {
  onlineClient.disconnect();
  displayMenu();
};

document.getElementById("collapseSeedSettingsBtn").onclick = function (e) {
  var collapse = document.getElementById("collapseSeedSettings");

  if (collapse && collapse.classList.contains("show")) {
    collapse.classList.remove("show");
  } else if (collapse) {
    collapse.classList.add("show");
  }

  e.preventDefault();
  e.stopPropagation();
};

document.getElementById("collapseLevelBonusShopLink").onclick = function (e) {
  var collapse = document.getElementById("collapseLevelBonusShop");

  if (collapse && collapse.classList.contains("show")) {
    collapse.classList.remove("show");
  } else if (collapse) {
    collapse.classList.add("show");
  }

  e.preventDefault();
  e.stopPropagation();
};

function displayServerList() {
  selectMode(BATTLE_ROYALE_ONLINE);
  displayMenu();
  document.getElementById("menu").style.display = "none";
  document.getElementById("serverListContainer").style.display = "block";
  loadServerList();
}

document.getElementById("onlineBattleRoyale").onclick = function () {
  displayServerList();
};

document.getElementById("backToServersRoomsList").onclick = function () {
  onlineClient.disconnect();
  displayServerList();
};

function displayRoomsList() {
  displayMenu();
  document.getElementById("menu").style.display = "none";
  document.getElementById("roomsOnlineListContainer").style.display = "block";
  displayRooms();
}

function displayAuthentication() {
  displayMenu();
  document.getElementById("menu").style.display = "none";
  document.getElementById("authenticationServer").style.display = "block";
}

function displayLevelList(player) {
  displayMenu();
  document.getElementById("menu").style.display = "none";
  document.getElementById("levelContainer").style.display = "block";
  document.getElementById("levelDownloading").innerHTML = "";
  document.getElementById("btnDeblockDiv").innerHTML = "";
  document.getElementById("bonusList").innerHTML = "";

  if (player == PLAYER_HUMAN) {
    document.getElementById("titleLevelList").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.titlePlayer");
    document.getElementById("levelListDefault").innerHTML = getListLevel(PLAYER_HUMAN, DEFAULT_LEVEL);
    document.getElementById("levelListDownloadAI").style.display = "none";
    document.getElementById("levelListDownloadPlayer").style.display = "block";
    document.getElementById("levelListDownloadPlayer").innerHTML = getListLevel(PLAYER_HUMAN, DOWNLOADED_LEVEL);
    document.getElementById("fruitNumberCount").innerHTML = getNumberFruits(PLAYER_HUMAN);
    document.getElementById("bonusList").appendChild(getListBonus(PLAYER_HUMAN));
  } else if (player == PLAYER_AI) {
    document.getElementById("titleLevelList").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.titleAI");
    document.getElementById("levelListDefault").innerHTML = getListLevel(PLAYER_AI, DEFAULT_LEVEL);
    document.getElementById("levelListDownloadAI").style.display = "block";
    document.getElementById("levelListDownloadPlayer").style.display = "none";
    document.getElementById("levelListDownloadAI").innerHTML = getListLevel(PLAYER_AI, DOWNLOADED_LEVEL);
    document.getElementById("fruitNumberCount").innerHTML = getNumberFruits(PLAYER_AI);
    document.getElementById("bonusList").appendChild(getListBonus(PLAYER_AI));
  }
}

document.getElementById("levelsSoloPlayer").onclick = function () {
  displayLevelList(PLAYER_HUMAN);
};

document.getElementById("levelsSoloAI").onclick = function () {
  displayLevelList(PLAYER_AI);
};

function checkSameGrid() {
  if (document.getElementById("sameGrid").checked && (selectedMode == PLAYER_VS_AI || selectedMode == AI_VS_AI || selectedMode == BATTLE_ROYALE)) {
    document.getElementById("progressiveSpeed").checked = false;
    document.getElementById("progressiveSpeed").disabled = true;
    document.getElementById("autoRetry").checked = false;
    document.getElementById("autoRetry").disabled = true;
  } else {
    document.getElementById("progressiveSpeed").disabled = false;
    document.getElementById("autoRetry").disabled = false;
  }
}

function checkGameSpeed() {
  if (document.getElementById("gameSpeed").value == "custom") {
    document.getElementById("customSpeedSettings").style.display = "block";
  } else {
    document.getElementById("customSpeedSettings").style.display = "none";
  }
}

document.getElementById("gameSpeed").onchange = function () {
  checkGameSpeed();
};

function checkPlayer() {
  if (selectedMode == SOLO_PLAYER || selectedMode == PLAYER_VS_AI || selectedMode == BATTLE_ROYALE && document.getElementById("battleAgainstAIs").checked) {
    document.getElementById("playerSettings").style.display = "block";
  } else {
    document.getElementById("playerSettings").style.display = "none";
  }
}

function checkMazeGrid() {
  if (document.getElementById("mazeGrid").checked && (selectedMode == SOLO_AI || selectedMode == SOLO_PLAYER)) {
    document.getElementById("borderWalls").checked = false;
    document.getElementById("borderWalls").disabled = true;
    document.getElementById("generateWalls").checked = false;
    document.getElementById("generateWalls").disabled = true;
    document.getElementById("aiAssistant").checked = false;
    document.getElementById("aiAssistant").disabled = true;
  } else {
    document.getElementById("borderWalls").disabled = false;
    document.getElementById("generateWalls").disabled = false;
    document.getElementById("aiAssistant").disabled = false;
  }
}

function checkEnableAI() {
  if (selectedMode == BATTLE_ROYALE_ONLINE && document.getElementById("enableAI").checked && onlineClient.serverSettings && onlineClient.serverSettings.enableAI || selectedMode != BATTLE_ROYALE_ONLINE && selectedMode != SOLO_PLAYER) {
    document.getElementById("iaSettings").style.display = "block";
  } else {
    document.getElementById("iaSettings").style.display = "none";
  }
}

function gameCanFailToInit(heightGrid, widthGrid, borderWalls, generateWalls, numberPlayers) {
  heightGrid = parseInt(heightGrid);
  widthGrid = parseInt(widthGrid);
  var numberEmptyCases = heightGrid * widthGrid;

  if (borderWalls) {
    numberEmptyCases -= (widthGrid + heightGrid) * 2 - 4;
  }

  if (generateWalls) {
    if (borderWalls) {
      numberEmptyCases -= heightGrid * widthGrid * 0.1;
    } else {
      numberEmptyCases -= heightGrid * widthGrid * 0.1675;
    }
  }

  var neededCases = numberPlayers * 5;

  if (numberEmptyCases >= neededCases) {
    return false;
  } else {
    return true;
  }
}

function checkFailSettings() {
  document.getElementById("possibleFailInitGame").style.display = "none";

  if (validateSettings(true)) {
    var heightGrid = document.getElementById("heightGrid").value;
    var widthGrid = document.getElementById("widthGrid").value;
    var borderWalls = document.getElementById("borderWalls").checked;
    var generateWalls = document.getElementById("generateWalls").checked;
    var sameGrid = document.getElementById("sameGrid").checked;
    var numberIA = document.getElementById("numberIA").value;
    var battleAgainstAIs = document.getElementById("battleAgainstAIs").checked;
    var numberPlayers = 1;

    if (selectedMode == PLAYER_VS_AI || selectedMode == AI_VS_AI) {
      if (sameGrid) {
        numberPlayers = 2;
      }
    } else if (selectedMode == BATTLE_ROYALE) {
      if (sameGrid) {
        if (battleAgainstAIs) {
          numberPlayers = parseInt(numberIA) + 1;
        } else {
          numberPlayers = numberIA;
        }
      }
    }

    if (gameCanFailToInit(heightGrid, widthGrid, borderWalls, generateWalls, numberPlayers)) {
      document.getElementById("possibleFailInitGame").style.display = "block";
    }
  }
}

document.getElementById("heightGrid").onchange = function () {
  checkFailSettings();
};

document.getElementById("widthGrid").onchange = function () {
  checkFailSettings();
};

document.getElementById("borderWalls").onchange = function () {
  checkFailSettings();
};

document.getElementById("generateWalls").onchange = function () {
  checkFailSettings();
};

document.getElementById("sameGrid").onchange = function () {
  checkSameGrid();
  checkGameSpeed();
  checkFailSettings();
};

document.getElementById("numberIA").onchange = function () {
  checkFailSettings();
};

document.getElementById("battleAgainstAIs").onchange = function () {
  checkPlayer();
  checkFailSettings();
};

document.getElementById("mazeGrid").onchange = function () {
  checkMazeGrid();
};

document.getElementById("enableAI").onchange = function () {
  checkEnableAI();
};

document.getElementById("resetSeeds").onclick = function (e) {
  resetForm(false, true);
  e.preventDefault();
  e.stopPropagation();
};

function resetForm(resetValues, resetSeeds) {
  document.getElementById("invalidHeight").style.display = "none";
  document.getElementById("invalidWidth").style.display = "none";
  document.getElementById("heightGrid").classList.remove("is-invalid");
  document.getElementById("widthGrid").classList.remove("is-invalid");
  document.getElementById("gameSpeed").classList.remove("is-invalid");
  document.getElementById("invalidSpeed").style.display = "none";
  document.getElementById("customSpeed").classList.remove("is-invalid");
  document.getElementById("invalidCustomSpeed").style.display = "none";
  document.getElementById("aiLevel").classList.remove("is-invalid");
  document.getElementById("invalidaiLevel").style.display = "none";
  document.getElementById("numberIA").classList.remove("is-invalid");
  document.getElementById("invalidIANumber").style.display = "none";
  document.getElementById("seedGrid").classList.remove("is-invalid");
  document.getElementById("invalidSeedGrid").style.display = "none";
  document.getElementById("seedGame").classList.remove("is-invalid");
  document.getElementById("invalidSeedGame").style.display = "none";
  document.getElementById("resultLevels").innerHTML = "";
  document.getElementById("gameStatus").innerHTML = "";
  document.getElementById("gameOrder").innerHTML = "";
  document.getElementById("gameStatusError").innerHTML = "";

  if (resetSeeds) {
    document.getElementById("seedGrid").value = new seedrandom__WEBPACK_IMPORTED_MODULE_8___default.a(Date.now()).int32();
    document.getElementById("seedGame").value = new seedrandom__WEBPACK_IMPORTED_MODULE_8___default.a(Date.now() + 1).int32();
  }

  if (resetValues) {
    document.getElementById("heightGrid").value = 20;
    document.getElementById("widthGrid").value = 20;
    document.getElementById("borderWalls").checked = false;
    document.getElementById("generateWalls").checked = false;
    document.getElementById("mazeGrid").checked = false;
    document.getElementById("sameGrid").checked = true;
    document.getElementById("gameSpeed").value = 8;
    document.getElementById("progressiveSpeed").checked = false;
    document.getElementById("customSpeed").value = 8;
    document.getElementById("customSpeedSettings").style.display = "none";
    document.getElementById("aiLevel").value = "normal";
    document.getElementById("autoRetry").checked = false;
    document.getElementById("numberIA").value = 20;
    document.getElementById("battleAgainstAIs").checked = false;
    document.getElementById("aiAssistant").checked = false;
    document.getElementById("privateGame").checked = false;
    document.getElementById("enableAI").checked = false;
  }

  checkSameGrid();
  checkGameSpeed();
  checkPlayer();
  checkFailSettings();
  checkMazeGrid();
  checkEnableAI();
}

document.getElementById("resetSettings").onclick = function () {
  resetForm(true, true);
};

function validateSettings(returnValidation) {
  if (!returnValidation) {
    resetForm(false, false);
  }

  var heightGrid = document.getElementById("heightGrid").value;
  var widthGrid = document.getElementById("widthGrid").value;
  var borderWalls = document.getElementById("borderWalls").checked;
  var generateWalls = document.getElementById("generateWalls").checked;
  var mazeGrid = document.getElementById("mazeGrid").checked;
  var sameGrid = document.getElementById("sameGrid").checked;
  var speed = document.getElementById("gameSpeed").value;
  var progressiveSpeed = document.getElementById("progressiveSpeed").checked;
  var customSpeed = document.getElementById("customSpeed").value;
  var aiLevel = document.getElementById("aiLevel").value;
  var autoRetry = document.getElementById("autoRetry").checked;
  var numberIA = document.getElementById("numberIA").value;
  var battleAgainstAIs = document.getElementById("battleAgainstAIs").checked;
  var seedGrid = document.getElementById("seedGrid").value;
  var seedGame = document.getElementById("seedGame").value;
  var playerHumanType;
  var minGridSize = 5;
  var maxGridSize = 100;
  var minSpeed = 1;
  var maxSpeed = 100;
  var enableAI = true;

  if (selectedMode == BATTLE_ROYALE_ONLINE && onlineClient.serverSettings) {
    var serverSettings = onlineClient.serverSettings;
    minGridSize = serverSettings.minGridSize != undefined ? serverSettings.minGridSize : minGridSize;
    maxGridSize = serverSettings.maxGridSize != undefined ? serverSettings.maxGridSize : maxGridSize;
    minSpeed = serverSettings.minSpeed != undefined ? serverSettings.minSpeed : minSpeed;
    maxSpeed = serverSettings.maxSpeed != undefined ? serverSettings.maxSpeed : maxSpeed;
    enableAI = serverSettings.enableAI;
  }

  document.getElementById("invalidHeight").textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("settings.invalidSize", {
    min: minGridSize,
    max: maxGridSize
  });
  document.getElementById("invalidWidth").textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("settings.invalidSize", {
    min: minGridSize,
    max: maxGridSize
  });
  document.getElementById("invalidSpeed").textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("settings.invalidSpeed", {
    min: minSpeed,
    max: maxSpeed
  });
  document.getElementById("invalidCustomSpeed").textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("settings.invalidSpeed", {
    min: minSpeed,
    max: maxSpeed
  });

  if (document.getElementById("aiAssistant").checked) {
    playerHumanType = PLAYER_HYBRID_HUMAN_AI;
  } else {
    playerHumanType = PLAYER_HUMAN;
  }

  var formValidated = true;

  if (heightGrid.trim() == "" || isNaN(heightGrid) || heightGrid < minGridSize || heightGrid > maxGridSize) {
    formValidated = false;

    if (!returnValidation) {
      document.getElementById("heightGrid").classList.add("is-invalid");
      document.getElementById("invalidHeight").style.display = "block";
    }
  } else {
    heightGrid = parseInt(heightGrid);
  }

  if (widthGrid.trim() == "" || isNaN(widthGrid) || widthGrid < minGridSize || widthGrid > maxGridSize) {
    formValidated = false;

    if (!returnValidation) {
      document.getElementById("widthGrid").classList.add("is-invalid");
      document.getElementById("invalidWidth").style.display = "block";
    }
  } else {
    widthGrid = parseInt(widthGrid);
  }

  if (speed != "custom" && (speed.trim() == "" || isNaN(speed) || speed < minSpeed || speed > maxSpeed)) {
    formValidated = false;

    if (!returnValidation) {
      document.getElementById("gameSpeed").classList.add("is-invalid");
      document.getElementById("invalidSpeed").style.display = "block";
    }
  } else if (speed != "custom") {
    speed = parseInt(speed);
  }

  if (speed == "custom" && (customSpeed.trim() == "" || isNaN(customSpeed) || customSpeed < minSpeed || customSpeed > maxSpeed)) {
    formValidated = false;

    if (!returnValidation) {
      document.getElementById("customSpeed").classList.add("is-invalid");
      document.getElementById("invalidCustomSpeed").style.display = "block";
    }
  } else if (speed == "custom") {
    speed = parseInt(customSpeed);
  }

  if (selectedMode != SOLO_PLAYER && selectedMode != BATTLE_ROYALE_ONLINE && aiLevel != "low" && aiLevel != "normal" && aiLevel != "high" && aiLevel != "random") {
    formValidated = false;

    if (!returnValidation) {
      document.getElementById("aiLevel").classList.add("is-invalid");
      document.getElementById("invalidaiLevel").style.display = "block";
    }
  } else if (selectedMode != SOLO_PLAYER && selectedMode != BATTLE_ROYALE_ONLINE || selectedMode == BATTLE_ROYALE_ONLINE && document.getElementById("enableAI").checked) {
    switch (aiLevel) {
      case "random":
        aiLevel = AI_LEVEL_RANDOM;
        break;

      case "low":
        aiLevel = AI_LEVEL_LOW;
        break;

      case "normal":
        aiLevel = AI_LEVEL_DEFAULT;
        break;

      case "high":
        aiLevel = AI_LEVEL_HIGH;
        break;

      case "ultra":
        aiLevel = AI_LEVEL_ULTRA;
        break;

      default:
        aiLevel = AI_LEVEL_DEFAULT;
        break;
    }
  }

  if (selectedMode == BATTLE_ROYALE && (numberIA.trim() == "" || isNaN(numberIA) || numberIA < 2 || numberIA > 100)) {
    formValidated = false;

    if (!returnValidation) {
      document.getElementById("numberIA").classList.add("is-invalid");
      document.getElementById("invalidIANumber").style.display = "block";
    }
  } else if (selectedMode == BATTLE_ROYALE) {
    numberIA = parseInt(numberIA);
  }

  if (selectedMode != BATTLE_ROYALE_ONLINE && (seedGrid.trim() == "" || isNaN(seedGrid))) {
    formValidated = false;

    if (!returnValidation) {
      document.getElementById("seedGrid").classList.add("is-invalid");
      document.getElementById("invalidSeedGrid").style.display = "block";
    }
  }

  if (selectedMode != BATTLE_ROYALE_ONLINE && (seedGame.trim() == "" || isNaN(seedGame))) {
    formValidated = false;

    if (!returnValidation) {
      document.getElementById("seedGame").classList.add("is-invalid");
      document.getElementById("invalidSeedGame").style.display = "block";
    }
  }

  if (selectedMode != SOLO_AI) {
    autoRetry = false;
  }

  if (returnValidation) {
    return formValidated;
  }

  if (formValidated) {
    document.getElementById("roomsOnlineCreation").style.display = "block";
    document.getElementById("settings").style.display = "none";
    document.getElementById("errorRoomCreation").style.display = "none";

    if (selectedMode == BATTLE_ROYALE_ONLINE) {
      onlineClient.createRoom({
        speed: speed,
        heightGrid: heightGrid,
        widthGrid: widthGrid,
        borderWalls: borderWalls,
        generateWalls: generateWalls,
        customSpeed: customSpeed,
        "private": document.getElementById("privateGame").checked,
        enableAI: enableAI ? document.getElementById("enableAI").checked : false,
        levelAI: aiLevel
      }, function (data) {
        var errorCode = data.errorCode;

        if (data.connection_error) {
          if (errorCode == _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.AUTHENTICATION_REQUIRED) {
            connectToServer(onlineClient.url, onlineClient.port);
          } else if (data == _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.DISCONNECTED) {
            alert(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.disconnectedError"));
            displayServerList();
          } else {
            alert(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.connectionError"));
            displayServerList();
          }
        } else {
          if (data.success) {
            joinRoom(data.code);
          } else {
            if (errorCode == _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.AUTHENTICATION_REQUIRED) {
              connectToServer(onlineClient.url, onlineClient.port);
            } else {
              var errorCode_text = "";

              switch (errorCode) {
                case _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.INVALID_SETTINGS:
                  errorCode_text = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.errorRoomCreationReason_invalidSettings");
                  break;

                case _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.MAX_ROOM_LIMIT_REACHED:
                  errorCode_text = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.errorRoomCreationReason_maxRoomLimitReached");
                  break;

                case _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Error.ALREADY_CREATED_ROOM:
                  errorCode_text = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.errorRoomCreationReason_alreadyCreatedRoom");
                  break;

                default:
                  errorCode_text = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("servers.errorReason_unknown");
                  break;
              }

              document.getElementById("errorRoomCreation").style.display = "block";
              document.getElementById("errorRoomCreationReason").textContent = errorCode_text;
              displayRoomsList();
            }
          }
        }
      });
    } else {
      document.getElementById("settings").style.display = "none";
      document.getElementById("menu").style.display = "none";
      document.getElementById("levelContainer").style.display = "none";
      document.getElementById("serverListContainer").style.display = "none";
      document.getElementById("roomsOnlineListContainer").style.display = "none";
      document.getElementById("roomsOnlineCreation").style.display = "none";
      document.getElementById("errorRoomCreation").style.display = "none";
      document.getElementById("gameContainer").style.display = "block";
      document.getElementById("connectingToServer").style.display = "none";
      document.getElementById("roomsOnlineJoin").style.display = "none";
      document.getElementById("authenticationServer").style.display = "none";
      var titleGame = "";

      switch (selectedMode) {
        case SOLO_AI:
          titleGame = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("menu.soloAi");
          break;

        case SOLO_PLAYER:
          titleGame = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("menu.soloPlayer");
          break;

        case PLAYER_VS_AI:
          titleGame = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("menu.playerVsAi");
          break;

        case AI_VS_AI:
          titleGame = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("menu.aiVsAi");
          break;

        case BATTLE_ROYALE:
          titleGame = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("menu.battleRoyale");
          break;
      }

      document.getElementById("titleGame").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.currentMode") + " " + titleGame;
      var games = [];

      if (selectedMode == SOLO_AI) {
        var grid = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, mazeGrid, null, false, seedGrid, seedGame);
        var snake = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, grid, PLAYER_AI, aiLevel, autoRetry);
        games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](grid, snake, speed, document.getElementById("gameContainer"), true, true, progressiveSpeed, null, null, null, null, customSettings));
      } else if (selectedMode == SOLO_PLAYER) {
        var _grid = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, mazeGrid, null, false, seedGrid, seedGame);

        var _snake = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid, playerHumanType);

        games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](_grid, _snake, speed, document.getElementById("gameContainer"), true, true, progressiveSpeed, null, null, null, null, customSettings));
      } else if (selectedMode == PLAYER_VS_AI) {
        var _grid2 = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, false, null, false, seedGrid, seedGame);

        var _snake2 = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid2, playerHumanType);

        if (sameGrid) {
          var snake2 = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid2, PLAYER_AI, aiLevel, autoRetry);
          games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](_grid2, [_snake2, snake2], speed, document.getElementById("gameContainer"), true, true, progressiveSpeed, null, null, null, null, customSettings));
        } else {
          var grid2 = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, false, null, false, parseInt(seedGrid) + 1, parseInt(seedGame) + 1);

          var _snake3 = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, grid2, PLAYER_AI, aiLevel, autoRetry);

          games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](_grid2, _snake2, speed, document.getElementById("gameContainer"), true, true, progressiveSpeed, null, null, null, null, customSettings));
          games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](grid2, _snake3, speed, document.getElementById("gameContainer"), false, false, progressiveSpeed, null, null, null, null, customSettings));
        }
      } else if (selectedMode == AI_VS_AI) {
        var _grid3 = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, false, null, false, seedGrid, seedGame);

        var _snake4 = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid3, PLAYER_AI, aiLevel, autoRetry);

        if (sameGrid) {
          var _snake5 = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid3, PLAYER_AI, aiLevel, autoRetry);

          games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](_grid3, [_snake4, _snake5], speed, document.getElementById("gameContainer"), true, true, progressiveSpeed, null, null, null, null, customSettings));
        } else {
          var _grid4 = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, false, null, false, parseInt(seedGrid) + 1, parseInt(seedGame) + 1);

          var _snake6 = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid4, PLAYER_AI, aiLevel, autoRetry);

          games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](_grid3, _snake4, speed, document.getElementById("gameContainer"), true, true, progressiveSpeed, null, null, null, null, customSettings));
          games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](_grid4, _snake6, speed, document.getElementById("gameContainer"), true, true, progressiveSpeed, null, null, null, null, customSettings));
        }
      } else if (selectedMode == BATTLE_ROYALE) {
        if (sameGrid) {
          var _grid5 = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, false, null, false, seedGrid, seedGame);

          var snakes = [];

          if (battleAgainstAIs) {
            snakes.push(new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid5, playerHumanType, aiLevel, autoRetry));
          }

          for (var i = 0; i < numberIA; i++) {
            snakes.push(new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid5, PLAYER_AI, aiLevel, autoRetry));
          }

          games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](_grid5, snakes, speed, document.getElementById("gameContainer"), true, true, progressiveSpeed, null, null, null, null, customSettings));
        } else {
          if (battleAgainstAIs) {
            var _grid6 = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, false, null, false, seedGrid, seedGame);

            var _snake7 = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid6, playerHumanType, aiLevel, autoRetry);

            games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](_grid6, _snake7, speed, document.getElementById("gameContainer"), true, false, progressiveSpeed, 350, 250, null, null, customSettings));
          }

          for (var _i = 0; _i < numberIA; _i++) {
            seedGrid++;
            seedGame++;

            var _grid7 = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, false, null, false, seedGrid, seedGame);

            var _snake8 = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid7, PLAYER_AI, aiLevel, autoRetry);

            games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](_grid7, _snake8, speed, document.getElementById("gameContainer"), true, false, progressiveSpeed, 350, 250, null, null, customSettings));
          }
        }
      }

      var group = new _src_engine_GameGroup__WEBPACK_IMPORTED_MODULE_5__["default"](games);
      group.setDisplayFPS(customSettings.showDebugInfo ? true : false);
      group.start();

      if (group.games[0].canvas != undefined) {
        group.games[0].canvas.scrollIntoView();
      }

      if (mazeGrid && (selectedMode == SOLO_AI || selectedMode == SOLO_PLAYER)) {
        group.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.mazeMode"), null, _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.INFO_NOTIF_COLOR, 5, null, null, null, true));
      }

      document.getElementById("backToMenuGame").onclick = function () {
        if (confirm(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.confirmQuit"))) {
          group.killAll();
          displayMenu();
        }
      };

      group.onStop(function () {
        if (selectedMode == PLAYER_VS_AI || selectedMode == AI_VS_AI || selectedMode == BATTLE_ROYALE && !group.errorOccurred()) {
          var resultMessage = "";
          var winners = group.getWinners();

          if (selectedMode == PLAYER_VS_AI) {
            if (winners.index.length == 2) {
              resultMessage = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.equalityPlayerVSAI");
            } else if (winners.index[0] == 0) {
              resultMessage = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.winPlayerVSAI");
            } else if (winners.index[0] == 1) {
              resultMessage = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.losePlayerVSAI");
            }
          } else if (selectedMode == AI_VS_AI) {
            if (winners.index.length == 1) {
              resultMessage = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.oneWinnerAIVSAI", {
                numWinner: winners.index[0] + 1
              });
            } else if (winners.index.length == 2) {
              resultMessage = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.equalityAIVSAI");
            }
          } else if (selectedMode == BATTLE_ROYALE) {
            if (winners.index.length == 1) {
              if (battleAgainstAIs && winners.index[0] == 0) {
                resultMessage = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.playerWinnerBattleRoyale", {
                  score: winners.score
                });
              } else {
                resultMessage = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.oneWinnerBattleRoyale", {
                  numWinner: battleAgainstAIs ? winners.index[0] : winners.index[0] + 1,
                  score: winners.score
                });
              }
            } else if (battleAgainstAIs && winners.index.length == 2 && winners.index[0] == 0) {
              resultMessage = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.winnerAIBattleRoyale") + " " + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.winnersNumBattleRoyale", {
                numWinner: winners.index[1]
              }) + " " + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.andPlayerWinnersBattleRoyale") + " " + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.winPlayerScoreBattleRoyale", {
                score: winners.score
              });
            } else if (winners.index.length > 1) {
              var playerWinnerBattleRoyale = false;
              resultMessage = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.winnersBattleRoyale") + " ";

              for (var _i2 = 0; _i2 < winners.index.length; _i2++) {
                if (battleAgainstAIs && winners.index[_i2] == 0) {
                  playerWinnerBattleRoyale = true;
                } else {
                  resultMessage = resultMessage + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.winnersNumBattleRoyale", {
                    numWinner: battleAgainstAIs ? winners.index[_i2] : winners.index[_i2] + 1
                  });

                  if (_i2 + 1 < winners.index.length - 1) {
                    resultMessage = resultMessage + ", ";
                  } else if (_i2 + 1 == winners.index.length - 1) {
                    resultMessage = resultMessage + " " + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.andWinnersBattleRoyale") + " ";
                  }
                }
              }

              if (battleAgainstAIs && playerWinnerBattleRoyale) {
                resultMessage = resultMessage + " " + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.andPlayerWinnersBattleRoyale") + " " + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.winPlayerScoreBattleRoyale", {
                  score: winners.score
                });
              } else {
                resultMessage = resultMessage + " " + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.winScoreBattleRoyale", {
                  score: winners.score
                });
              }
            }
          }

          if (resultMessage.trim() != "") {
            document.getElementById("gameOrder").innerHTML = resultMessage;
            group.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](resultMessage, null, _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.INFO_NOTIF_COLOR, 15, null, null, null, true));
          }
        }
      });
      group.onExit(function () {
        if (selectedMode == SOLO_AI || selectedMode == SOLO_PLAYER || selectedMode == AI_VS_AI || selectedMode == PLAYER_VS_AI && sameGrid || selectedMode == BATTLE_ROYALE && sameGrid) {
          group.killAll();
          displayMenu();
        }
      });
      group.onReset(function () {
        document.getElementById("resultLevels").innerHTML = "";
        document.getElementById("gameStatus").innerHTML = "";
        document.getElementById("gameOrder").innerHTML = "";
        document.getElementById("gameStatusError").innerHTML = "";
        group.closeNotification();
      });
    }
  }
}

document.getElementById("validateSettings").onclick = function () {
  validateSettings();
}; // Levels


var levelsBonusData = {
  "BONUS_AI_ASSISTANT": {
    "text": "levels.bonus.aiAssistant",
    "information": "levels.bonus.aiAssistantInfo",
    "price": 25,
    "applicableTo": [_src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HUMAN]
  },
  "BONUS_INCREASE_GOLD_FRUIT_PROB": {
    "text": "levels.bonus.increaseGoldFruits",
    "information": "levels.bonus.increaseGoldFruitsInfo",
    "price": 50,
    "applicableTo": [_src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.AI, _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HUMAN]
  },
  "BONUS_NO_TIME_LIMIT": {
    "text": "levels.bonus.noTimeLimit",
    "information": "levels.bonus.noTimeLimitInfo",
    "price": 75,
    "applicableTo": [_src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.AI, _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HUMAN]
  },
  "BONUS_DESTROY_AIS": {
    "text": "levels.bonus.destroyAis",
    "information": "levels.bonus.destroyAisInfo",
    "price": 75,
    "applicableTo": [_src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.AI, _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HUMAN]
  },
  "BONUS_PASS_LEVEL": {
    "text": "levels.bonus.passLevel",
    "information": "levels.bonus.passLevelInfo",
    "price": 100,
    "applicableTo": [_src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.AI, _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HUMAN]
  },
  "BONUS_UNLOCK_ALL_LEVELS": {
    "text": "levels.bonus.unlockAllLevels",
    "information": "levels.bonus.unlockAllLevelsInfo",
    "price": 1000,
    "applicableTo": [_src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.AI, _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HUMAN]
  }
};

function getTitleSave(player, type) {
  if (type == DEFAULT_LEVEL) {
    if (player == PLAYER_HUMAN) {
      return SOLO_PLAYER_SAVE + "defautLevelsSave";
    } else if (player == PLAYER_AI) {
      return SOLO_AI_SAVE + "defautLevelsSave";
    }
  } else if (type == DOWNLOADED_LEVEL) {
    if (player == PLAYER_HUMAN) {
      return SOLO_PLAYER_SAVE + "downloadedLevelsSave";
    } else if (player == PLAYER_AI) {
      return SOLO_AI_SAVE + "downloadedLevelsSave";
    }
  }

  return null;
}

function getSave(player, type) {
  if (storageGlobal.getItem(getTitleSave(player, type)) == null) {
    initSaveLevel(player, type, false);
  }

  try {
    var res = JSON.parse(storageGlobal.getItem(getTitleSave(player, type)));
    return res;
  } catch (e) {
    initSaveLevel(player, type, true);
    return getSave(player, type);
  }
}

function getLevelSave(level, player, type) {
  return getSave(player, type)[level];
}

function setLevelSave(value, level, player, type, score) {
  var save = getTitleSave(player, type);
  var item = getSave(player, type);
  var levels = getLevels(player, type);

  if (item != null) {
    if (Array.isArray(value) && value.length >= 2 && Array.isArray(item[level]) && item[level].length >= 2 && item[level][0] == true) {
      if (levels[level]["type"] != LEVEL_REACH_SCORE_ON_TIME && levels[level]["type"] != LEVEL_MULTI_REACH_SCORE_FIRST && levels[level]["type"] != LEVEL_MAZE_WIN) {
        if (value[1] < item[level][1]) {
          value[1] = item[level][1];
        }
      } else {
        if (value[1] > item[level][1]) {
          value[1] = item[level][1];
        }
      }
    }

    item[level] = value;
    storageGlobal.setItem(save, JSON.stringify(item));
    return true;
  }

  return false;
}

function setAddFruitLevelSave(player, score) {
  var save = getTitleSave(player, DEFAULT_LEVEL);
  var item = getSave(player, DEFAULT_LEVEL);

  if (item != null) {
    if (!item["numFruits"] || isNaN(item["numFruits"])) {
      item["numFruits"] = 0;
    }

    item["numFruits"] += score;
    storageGlobal.setItem(save, JSON.stringify(item));
    return true;
  }

  return false;
}

function initSaveLevel(player, type, force) {
  if (typeof Storage !== "undefined") {
    var save = getTitleSave(player, type);
    var item = storageGlobal.getItem(save);

    if (item == null || force) {
      storageGlobal.setItem(save, JSON.stringify({
        version: _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION,
        numFruits: 0,
        currentBonus: null,
        unlockAllLevels: false
      }));
      setLevelSave([false, 0], 1, player, type);
    }

    return false;
  } else {
    return false;
  }
}

function getLevels(player, type) {
  if (type == DEFAULT_LEVEL) {
    if (player == PLAYER_HUMAN) {
      return DEFAULT_LEVELS_SOLO_PLAYER;
    } else if (player == PLAYER_AI) {
      return DEFAULT_LEVELS_SOLO_AI;
    }
  } else if (type == DOWNLOADED_LEVEL) {
    if (player == PLAYER_HUMAN) {
      try {
        return JSON.parse(storageGlobal.getItem(SOLO_PLAYER_DOWNLOAD_LEVELS_TO));
      } catch (e) {
        return null;
      }
    } else if (player == PLAYER_AI) {
      try {
        return JSON.parse(storageGlobal.getItem(SOLO_AI_DOWNLOAD_LEVELS_TO));
      } catch (e) {
        return null;
      }
    }
  }

  return null;
}

function canPlay(level, player, type) {
  if (customSettings.unlockAllLevels) return true;
  if (getSave(player, DEFAULT_LEVEL).unlockAllLevels) return true;
  var res = true;
  var levels = getLevels(player, type);

  if (levels == null) {
    return false;
  }

  for (var i = 1; i < level; i++) {
    var save = getLevelSave(i, player, type);

    if (save == null || !save[0] && levelCompatible(levels[i]["type"], levels[i]["version"])) {
      res = false;
    }
  }

  return res;
}

function levelCompatible(levelType, version) {
  if (levelType != LEVEL_REACH_SCORE && levelType != LEVEL_REACH_MAX_SCORE && levelType != LEVEL_MULTI_BEST_SCORE && levelType != LEVEL_REACH_SCORE_ON_TIME && levelType != LEVEL_MULTI_REACH_SCORE_FIRST && levelType != LEVEL_MAZE_WIN || _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION.strcmp(version) < 0) {
    return false;
  }

  return true;
}

function printResultLevel(level, player, levelType, type, shortVersion) {
  var val = "";
  var resultLevel = getLevelSave(level, player, type);

  if (resultLevel == null) {
    return "";
  }

  resultLevel = resultLevel[1];

  if (resultLevel <= 0) {
    return "";
  }

  if (shortVersion) {
    if (levelType == LEVEL_REACH_SCORE || levelType == LEVEL_REACH_MAX_SCORE || levelType == LEVEL_MULTI_BEST_SCORE) {
      val = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bestScoreShort", {
        count: resultLevel
      });
    } else if (levelType == LEVEL_REACH_SCORE_ON_TIME || levelType == LEVEL_MULTI_REACH_SCORE_FIRST || levelType == LEVEL_MAZE_WIN) {
      val = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bestTimeShort", {
        count: Math.round(resultLevel)
      });
    }
  } else {
    if (levelType == LEVEL_REACH_SCORE || levelType == LEVEL_REACH_MAX_SCORE || levelType == LEVEL_MULTI_BEST_SCORE) {
      val = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bestScore", {
        count: resultLevel
      });
    } else if (levelType == LEVEL_REACH_SCORE_ON_TIME || levelType == LEVEL_MULTI_REACH_SCORE_FIRST || levelType == LEVEL_MAZE_WIN) {
      val = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bestTime", {
        count: Math.round(resultLevel)
      });
    }
  }

  return val;
}

window.playLevel = function (level, player, type) {
  var levelSave = getLevelSave(level, player, type);
  var bonus = getSave(player, DEFAULT_LEVEL)["currentBonus"];
  var levels = getLevels(player, type);

  if (levels == null) {
    return false;
  }

  if (levels[level] != null) {
    var initGoal = function initGoal() {
      var lastScorePlayer = 0;

      if (levelType == LEVEL_REACH_SCORE) {
        playerGame.onScoreIncreased(function () {
          setAddFruitLevelSave(player, playerGame.snakes[0].score - lastScorePlayer);
          lastScorePlayer = playerGame.snakes[0].score;

          if (playerGame.snakes[0].score >= levelTypeValue) {
            setLevelSave([true, playerGame.snakes[0].score], level, player, type);
            playerGame.setBestScore(printResultLevel(level, player, levelType, type, true));

            if (!notificationEndDisplayed) {
              playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalAchieved")));
              notificationEndDisplayed = true;
            }
          }
        });
        playerGame.onStop(function () {
          lastScorePlayer = 0;

          if (playerGame.snakes[0].score < levelTypeValue) {
            if (!notificationEndDisplayed) {
              playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalNotAchieved"), null, notifErrorColor, null, null, null, null, true));
              notificationEndDisplayed = true;
            }
          }
        });
        playerGame.onReset(function () {
          lastScorePlayer = 0;
        });
      } else if (levelType == LEVEL_REACH_SCORE_ON_TIME) {
        if (levelTypeValue[1] >= 0) {
          levelTimer = new _src_Timers__WEBPACK_IMPORTED_MODULE_10__["Timer"](function () {
            playerGame.setTimeToDisplay(0);
            document.getElementById("gameStatus").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.timerRemaining", {
              count: 0
            });

            if (!notificationEndDisplayed) {
              playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalNotAchieved"), null, notifErrorColor, null, null, null, null, true));
              notificationEndDisplayed = true;
            }

            group.stopAll(true);
          }, levelTypeValue[1] * 1000 - 1, new _src_Timers__WEBPACK_IMPORTED_MODULE_10__["TimerInterval"](function () {
            document.getElementById("gameStatus").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.timerRemaining", {
              count: Math.round(levelTimer.getTime() / 1000)
            });
            playerGame.setTimeToDisplay(Math.round(levelTimer.getTime() / 1000));
          }));
        }

        playerGame.onStart(function () {
          levelTimer.resume();
        });
        playerGame.onPause(function () {
          levelTimer.pause();
        });
        playerGame.onReset(function () {
          levelTimer.reset();
        });
        playerGame.onStop(function () {
          levelTimer.pause();
        });
        playerGame.onScoreIncreased(function () {
          if (playerGame.snakes[0].score >= levelTypeValue[0]) {
            var stop = levelTypeValue[1] * 1000 - levelTimer.getTime();
            levelTimer.reset();
            group.stopAll(true);
            setLevelSave([true, stop / 1000], level, player, type);
            setAddFruitLevelSave(player, playerGame.snakes[0].score);
            playerGame.setBestScore(printResultLevel(level, player, levelType, type, true));

            if (!notificationEndDisplayed) {
              playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalAchieved"), null, null, null, null, null, null, true));
              notificationEndDisplayed = true;
            }
          }
        });
      } else if (levelType == LEVEL_REACH_MAX_SCORE) {
        playerGame.onStop(function () {
          if (playerGame.scoreMax) {
            setLevelSave([true, playerGame.snakes[0].score], level, player, type);
            setAddFruitLevelSave(player, playerGame.snakes[0].score);
            playerGame.setBestScore(printResultLevel(level, player, levelType, type, true));

            if (!notificationEndDisplayed) {
              playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalAchieved"), null, null, null, null, null, null, true));
              notificationEndDisplayed = true;
            }
          } else {
            if (!notificationEndDisplayed) {
              playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalNotAchieved"), null, notifErrorColor, null, null, null, null, true));
              notificationEndDisplayed = true;
            }
          }
        });
      } else if (levelType == LEVEL_MULTI_BEST_SCORE) {
        group.onStop(function () {
          var winners = group.getWinners();
          var won = false;

          for (var _i4 = 0; _i4 < winners.winners.length; _i4++) {
            if (winners.winners[_i4] == playerGame.snakes[0]) {
              won = true;
              setLevelSave([true, playerGame.snakes[0].score], level, player, type);
              setAddFruitLevelSave(player, playerGame.snakes[0].score);
              playerGame.setBestScore(printResultLevel(level, player, levelType, type, true));

              if (!notificationEndDisplayed) {
                playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalAchieved"), null, null, null, null, null, null, true));
                notificationEndDisplayed = true;
              }
            }
          }

          if (!won && !notificationEndDisplayed) {
            playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalNotAchieved"), null, notifErrorColor, null, null, null, null, true));
            notificationEndDisplayed = true;
          }
        });
      } else if (levelType == LEVEL_MULTI_REACH_SCORE_FIRST) {
        var time = 0;
        var timerInterval = new _src_Timers__WEBPACK_IMPORTED_MODULE_10__["TimerInterval"](function () {
          time++;
        });
        playerGame.onStart(function () {
          timerInterval.start();
        });
        playerGame.onPause(function () {
          timerInterval.stop();
        });
        playerGame.onReset(function () {
          time = 0;
          timerInterval.stop();
        });
        playerGame.onStop(function () {
          timerInterval.stop();
        });
        group.onScoreIncreased(function () {
          for (var _i5 = 0; _i5 < group.games.length; _i5++) {
            for (var j = 0; j < group.games[_i5].snakes.length; j++) {
              if (group.games[_i5].snakes[j].score >= levelTypeValue) {
                if (group.games[_i5].snakes[j] == playerGame.snakes[0]) {
                  group.stopAll(true);
                  setLevelSave([true, time], level, player, type);
                  setAddFruitLevelSave(player, playerGame.snakes[0].score);
                  playerGame.setBestScore(printResultLevel(level, player, levelType, type, true));

                  if (!notificationEndDisplayed) {
                    playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalAchieved"), null, null, null, null, null, null, true));
                    notificationEndDisplayed = true;
                  }
                } else {
                  group.stopAll(true);

                  if (!notificationEndDisplayed) {
                    playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalNotAchieved"), null, notifErrorColor, null, null, null, null, true));
                    notificationEndDisplayed = true;
                  }
                }
              }
            }
          }
        });
      } else if (levelType == LEVEL_MAZE_WIN) {
        var _time = 0;

        var _timerInterval = new _src_Timers__WEBPACK_IMPORTED_MODULE_10__["TimerInterval"](function () {
          _time++;
        });

        playerGame.onStart(function () {
          _timerInterval.start();
        });
        playerGame.onPause(function () {
          _timerInterval.stop();
        });
        playerGame.onReset(function () {
          _time = 0;

          _timerInterval.stop();
        });
        playerGame.onStop(function () {
          _timerInterval.stop();
        });
        playerGame.onScoreIncreased(function () {
          if (playerGame.snakes[0].score >= 1) {
            setLevelSave([true, _time], level, player, type);
            setAddFruitLevelSave(player, Math.round(playerGame.grid.width * playerGame.grid.height / 50));
            playerGame.setBestScore(printResultLevel(level, player, levelType, type, true));

            if (!notificationEndDisplayed) {
              playerGame.setNotification(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.goalAchieved"), null, null, null, null, null, null, true));
              notificationEndDisplayed = true;
            }
          }
        });
      }
    };

    var displayInfosGoal = function displayInfosGoal() {
      playerGame.setBestScore(printResultLevel(level, player, levelType, type, true));

      if (levelType == LEVEL_REACH_SCORE) {
        textToDisplayGoal = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.reachScore", {
          value: levelTypeValue
        });
      } else if (levelType == LEVEL_REACH_SCORE_ON_TIME) {
        textToDisplayGoal = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.reachScoreTime", {
          value: levelTypeValue[0],
          count: levelTypeValue[1]
        });
        if (levelTypeValue[1] >= 0) document.getElementById("gameStatus").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.timerRemaining", {
          count: levelTypeValue[1]
        });
        playerGame.setTimeToDisplay(levelTypeValue[1]);
      } else if (levelType == LEVEL_REACH_MAX_SCORE) {
        textToDisplayGoal = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.reachMaxScore");
      } else if (levelType == LEVEL_MULTI_BEST_SCORE) {
        textToDisplayGoal = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.multiBestScore", {
          count: numberIA
        });
      } else if (levelType == LEVEL_MULTI_REACH_SCORE_FIRST) {
        textToDisplayGoal = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.multiReachScoreFirst", {
          value: levelTypeValue,
          count: numberIA
        });
      } else if (levelType == LEVEL_MAZE_WIN) {
        textToDisplayGoal = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.mazeMode", {
          value: levelTypeValue,
          count: numberIA
        });
      }

      document.getElementById("gameOrder").innerHTML = textToDisplayGoal.replace("\n", "<br />");
    };

    var levelSelected = levels[level];
    var levelSettings = levelSelected["settings"];
    var levelType = levelSelected["type"];
    var levelTypeValue = levelSelected["typeValue"];
    var levelVersion = levelSelected["version"];

    if (!levelCompatible(levelType, levelVersion)) {
      alert(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.notCompatible"));
      return false;
    }

    if (!canPlay(level, player, type)) {
      alert(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.disabledLevel"));
      return false;
    }

    if (bonus == "BONUS_PASS_LEVEL" && (!levelSave || levelSave[0] != true)) {
      setLevelSave([true, Array.isArray(levelTypeValue) && levelTypeValue.length >= 2 ? levelTypeValue[1] : levelTypeValue], level, player, type);
      buyBonus(null, player);
      displayLevelList(player);
      return true;
    }

    if (bonus == "BONUS_NO_TIME_LIMIT" && levelType == LEVEL_REACH_SCORE_ON_TIME) {
      levelTypeValue = [levelTypeValue[0], -1];
      buyBonus(null, player);
    }

    var heightGrid = levelSettings[0];
    var widthGrid = levelSettings[1];
    var borderWalls = levelSettings[2];
    var generateWalls = levelSettings[3];
    var sameGrid = levelSettings[4];
    var speed = levelSettings[5];
    var progressiveSpeed = levelSettings[6];
    var aiLevel = levelSettings[7];
    var numberIA = levelSettings[8];
    var generateMaze = levelSettings[9];
    var customGrid = levelSettings[10];
    var mazeForceAuto = levelSettings[11];
    var seedGrid = levelSettings[12];
    var seedGame = levelSettings[13];
    var destroyAis = false;
    var games = [];
    var grid = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, generateMaze, customGrid, mazeForceAuto, seedGrid, seedGame, !generateMaze && bonus == "BONUS_INCREASE_GOLD_FRUIT_PROB");
    var playerSnake;
    var playerGame;

    if (!generateMaze && bonus == "BONUS_INCREASE_GOLD_FRUIT_PROB") {
      buyBonus(null, player);
    }

    if (player == PLAYER_AI) {
      playerSnake = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, grid, player, AI_LEVEL_HIGH);
    } else if (player == PLAYER_HUMAN) {
      if (bonus == "BONUS_AI_ASSISTANT" && !generateMaze) {
        playerSnake = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, grid, _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HYBRID_HUMAN_AI);
        buyBonus(null, player);
      } else {
        playerSnake = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, grid, player);
      }
    }

    if (sameGrid) {
      var snakes = [playerSnake];

      for (var i = 0; i < numberIA; i++) {
        snakes.push(new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, grid, PLAYER_AI, aiLevel));
        destroyAis = bonus == "BONUS_DESTROY_AIS";
      }

      playerGame = new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](grid, snakes, speed, document.getElementById("gameContainer"), true, true, progressiveSpeed, null, null, null, null, customSettings);
      games.push(playerGame);
    } else {
      var width, height;

      if (numberIA + 1 <= 2) {
        width = null;
        height = null;
      } else {
        width = 350;
        height = 250;
      }

      playerGame = new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](grid, playerSnake, speed, document.getElementById("gameContainer"), true, true, progressiveSpeed, width, height, null, null, customSettings);
      games.push(playerGame);

      for (var _i3 = 0; _i3 < numberIA; _i3++) {
        var _grid8 = new _src_engine_Grid__WEBPACK_IMPORTED_MODULE_4__["default"](widthGrid, heightGrid, generateWalls, borderWalls, generateMaze, customGrid, mazeForceAuto, seedGrid, seedGame);

        var snake = new _src_engine_Snake__WEBPACK_IMPORTED_MODULE_3__["default"](RIGHT, 3, _grid8, PLAYER_AI, aiLevel, false);
        destroyAis = bonus == "BONUS_DESTROY_AIS";
        games.push(new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["Game"](_grid8, snake, speed, document.getElementById("gameContainer"), false, false, progressiveSpeed, width, height, null, null, customSettings));
      }
    }

    document.getElementById("settings").style.display = "none";
    document.getElementById("menu").style.display = "none";
    document.getElementById("levelContainer").style.display = "none";
    document.getElementById("serverListContainer").style.display = "none";
    document.getElementById("roomsOnlineListContainer").style.display = "none";
    document.getElementById("roomsOnlineCreation").style.display = "none";
    document.getElementById("errorRoomCreation").style.display = "none";
    document.getElementById("gameContainer").style.display = "block";
    document.getElementById("connectingToServer").style.display = "none";
    document.getElementById("roomsOnlineJoin").style.display = "none";
    document.getElementById("authenticationServer").style.display = "none";
    document.getElementById("resultLevels").innerHTML = "";
    document.getElementById("gameStatus").innerHTML = "";
    document.getElementById("gameOrder").innerHTML = "";
    document.getElementById("gameStatusError").innerHTML = "";
    document.getElementById("titleGame").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.level") + " " + level;
    var group = new _src_engine_GameGroup__WEBPACK_IMPORTED_MODULE_5__["default"](games);
    group.setDisplayFPS(customSettings.showDebugInfo ? true : false);
    group.start();
    group.closeRanking();
    document.getElementById("gameOrder").scrollIntoView();
    var levelTimer = new _src_Timers__WEBPACK_IMPORTED_MODULE_10__["Timer"](null, 0);
    var notificationEndDisplayed = false;
    var notificationStartDisplayed = false;
    var notifErrorColor = _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.ERROR_NOTIF_COLOR;
    var notifInfosColor = _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.INFO_NOTIF_COLOR;
    var notifInfo;
    var textToDisplayGoal;

    document.getElementById("backToMenuGame").onclick = function () {
      if (confirm(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("game.confirmQuit"))) {
        levelTimer.pause();
        group.killAll();
        displayLevelList(player);
      }
    };

    initGoal();
    displayInfosGoal();
    group.onExit(function () {
      levelTimer.pause();
      group.killAll();
      displayLevelList(player);
    });
    group.onReset(function () {
      document.getElementById("resultLevels").innerHTML = "";
      document.getElementById("gameStatus").innerHTML = "";
      document.getElementById("gameOrder").innerHTML = "";
      document.getElementById("gameStatusError").innerHTML = "";
      notificationEndDisplayed = false;
      notificationStartDisplayed = false;
      displayInfosGoal();
    });
    playerGame.onStart(function () {
      if (!notificationEndDisplayed && !notificationStartDisplayed) {
        notifInfo = new _src_Shim__WEBPACK_IMPORTED_MODULE_1__["NotificationMessage"](textToDisplayGoal, null, notifInfosColor, 10);
        playerGame.setNotification(notifInfo);
        notificationStartDisplayed = true;
      }

      if (destroyAis) {
        group.destroySnakes([0], [_src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.AI]);
        buyBonus(null, player);
      }
    });
  } else {
    return false;
  }
};

window.editDownloadURL = function () {
  var value = window.prompt(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.editDownloadURLPrompt"), DOWNLOAD_DEFAULT_URI);

  if (value != null) {
    DOWNLOAD_DEFAULT_URI = value;
  }
};

window.downloadLevels = function (player, button) {
  var url = DOWNLOAD_DEFAULT_URI;
  url = url.replace("{player}", player);
  url = url.replace("{appVersion}", _src_engine_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Setting.APP_VERSION);
  var script = document.createElement("script");
  script.src = url;
  var canceled = false;

  window["callbackDownloadLevels"] = function (player, data) {
    if (!canceled) {
      if (player == PLAYER_HUMAN) {
        storageGlobal.setItem(SOLO_PLAYER_DOWNLOAD_LEVELS_TO, JSON.stringify(data));
      } else if (player == PLAYER_AI) {
        storageGlobal.setItem(SOLO_AI_DOWNLOAD_LEVELS_TO, JSON.stringify(data));
      }

      displayLevelList(player);
    }

    document.getElementById("levelDownloading").innerHTML = "";
    document.getElementById("btnDeblockDiv").innerHTML = "";
  };

  button.disabled = true;
  var buttonDeblock = document.createElement("button");
  buttonDeblock.classList = "btn btn-lg btn-warning";
  buttonDeblock.innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.buttonDeblock");
  document.getElementById("levelDownloading").innerHTML = "<strong>" + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.downloading") + "</strong>";
  document.getElementById("btnDeblockDiv").innerHTML = "";
  document.getElementsByTagName('head')[0].appendChild(script);

  buttonDeblock.onclick = function () {
    canceled = true;
    deblockButton(button, script, "callbackDownloadLevels");
  };

  document.getElementById("btnDeblockDiv").appendChild(buttonDeblock);
};

function deblockButton(button, script) {
  button.disabled = false;
  script.src = null;
  document.getElementById("levelDownloading").innerHTML = "";
  document.getElementById("btnDeblockDiv").innerHTML = "";
  document.getElementsByTagName('head')[0].removeChild(script);
}

function getNumberFruits(player) {
  var item = getSave(player, DEFAULT_LEVEL);

  if (item != null) {
    if (!item["numFruits"] || isNaN(item["numFruits"])) {
      item["numFruits"] = 0;
    }

    return item["numFruits"];
  }

  return false;
}

function getListLevel(player, type) {
  var levels = getLevels(player, type);
  var res = "";

  if (type == DOWNLOADED_LEVEL) {
    res += '<div class="row mb-3"><div class="col text-center"><button class="btn btn-lg btn-warning" onclick="downloadLevels(' + player + ', this);"><span class="fui-plus-circle"></span>&nbsp; ' + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.download") + '</button><br /><a href="#null" onclick="editDownloadURL();" class="small"><span class="fui-new"></span>&nbsp; ' + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.editDownloadURL") + '</a></div></div>';
  }

  if (levels == null) {
    return res + "<strong>" + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.emptyList") + "</strong>";
  }

  var index = 1;
  var empty = true;

  for (var key in levels) {
    var button = void 0;

    if (levels.hasOwnProperty(key)) {
      if (!canPlay(key, player, type)) {
        button = '<button class="btn btn-lg btn-primary btn-block-85" disabled aria-label="' + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.disabledLevel") + '" data-balloon-length="fit" data-balloon-pos="up">' + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.level") + ' ' + index + '</button>';
      } else if (!levelCompatible(levels[key]["type"], levels[key]["version"])) {
        button = '<button class="btn btn-lg btn-primary btn-block-85" disabled aria-label="' + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.notCompatible") + '" data-balloon-length="fit" data-balloon-pos="up">' + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.level") + ' ' + index + '</button>';
      } else {
        var resultLevel = printResultLevel(key, player, levels[key]["type"], type);
        button = '<button class="btn btn-lg btn-primary btn-block-85" onclick="playLevel(' + key + ', ' + player + ', ' + type + ');" ' + (resultLevel.trim() != "" ? 'aria-label="' + printResultLevel(key, player, levels[key]["type"], type) + '" data-balloon-length="fit" data-balloon-pos="up"' : '') + '>' + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.level") + ' ' + index + '</button>';
      }

      if (index == 1) {
        res += '<div class="row mb-2">';
      }

      if (index % 2 == 0) {
        res += '<div class="col pl-0 justify-content-center">' + button + '</div></div><div class="row mb-2">';
      } else {
        res += '<div class="col pr-0 justify-content-center">' + button + '</div>';
      }

      empty = false;
    }

    index++;
  }

  if (empty) {
    return res + "<strong>" + i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.emptyList") + "</strong>";
  }

  if (index % 2 == 0) {
    res += '<div class="col pr-0 justify-content-center"></div>';
  }

  return res + "</div>";
}

function getListBonus(player) {
  var item = getSave(player, DEFAULT_LEVEL);
  var div = document.createElement("div");
  var p = document.createElement("p");
  p.classList.add("mb-1");
  var pStrong = document.createElement("strong");
  pStrong.textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bonusEquipped") + " ";
  var bonus = document.createElement("span");
  bonus.textContent = item["currentBonus"] ? levelsBonusData[item["currentBonus"]] ? i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t(levelsBonusData[item["currentBonus"]].text) : i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bonus.unknown") : i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.none");
  p.appendChild(pStrong);
  p.appendChild(bonus);

  if (item["currentBonus"]) {
    var sellBonusLink = document.createElement("a");
    sellBonusLink.addEventListener("click", function () {
      return sellBonus(player);
    });
    sellBonusLink.setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.sellBonus"));
    sellBonusLink.setAttribute("data-balloon-length", "medium");
    sellBonusLink.classList.add("text-danger", "ml-2");
    sellBonusLink.style.cursor = "pointer";
    var sellBonusSpan = document.createElement("span");
    sellBonusSpan.classList.add("fui-cross");
    sellBonusLink.appendChild(sellBonusSpan);
    p.appendChild(sellBonusLink);
  }

  div.appendChild(p);

  var _loop2 = function _loop2(key) {
    var subDiv = document.createElement("div");
    subDiv.classList.add("m-2");
    var divBtnGroup = document.createElement("div");
    divBtnGroup.classList.add("btn-group", "flex-wrap");
    var button = document.createElement("button");
    button.classList.add("btn", "btn-primary");
    button.textContent = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t(levelsBonusData[key].text);
    button.style.width = "250px";
    button.setAttribute("data-balloon-length", "large");

    if (levelsBonusData[key].applicableTo.indexOf(player) < 0 || item["unlockAllLevels"] && (key == "BONUS_UNLOCK_ALL_LEVELS" || key == "BONUS_PASS_LEVEL")) {
      button.disabled = true;
      button.classList.add("disabled");
      button.setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bonusNotApplicable"));
    } else if (levelsBonusData[key].price > getNumberFruits(player)) {
      button.disabled = true;
      button.classList.add("disabled");
      button.setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.notEnoughFruits"));
    } else if (item["currentBonus"] != null) {
      button.disabled = true;
      button.classList.add("disabled");
      button.setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bonusAlreadyEquipped"));
    } else {
      button.addEventListener("click", function () {
        return buyBonus(key, player);
      });
    }

    var buttonInfo = document.createElement("div");
    buttonInfo.classList.add("btn", "btn-info");
    buttonInfo.setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t(levelsBonusData[key].information));
    buttonInfo.setAttribute("data-balloon-length", "large");
    var iconInfo = document.createElement("span");
    iconInfo.classList.add("fui-question-circle");
    buttonInfo.appendChild(iconInfo);
    var buttonPrice = document.createElement("div");
    buttonPrice.style.width = "125px";
    var image = document.createElement("img");
    image.classList.add("align-text-bottom");
    image.src = "assets/images/skin/flat/fruit.png";
    image.width = 24;
    image.height = 24;
    var span2 = document.createElement("span");
    span2.textContent = " × " + levelsBonusData[key].price;
    buttonPrice.appendChild(image);
    buttonPrice.appendChild(span2);
    divBtnGroup.appendChild(button);
    divBtnGroup.appendChild(buttonInfo);
    divBtnGroup.appendChild(buttonPrice);
    subDiv.appendChild(divBtnGroup);
    div.appendChild(subDiv);
  };

  for (var key in levelsBonusData) {
    _loop2(key);
  }

  return div;
}

function buyBonus(bonus, player) {
  var save = getTitleSave(player, DEFAULT_LEVEL);
  var item = getSave(player, DEFAULT_LEVEL);

  if (bonus == null) {
    item["currentBonus"] = null;
    storageGlobal.setItem(save, JSON.stringify(item));
  } else if (levelsBonusData[bonus].applicableTo.indexOf(player) < 0 || item["unlockAllLevels"] && (bonus == "BONUS_UNLOCK_ALL_LEVELS" || bonus == "BONUS_PASS_LEVEL")) {
    alert(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bonusNotApplicable"));
  } else if (levelsBonusData[bonus].price > getNumberFruits(player)) {
    alert(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.notEnoughFruits"));
  } else if (item["currentBonus"] != null) {
    alert(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bonusAlreadyEquipped"));
  } else {
    item["numFruits"] -= levelsBonusData[bonus].price;

    if (bonus == "BONUS_UNLOCK_ALL_LEVELS") {
      item["unlockAllLevels"] = true;
    } else {
      item["currentBonus"] = bonus;
    }

    storageGlobal.setItem(save, JSON.stringify(item));
    displayLevelList(player);
    return true;
  }

  return false;
}

function sellBonus(player) {
  var save = getTitleSave(player, DEFAULT_LEVEL);
  var item = getSave(player, DEFAULT_LEVEL);

  if (item["currentBonus"] != null) {
    if (levelsBonusData[item["currentBonus"]] || confirm(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("levels.bonus.unknownInfo"))) {
      if (levelsBonusData[item["currentBonus"]]) {
        item["numFruits"] += levelsBonusData[item["currentBonus"]].price;
      }

      item["currentBonus"] = null;
      storageGlobal.setItem(save, JSON.stringify(item));
      displayLevelList(player);
      return true;
    }
  }

  return false;
} // Localization


function listTranslations(languages) {
  if (languages != null) {
    document.getElementById("languageSelect").disabled = true;
    document.getElementById("languageSelect").innerHTML = "";

    for (var i = 0; i < languages.length; i++) {
      document.getElementById("languageSelect").innerHTML = document.getElementById("languageSelect").innerHTML + '<option data-i18n="lang.' + languages[i] + '" value="' + languages[i] + '"></option>';
    }

    document.getElementById("languageSelect").value = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].language.substr(0, 2);
    document.getElementById("languageSelect").disabled = false;
  }
}

function translateContent() {
  listTranslations(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].languages);
  var i18nList = document.querySelectorAll("[data-i18n]");

  for (var i = 0, l = i18nList.length; i < l; i++) {
    i18nList[i].innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t(i18nList[i].dataset.i18n);
  }

  document.getElementById("dateTxt").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("menu.versionDate", {
    date: new Intl.DateTimeFormat(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].language.substr(0, 2)).format(new Date(DATE_VERSION))
  });
  document.getElementById("heightGrid").placeholder = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("settings.placeholderHeight");
  document.getElementById("widthGrid").placeholder = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("settings.placeholderWidth");
  document.getElementById("customSpeed").placeholder = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("settings.placeholderCustomSpeed");
  document.getElementById("numberIA").placeholder = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("settings.placeholderNumberIA");
  document.getElementById("appDownloadURLGet").setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("update.getURL"));
  document.getElementById("appUpdateChanges").setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("update.getChanges"));
  document.getElementById("appUpdateDateLocalized").innerHTML = i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("update.versionDate", {
    date: new Intl.DateTimeFormat(i18next__WEBPACK_IMPORTED_MODULE_0__["default"].language.substr(0, 2)).format(new Date(document.getElementById("appUpdateDate").innerHTML))
  });
  document.getElementById("aiAssistantInfos").setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("settings.aiAssistantInfos"));
  document.getElementById("multithreadingInfos").setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("menu.multithreadingInfos"));
  document.getElementById("onlineEnableClientSidePredictionsInfos").setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("menu.onlineEnableClientSidePredictionsInfos"));
  document.querySelectorAll(".settingNotAvailable").forEach(function (e) {
    e.setAttribute("aria-label", i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("menu.settingNotAvailable"));
  });
}

document.getElementById("languageSelect").onchange = function () {
  i18next__WEBPACK_IMPORTED_MODULE_0__["default"].changeLanguage(document.getElementById("languageSelect").value, function (err, t) {
    translateContent();
  });
};

window.addEventListener("load", function () {
  setTimeout(function () {
    translateContent();
    checkUpdate();
  }, 250);
}); // Installable app

if ("serviceWorker" in navigator) {
  navigator.serviceWorker.register("service-worker.js");
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _assertThisInitialized; });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _classCallCheck; });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _createClass; });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _defineProperty; });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _getPrototypeOf; });
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/inherits.js":
/*!*************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/inherits.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _inherits; });
/* harmony import */ var _babel_runtime_helpers_esm_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/setPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object(_babel_runtime_helpers_esm_setPrototypeOf__WEBPACK_IMPORTED_MODULE_0__["default"])(subClass, superClass);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectSpread.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectSpread.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _objectSpread; });
/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? Object(arguments[i]) : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]);
    });
  }

  return target;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js ***!
  \******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _possibleConstructorReturn; });
/* harmony import */ var _babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");


function _possibleConstructorReturn(self, call) {
  if (call && (Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(call) === "object" || typeof call === "function")) {
    return call;
  }

  return Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__["default"])(self);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _setPrototypeOf; });
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _typeof; });
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/get.js":
/*!****************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/get.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var superPropBase = __webpack_require__(/*! ./superPropBase */ "./node_modules/@babel/runtime/helpers/superPropBase.js");

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    module.exports = _get = Reflect.get;
  } else {
    module.exports = _get = function _get(target, property, receiver) {
      var base = superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

module.exports = _get;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inherits.js":
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

var assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/set.js":
/*!****************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/set.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var superPropBase = __webpack_require__(/*! ./superPropBase */ "./node_modules/@babel/runtime/helpers/superPropBase.js");

var defineProperty = __webpack_require__(/*! ./defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");

function set(target, property, value, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.set) {
    set = Reflect.set;
  } else {
    set = function set(target, property, value, receiver) {
      var base = superPropBase(target, property);
      var desc;

      if (base) {
        desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.set) {
          desc.set.call(receiver, value);
          return true;
        } else if (!desc.writable) {
          return false;
        }
      }

      desc = Object.getOwnPropertyDescriptor(receiver, property);

      if (desc) {
        if (!desc.writable) {
          return false;
        }

        desc.value = value;
        Object.defineProperty(receiver, property, desc);
      } else {
        defineProperty(receiver, property, value);
      }

      return true;
    };
  }

  return set(target, property, value, receiver);
}

function _set(target, property, value, receiver, isStrict) {
  var s = set(target, property, value, receiver || target);

  if (!s && isStrict) {
    throw new Error('failed to set property');
  }

  return value;
}

module.exports = _set;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/superPropBase.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/superPropBase.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__(/*! ./getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

module.exports = _superPropBase;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/after/index.js":
/*!*************************************!*\
  !*** ./node_modules/after/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}


/***/ }),

/***/ "./node_modules/arraybuffer.slice/index.js":
/*!*************************************************!*\
  !*** ./node_modules/arraybuffer.slice/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};


/***/ }),

/***/ "./node_modules/backo2/index.js":
/*!**************************************!*\
  !*** ./node_modules/backo2/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};



/***/ }),

/***/ "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(chars){
  "use strict";

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = chars.indexOf(base64[i]);
      encoded2 = chars.indexOf(base64[i+1]);
      encoded3 = chars.indexOf(base64[i+2]);
      encoded4 = chars.indexOf(base64[i+3]);

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/blob/index.js":
/*!************************************!*\
  !*** ./node_modules/blob/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :
  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : 
  false;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  return ary.map(function(chunk) {
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      return buf;
    }

    return chunk;
  });
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary).forEach(function(part) {
    bb.append(part);
  });

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  return new Blob(mapArrayBufferViews(ary), options || {});
};

if (typeof Blob !== 'undefined') {
  BlobBuilderConstructor.prototype = Blob.prototype;
  BlobConstructor.prototype = Blob.prototype;
}

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/component-bind/index.js":
/*!**********************************************!*\
  !*** ./node_modules/component-bind/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};


/***/ }),

/***/ "./node_modules/component-emitter/index.js":
/*!*************************************************!*\
  !*** ./node_modules/component-emitter/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }

  // Remove event specific arrays for event types that no
  // one is subscribed for to avoid memory leak.
  if (callbacks.length === 0) {
    delete this._callbacks['$' + event];
  }

  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};

  var args = new Array(arguments.length - 1)
    , callbacks = this._callbacks['$' + event];

  for (var i = 1; i < arguments.length; i++) {
    args[i - 1] = arguments[i];
  }

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),

/***/ "./node_modules/component-inherit/index.js":
/*!*************************************************!*\
  !*** ./node_modules/component-inherit/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {


module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};

/***/ }),

/***/ "./node_modules/engine.io-client/lib/globalThis.browser.js":
/*!*****************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/globalThis.browser.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = (function () {
  if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
  } else {
    return Function('return this')(); // eslint-disable-line no-new-func
  }
})();


/***/ }),

/***/ "./node_modules/engine.io-client/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/engine.io-client/lib/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


module.exports = __webpack_require__(/*! ./socket */ "./node_modules/engine.io-client/lib/socket.js");

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");


/***/ }),

/***/ "./node_modules/engine.io-client/lib/socket.js":
/*!*****************************************************!*\
  !*** ./node_modules/engine.io-client/lib/socket.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var transports = __webpack_require__(/*! ./transports/index */ "./node_modules/engine.io-client/lib/transports/index.js");
var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");
var debug = __webpack_require__(/*! debug */ "./node_modules/engine.io-client/node_modules/debug/src/browser.js")('engine.io-client:socket');
var index = __webpack_require__(/*! indexof */ "./node_modules/indexof/index.js");
var parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");
var parseuri = __webpack_require__(/*! parseuri */ "./node_modules/parseuri/index.js");
var parseqs = __webpack_require__(/*! parseqs */ "./node_modules/parseqs/index.js");

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (typeof location !== 'undefined' && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (typeof location !== 'undefined' ? location.hostname : 'localhost');
  this.port = opts.port || (typeof location !== 'undefined' && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.withCredentials = false !== opts.withCredentials;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.transportOptions = opts.transportOptions || {};
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // detect ReactNative environment
  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

  // other options for Node.js or ReactNative client
  if (typeof self === 'undefined' || this.isReactNative) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(/*! ./transport */ "./node_modules/engine.io-client/lib/transport.js");
Socket.transports = __webpack_require__(/*! ./transports/index */ "./node_modules/engine.io-client/lib/transports/index.js");
Socket.parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // per-transport options
  var options = this.transportOptions[name] || {};

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    query: query,
    socket: this,
    agent: options.agent || this.agent,
    hostname: options.hostname || this.hostname,
    port: options.port || this.port,
    secure: options.secure || this.secure,
    path: options.path || this.path,
    forceJSONP: options.forceJSONP || this.forceJSONP,
    jsonp: options.jsonp || this.jsonp,
    forceBase64: options.forceBase64 || this.forceBase64,
    enablesXDR: options.enablesXDR || this.enablesXDR,
    withCredentials: options.withCredentials || this.withCredentials,
    timestampRequests: options.timestampRequests || this.timestampRequests,
    timestampParam: options.timestampParam || this.timestampParam,
    policyPort: options.policyPort || this.policyPort,
    pfx: options.pfx || this.pfx,
    key: options.key || this.key,
    passphrase: options.passphrase || this.passphrase,
    cert: options.cert || this.cert,
    ca: options.ca || this.ca,
    ciphers: options.ciphers || this.ciphers,
    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
    extraHeaders: options.extraHeaders || this.extraHeaders,
    forceNode: options.forceNode || this.forceNode,
    localAddress: options.localAddress || this.localAddress,
    requestTimeout: options.requestTimeout || this.requestTimeout,
    protocols: options.protocols || void (0),
    isReactNative: this.isReactNative
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(JSON.parse(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};


/***/ }),

/***/ "./node_modules/engine.io-client/lib/transport.js":
/*!********************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transport.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");
var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // results of ReactNative environment detection
  this.isReactNative = opts.isReactNative;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};


/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies
 */

var XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ "./node_modules/engine.io-client/lib/xmlhttprequest.js");
var XHR = __webpack_require__(/*! ./polling-xhr */ "./node_modules/engine.io-client/lib/transports/polling-xhr.js");
var JSONP = __webpack_require__(/*! ./polling-jsonp */ "./node_modules/engine.io-client/lib/transports/polling-jsonp.js");
var websocket = __webpack_require__(/*! ./websocket */ "./node_modules/engine.io-client/lib/transports/websocket.js");

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}


/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/polling-jsonp.js":
/*!***********************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/polling-jsonp.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module requirements.
 */

var Polling = __webpack_require__(/*! ./polling */ "./node_modules/engine.io-client/lib/transports/polling.js");
var inherit = __webpack_require__(/*! component-inherit */ "./node_modules/component-inherit/index.js");
var globalThis = __webpack_require__(/*! ../globalThis */ "./node_modules/engine.io-client/lib/globalThis.browser.js");

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    callbacks = globalThis.___eio = (globalThis.___eio || []);
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (typeof addEventListener === 'function') {
    addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};


/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/polling-xhr.js":
/*!*********************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/polling-xhr.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* global attachEvent */

/**
 * Module requirements.
 */

var XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ "./node_modules/engine.io-client/lib/xmlhttprequest.js");
var Polling = __webpack_require__(/*! ./polling */ "./node_modules/engine.io-client/lib/transports/polling.js");
var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");
var inherit = __webpack_require__(/*! component-inherit */ "./node_modules/component-inherit/index.js");
var debug = __webpack_require__(/*! debug */ "./node_modules/engine.io-client/node_modules/debug/src/browser.js")('engine.io-client:polling-xhr');
var globalThis = __webpack_require__(/*! ../globalThis */ "./node_modules/engine.io-client/lib/globalThis.browser.js");

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;
  this.extraHeaders = opts.extraHeaders;

  if (typeof location !== 'undefined') {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;
  opts.withCredentials = this.withCredentials;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.withCredentials = opts.withCredentials;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = this.withCredentials;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 2) {
          try {
            var contentType = xhr.getResponseHeader('Content-Type');
            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
              xhr.responseType = 'arraybuffer';
            }
          } catch (e) {}
        }
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (typeof document !== 'undefined') {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (typeof document !== 'undefined') {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      data = this.xhr.responseText;
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (typeof document !== 'undefined') {
  if (typeof attachEvent === 'function') {
    attachEvent('onunload', unloadHandler);
  } else if (typeof addEventListener === 'function') {
    var terminationEvent = 'onpagehide' in globalThis ? 'pagehide' : 'unload';
    addEventListener(terminationEvent, unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}


/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/polling.js":
/*!*****************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/polling.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var Transport = __webpack_require__(/*! ../transport */ "./node_modules/engine.io-client/lib/transport.js");
var parseqs = __webpack_require__(/*! parseqs */ "./node_modules/parseqs/index.js");
var parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");
var inherit = __webpack_require__(/*! component-inherit */ "./node_modules/component-inherit/index.js");
var yeast = __webpack_require__(/*! yeast */ "./node_modules/yeast/index.js");
var debug = __webpack_require__(/*! debug */ "./node_modules/engine.io-client/node_modules/debug/src/browser.js")('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = __webpack_require__(/*! xmlhttprequest-ssl */ "./node_modules/engine.io-client/lib/xmlhttprequest.js");
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};


/***/ }),

/***/ "./node_modules/engine.io-client/lib/transports/websocket.js":
/*!*******************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/transports/websocket.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Module dependencies.
 */

var Transport = __webpack_require__(/*! ../transport */ "./node_modules/engine.io-client/lib/transport.js");
var parser = __webpack_require__(/*! engine.io-parser */ "./node_modules/engine.io-parser/lib/browser.js");
var parseqs = __webpack_require__(/*! parseqs */ "./node_modules/parseqs/index.js");
var inherit = __webpack_require__(/*! component-inherit */ "./node_modules/component-inherit/index.js");
var yeast = __webpack_require__(/*! yeast */ "./node_modules/yeast/index.js");
var debug = __webpack_require__(/*! debug */ "./node_modules/engine.io-client/node_modules/debug/src/browser.js")('engine.io-client:websocket');

var BrowserWebSocket, NodeWebSocket;

if (typeof WebSocket !== 'undefined') {
  BrowserWebSocket = WebSocket;
} else if (typeof self !== 'undefined') {
  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
}

if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(/*! ws */ 1);
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocketImpl = BrowserWebSocket || NodeWebSocket;

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  this.protocols = opts.protocols;
  if (!this.usingBrowserWebSocket) {
    WebSocketImpl = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = this.protocols;

  var opts = {};

  if (!this.isReactNative) {
    opts.agent = this.agent;
    opts.perMessageDeflate = this.perMessageDeflate;

    // SSL options for Node.js client
    opts.pfx = this.pfx;
    opts.key = this.key;
    opts.passphrase = this.passphrase;
    opts.cert = this.cert;
    opts.ca = this.ca;
    opts.ciphers = this.ciphers;
    opts.rejectUnauthorized = this.rejectUnauthorized;
  }

  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws =
      this.usingBrowserWebSocket && !this.isReactNative
        ? protocols
          ? new WebSocketImpl(uri, protocols)
          : new WebSocketImpl(uri)
        : new WebSocketImpl(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/engine.io-client/lib/xmlhttprequest.js":
/*!*************************************************************!*\
  !*** ./node_modules/engine.io-client/lib/xmlhttprequest.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// browser shim for xmlhttprequest module

var hasCORS = __webpack_require__(/*! has-cors */ "./node_modules/has-cors/index.js");
var globalThis = __webpack_require__(/*! ./globalThis */ "./node_modules/engine.io-client/lib/globalThis.browser.js");

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new globalThis[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};


/***/ }),

/***/ "./node_modules/engine.io-client/node_modules/debug/src/browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/engine.io-client/node_modules/debug/src/browser.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(/*! ./debug */ "./node_modules/engine.io-client/node_modules/debug/src/debug.js");
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/engine.io-client/node_modules/debug/src/debug.js":
/*!***********************************************************************!*\
  !*** ./node_modules/engine.io-client/node_modules/debug/src/debug.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ "./node_modules/ms/index.js");

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),

/***/ "./node_modules/engine.io-parser/lib/browser.js":
/*!******************************************************!*\
  !*** ./node_modules/engine.io-parser/lib/browser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var keys = __webpack_require__(/*! ./keys */ "./node_modules/engine.io-parser/lib/keys.js");
var hasBinary = __webpack_require__(/*! has-binary2 */ "./node_modules/has-binary2/index.js");
var sliceBuffer = __webpack_require__(/*! arraybuffer.slice */ "./node_modules/arraybuffer.slice/index.js");
var after = __webpack_require__(/*! after */ "./node_modules/after/index.js");
var utf8 = __webpack_require__(/*! ./utf8 */ "./node_modules/engine.io-parser/lib/utf8.js");

var base64encoder;
if (typeof ArrayBuffer !== 'undefined') {
  base64encoder = __webpack_require__(/*! base64-arraybuffer */ "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js");
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(/*! blob */ "./node_modules/blob/index.js");

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if (typeof utf8encode === 'function') {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data), { strict: false }) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data === 'string') {
    if (data.charAt(0) === 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data, { strict: false });
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary === 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data !== 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data === '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = '', n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (chr !== ':') {
      length += chr;
      continue;
    }

    if (length === '' || (length != (n = Number(length)))) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    msg = data.substr(i + 1, n);

    if (length != msg.length) {
      // parser error - ignoring payload
      return callback(err, 0, 1);
    }

    if (msg.length) {
      packet = exports.decodePacket(msg, binaryType, false);

      if (err.type === packet.type && err.data === packet.data) {
        // parser error in individual packet - ignoring payload
        return callback(err, 0, 1);
      }

      var ret = callback(packet, i + n, l);
      if (false === ret) return;
    }

    // advance cursor
    i += n;
    length = '';
  }

  if (length !== '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] === 255) break;

      // 310 = char length of Number.MAX_VALUE
      if (msgLength.length > 310) {
        return callback(err, 0, 1);
      }

      msgLength += tailArray[i];
    }

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};


/***/ }),

/***/ "./node_modules/engine.io-parser/lib/keys.js":
/*!***************************************************!*\
  !*** ./node_modules/engine.io-parser/lib/keys.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};


/***/ }),

/***/ "./node_modules/engine.io-parser/lib/utf8.js":
/*!***************************************************!*\
  !*** ./node_modules/engine.io-parser/lib/utf8.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! https://mths.be/utf8js v2.1.2 by @mathias */

var stringFromCharCode = String.fromCharCode;

// Taken from https://mths.be/punycode
function ucs2decode(string) {
	var output = [];
	var counter = 0;
	var length = string.length;
	var value;
	var extra;
	while (counter < length) {
		value = string.charCodeAt(counter++);
		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
			// high surrogate, and there is a next character
			extra = string.charCodeAt(counter++);
			if ((extra & 0xFC00) == 0xDC00) { // low surrogate
				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
			} else {
				// unmatched surrogate; only append this code unit, in case the next
				// code unit is the high surrogate of a surrogate pair
				output.push(value);
				counter--;
			}
		} else {
			output.push(value);
		}
	}
	return output;
}

// Taken from https://mths.be/punycode
function ucs2encode(array) {
	var length = array.length;
	var index = -1;
	var value;
	var output = '';
	while (++index < length) {
		value = array[index];
		if (value > 0xFFFF) {
			value -= 0x10000;
			output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
			value = 0xDC00 | value & 0x3FF;
		}
		output += stringFromCharCode(value);
	}
	return output;
}

function checkScalarValue(codePoint, strict) {
	if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
		if (strict) {
			throw Error(
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
				' is not a scalar value'
			);
		}
		return false;
	}
	return true;
}
/*--------------------------------------------------------------------------*/

function createByte(codePoint, shift) {
	return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
}

function encodeCodePoint(codePoint, strict) {
	if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
		return stringFromCharCode(codePoint);
	}
	var symbol = '';
	if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
		symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
	}
	else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
		if (!checkScalarValue(codePoint, strict)) {
			codePoint = 0xFFFD;
		}
		symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
		symbol += createByte(codePoint, 6);
	}
	else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
		symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
		symbol += createByte(codePoint, 12);
		symbol += createByte(codePoint, 6);
	}
	symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
	return symbol;
}

function utf8encode(string, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	var codePoints = ucs2decode(string);
	var length = codePoints.length;
	var index = -1;
	var codePoint;
	var byteString = '';
	while (++index < length) {
		codePoint = codePoints[index];
		byteString += encodeCodePoint(codePoint, strict);
	}
	return byteString;
}

/*--------------------------------------------------------------------------*/

function readContinuationByte() {
	if (byteIndex >= byteCount) {
		throw Error('Invalid byte index');
	}

	var continuationByte = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	if ((continuationByte & 0xC0) == 0x80) {
		return continuationByte & 0x3F;
	}

	// If we end up here, it’s not a continuation byte
	throw Error('Invalid continuation byte');
}

function decodeSymbol(strict) {
	var byte1;
	var byte2;
	var byte3;
	var byte4;
	var codePoint;

	if (byteIndex > byteCount) {
		throw Error('Invalid byte index');
	}

	if (byteIndex == byteCount) {
		return false;
	}

	// Read first byte
	byte1 = byteArray[byteIndex] & 0xFF;
	byteIndex++;

	// 1-byte sequence (no continuation bytes)
	if ((byte1 & 0x80) == 0) {
		return byte1;
	}

	// 2-byte sequence
	if ((byte1 & 0xE0) == 0xC0) {
		byte2 = readContinuationByte();
		codePoint = ((byte1 & 0x1F) << 6) | byte2;
		if (codePoint >= 0x80) {
			return codePoint;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 3-byte sequence (may include unpaired surrogates)
	if ((byte1 & 0xF0) == 0xE0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
		if (codePoint >= 0x0800) {
			return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
		} else {
			throw Error('Invalid continuation byte');
		}
	}

	// 4-byte sequence
	if ((byte1 & 0xF8) == 0xF0) {
		byte2 = readContinuationByte();
		byte3 = readContinuationByte();
		byte4 = readContinuationByte();
		codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
			(byte3 << 0x06) | byte4;
		if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
			return codePoint;
		}
	}

	throw Error('Invalid UTF-8 detected');
}

var byteArray;
var byteCount;
var byteIndex;
function utf8decode(byteString, opts) {
	opts = opts || {};
	var strict = false !== opts.strict;

	byteArray = ucs2decode(byteString);
	byteCount = byteArray.length;
	byteIndex = 0;
	var codePoints = [];
	var tmp;
	while ((tmp = decodeSymbol(strict)) !== false) {
		codePoints.push(tmp);
	}
	return ucs2encode(codePoints);
}

module.exports = {
	version: '2.1.2',
	encode: utf8encode,
	decode: utf8decode
};


/***/ }),

/***/ "./node_modules/has-binary2/index.js":
/*!*******************************************!*\
  !*** ./node_modules/has-binary2/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/* global Blob File */

/*
 * Module requirements.
 */

var isArray = __webpack_require__(/*! isarray */ "./node_modules/has-binary2/node_modules/isarray/index.js");

var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' ||
                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
var withNativeFile = typeof File === 'function' ||
                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Supports Buffer, ArrayBuffer, Blob and File.
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary (obj) {
  if (!obj || typeof obj !== 'object') {
    return false;
  }

  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      if (hasBinary(obj[i])) {
        return true;
      }
    }
    return false;
  }

  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
    (withNativeBlob && obj instanceof Blob) ||
    (withNativeFile && obj instanceof File)
  ) {
    return true;
  }

  // see: https://github.com/Automattic/has-binary/pull/4
  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
    return hasBinary(obj.toJSON(), true);
  }

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
      return true;
    }
  }

  return false;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/has-binary2/node_modules/isarray/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/has-binary2/node_modules/isarray/index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/has-cors/index.js":
/*!****************************************!*\
  !*** ./node_modules/has-cors/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}


/***/ }),

/***/ "./node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/i18next-browser-languagedetector/dist/esm/i18nextBrowserLanguageDetector.js ***!
  \**************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");



var arr = [];
var each = arr.forEach;
var slice = arr.slice;
function defaults(obj) {
  each.call(slice.call(arguments, 1), function (source) {
    if (source) {
      for (var prop in source) {
        if (obj[prop] === undefined) obj[prop] = source[prop];
      }
    }
  });
  return obj;
}

var cookie = {
  create: function create(name, value, minutes, domain) {
    var cookieOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
      path: '/'
    };
    var expires;

    if (minutes) {
      var date = new Date();
      date.setTime(date.getTime() + minutes * 60 * 1000);
      expires = '; expires=' + date.toUTCString();
    } else expires = '';

    domain = domain ? 'domain=' + domain + ';' : '';
    cookieOptions = Object.keys(cookieOptions).reduce(function (acc, key) {
      return acc + ';' + key.replace(/([A-Z])/g, function ($1) {
        return '-' + $1.toLowerCase();
      }) + '=' + cookieOptions[key];
    }, '');
    document.cookie = name + '=' + encodeURIComponent(value) + expires + ';' + domain + cookieOptions;
  },
  read: function read(name) {
    var nameEQ = name + '=';
    var ca = document.cookie.split(';');

    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];

      while (c.charAt(0) === ' ') {
        c = c.substring(1, c.length);
      }

      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }

    return null;
  },
  remove: function remove(name) {
    this.create(name, '', -1);
  }
};
var cookie$1 = {
  name: 'cookie',
  lookup: function lookup(options) {
    var found;

    if (options.lookupCookie && typeof document !== 'undefined') {
      var c = cookie.read(options.lookupCookie);
      if (c) found = c;
    }

    return found;
  },
  cacheUserLanguage: function cacheUserLanguage(lng, options) {
    if (options.lookupCookie && typeof document !== 'undefined') {
      cookie.create(options.lookupCookie, lng, options.cookieMinutes, options.cookieDomain, options.cookieOptions);
    }
  }
};

var querystring = {
  name: 'querystring',
  lookup: function lookup(options) {
    var found;

    if (typeof window !== 'undefined') {
      var query = window.location.search.substring(1);
      var params = query.split('&');

      for (var i = 0; i < params.length; i++) {
        var pos = params[i].indexOf('=');

        if (pos > 0) {
          var key = params[i].substring(0, pos);

          if (key === options.lookupQuerystring) {
            found = params[i].substring(pos + 1);
          }
        }
      }
    }

    return found;
  }
};

var hasLocalStorageSupport;

try {
  hasLocalStorageSupport = window !== 'undefined' && window.localStorage !== null;
  var testKey = 'i18next.translate.boo';
  window.localStorage.setItem(testKey, 'foo');
  window.localStorage.removeItem(testKey);
} catch (e) {
  hasLocalStorageSupport = false;
}

var localStorage = {
  name: 'localStorage',
  lookup: function lookup(options) {
    var found;

    if (options.lookupLocalStorage && hasLocalStorageSupport) {
      var lng = window.localStorage.getItem(options.lookupLocalStorage);
      if (lng) found = lng;
    }

    return found;
  },
  cacheUserLanguage: function cacheUserLanguage(lng, options) {
    if (options.lookupLocalStorage && hasLocalStorageSupport) {
      window.localStorage.setItem(options.lookupLocalStorage, lng);
    }
  }
};

var hasSessionStorageSupport;

try {
  hasSessionStorageSupport = window !== 'undefined' && window.sessionStorage !== null;
  var testKey$1 = 'i18next.translate.boo';
  window.sessionStorage.setItem(testKey$1, 'foo');
  window.sessionStorage.removeItem(testKey$1);
} catch (e) {
  hasSessionStorageSupport = false;
}

var sessionStorage = {
  name: 'sessionStorage',
  lookup: function lookup(options) {
    var found;

    if (options.lookupsessionStorage && hasSessionStorageSupport) {
      var lng = window.sessionStorage.getItem(options.lookupsessionStorage);
      if (lng) found = lng;
    }

    return found;
  },
  cacheUserLanguage: function cacheUserLanguage(lng, options) {
    if (options.lookupsessionStorage && hasSessionStorageSupport) {
      window.sessionStorage.setItem(options.lookupsessionStorage, lng);
    }
  }
};

var navigator$1 = {
  name: 'navigator',
  lookup: function lookup(options) {
    var found = [];

    if (typeof navigator !== 'undefined') {
      if (navigator.languages) {
        // chrome only; not an array, so can't use .push.apply instead of iterating
        for (var i = 0; i < navigator.languages.length; i++) {
          found.push(navigator.languages[i]);
        }
      }

      if (navigator.userLanguage) {
        found.push(navigator.userLanguage);
      }

      if (navigator.language) {
        found.push(navigator.language);
      }
    }

    return found.length > 0 ? found : undefined;
  }
};

var htmlTag = {
  name: 'htmlTag',
  lookup: function lookup(options) {
    var found;
    var htmlTag = options.htmlTag || (typeof document !== 'undefined' ? document.documentElement : null);

    if (htmlTag && typeof htmlTag.getAttribute === 'function') {
      found = htmlTag.getAttribute('lang');
    }

    return found;
  }
};

var path = {
  name: 'path',
  lookup: function lookup(options) {
    var found;

    if (typeof window !== 'undefined') {
      var language = window.location.pathname.match(/\/([a-zA-Z-]*)/g);

      if (language instanceof Array) {
        if (typeof options.lookupFromPathIndex === 'number') {
          if (typeof language[options.lookupFromPathIndex] !== 'string') {
            return undefined;
          }

          found = language[options.lookupFromPathIndex].replace('/', '');
        } else {
          found = language[0].replace('/', '');
        }
      }
    }

    return found;
  }
};

var subdomain = {
  name: 'subdomain',
  lookup: function lookup(options) {
    var found;

    if (typeof window !== 'undefined') {
      var language = window.location.href.match(/(?:http[s]*\:\/\/)*(.*?)\.(?=[^\/]*\..{2,5})/gi);

      if (language instanceof Array) {
        if (typeof options.lookupFromSubdomainIndex === 'number') {
          found = language[options.lookupFromSubdomainIndex].replace('http://', '').replace('https://', '').replace('.', '');
        } else {
          found = language[0].replace('http://', '').replace('https://', '').replace('.', '');
        }
      }
    }

    return found;
  }
};

function getDefaults() {
  return {
    order: ['querystring', 'cookie', 'localStorage', 'sessionStorage', 'navigator', 'htmlTag'],
    lookupQuerystring: 'lng',
    lookupCookie: 'i18next',
    lookupLocalStorage: 'i18nextLng',
    // cache user language
    caches: ['localStorage'],
    excludeCacheFor: ['cimode'],
    //cookieMinutes: 10,
    //cookieDomain: 'myDomain'
    checkWhitelist: true,
    checkForSimilarInWhitelist: false
  };
}

var Browser =
/*#__PURE__*/
function () {
  function Browser(services) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Browser);

    this.type = 'languageDetector';
    this.detectors = {};
    this.init(services, options);
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Browser, [{
    key: "init",
    value: function init(services) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var i18nOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this.services = services;
      this.options = defaults(options, this.options || {}, getDefaults()); // if checking for similar, user needs to check whitelist

      if (this.options.checkForSimilarInWhitelist) this.options.checkWhitelist = true; // backwards compatibility

      if (this.options.lookupFromUrlIndex) this.options.lookupFromPathIndex = this.options.lookupFromUrlIndex;
      this.i18nOptions = i18nOptions;
      this.addDetector(cookie$1);
      this.addDetector(querystring);
      this.addDetector(localStorage);
      this.addDetector(sessionStorage);
      this.addDetector(navigator$1);
      this.addDetector(htmlTag);
      this.addDetector(path);
      this.addDetector(subdomain);
    }
  }, {
    key: "addDetector",
    value: function addDetector(detector) {
      this.detectors[detector.name] = detector;
    }
  }, {
    key: "detect",
    value: function detect(detectionOrder) {
      var _this = this;

      if (!detectionOrder) detectionOrder = this.options.order;
      var detected = [];
      detectionOrder.forEach(function (detectorName) {
        if (_this.detectors[detectorName]) {
          var lookup = _this.detectors[detectorName].lookup(_this.options);

          if (lookup && typeof lookup === 'string') lookup = [lookup];
          if (lookup) detected = detected.concat(lookup);
        }
      });
      var found;
      detected.forEach(function (lng) {
        if (found) return;

        var cleanedLng = _this.services.languageUtils.formatLanguageCode(lng);

        if (!_this.options.checkWhitelist || _this.services.languageUtils.isWhitelisted(cleanedLng)) found = cleanedLng;

        if (!found && _this.options.checkForSimilarInWhitelist) {
          found = _this.getSimilarInWhitelist(cleanedLng);
        }
      });

      if (!found) {
        var fallbacks = this.i18nOptions.fallbackLng;
        if (typeof fallbacks === 'string') fallbacks = [fallbacks];
        if (!fallbacks) fallbacks = [];

        if (Object.prototype.toString.apply(fallbacks) === '[object Array]') {
          found = fallbacks[0];
        } else {
          found = fallbacks[0] || fallbacks["default"] && fallbacks["default"][0];
        }
      }

      return found;
    }
  }, {
    key: "cacheUserLanguage",
    value: function cacheUserLanguage(lng, caches) {
      var _this2 = this;

      if (!caches) caches = this.options.caches;
      if (!caches) return;
      if (this.options.excludeCacheFor && this.options.excludeCacheFor.indexOf(lng) > -1) return;
      caches.forEach(function (cacheName) {
        if (_this2.detectors[cacheName]) _this2.detectors[cacheName].cacheUserLanguage(lng, _this2.options);
      });
    }
  }, {
    key: "getSimilarInWhitelist",
    value: function getSimilarInWhitelist(cleanedLng) {
      var _this3 = this;

      if (!this.i18nOptions.whitelist) return;

      if (cleanedLng.includes('-')) {
        // i.e. es-MX should check if es is in whitelist
        var prefix = cleanedLng.split('-')[0];
        var cleanedPrefix = this.services.languageUtils.formatLanguageCode(prefix);
        if (this.services.languageUtils.isWhitelisted(cleanedPrefix)) return cleanedPrefix; // if reached here, nothing found. continue to search for similar using only prefix

        cleanedLng = cleanedPrefix;
      } // i.e. 'pt' should return 'pt-BR'. If multiple in whitelist with 'pt-', then use first one in whitelist


      var similar = this.i18nOptions.whitelist.find(function (whitelistLng) {
        var cleanedWhitelistLng = _this3.services.languageUtils.formatLanguageCode(whitelistLng);

        if (cleanedWhitelistLng.startsWith(cleanedLng)) return cleanedWhitelistLng;
      });
      if (similar) return similar;
    }
  }]);

  return Browser;
}();

Browser.type = 'languageDetector';

/* harmony default export */ __webpack_exports__["default"] = (Browser);


/***/ }),

/***/ "./node_modules/i18next/dist/esm/i18next.js":
/*!**************************************************!*\
  !*** ./node_modules/i18next/dist/esm/i18next.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectSpread */ "./node_modules/@babel/runtime/helpers/esm/objectSpread.js");
/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");
/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");









var consoleLogger = {
  type: 'logger',
  log: function log(args) {
    this.output('log', args);
  },
  warn: function warn(args) {
    this.output('warn', args);
  },
  error: function error(args) {
    this.output('error', args);
  },
  output: function output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};

var Logger = function () {
  function Logger(concreteLogger) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, Logger);

    this.init(concreteLogger, options);
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(Logger, [{
    key: "init",
    value: function init(concreteLogger) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.prefix = options.prefix || 'i18next:';
      this.logger = concreteLogger || consoleLogger;
      this.options = options;
      this.debug = options.debug;
    }
  }, {
    key: "setDebug",
    value: function setDebug(bool) {
      this.debug = bool;
    }
  }, {
    key: "log",
    value: function log() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return this.forward(args, 'log', '', true);
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return this.forward(args, 'warn', '', true);
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return this.forward(args, 'error', '');
    }
  }, {
    key: "deprecate",
    value: function deprecate() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
    }
  }, {
    key: "forward",
    value: function forward(args, lvl, prefix, debugOnly) {
      if (debugOnly && !this.debug) return null;
      if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
      return this.logger[lvl](args);
    }
  }, {
    key: "create",
    value: function create(moduleName) {
      return new Logger(this.logger, Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, {
        prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
      }, this.options));
    }
  }]);

  return Logger;
}();

var baseLogger = new Logger();

var EventEmitter = function () {
  function EventEmitter() {
    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, EventEmitter);

    this.observers = {};
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(EventEmitter, [{
    key: "on",
    value: function on(events, listener) {
      var _this = this;

      events.split(' ').forEach(function (event) {
        _this.observers[event] = _this.observers[event] || [];

        _this.observers[event].push(listener);
      });
      return this;
    }
  }, {
    key: "off",
    value: function off(event, listener) {
      if (!this.observers[event]) return;

      if (!listener) {
        delete this.observers[event];
        return;
      }

      this.observers[event] = this.observers[event].filter(function (l) {
        return l !== listener;
      });
    }
  }, {
    key: "emit",
    value: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (this.observers[event]) {
        var cloned = [].concat(this.observers[event]);
        cloned.forEach(function (observer) {
          observer.apply(void 0, args);
        });
      }

      if (this.observers['*']) {
        var _cloned = [].concat(this.observers['*']);

        _cloned.forEach(function (observer) {
          observer.apply(observer, [event].concat(args));
        });
      }
    }
  }]);

  return EventEmitter;
}();

function defer() {
  var res;
  var rej;
  var promise = new Promise(function (resolve, reject) {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object) {
  if (object == null) return '';
  return '' + object;
}
function copy(a, s, t) {
  a.forEach(function (m) {
    if (s[m]) t[m] = s[m];
  });
}

function getLastOfPath(object, path, Empty) {
  function cleanKey(key) {
    return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
  }

  function canNotTraverseDeeper() {
    return !object || typeof object === 'string';
  }

  var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');

  while (stack.length > 1) {
    if (canNotTraverseDeeper()) return {};
    var key = cleanKey(stack.shift());
    if (!object[key] && Empty) object[key] = new Empty();
    object = object[key];
  }

  if (canNotTraverseDeeper()) return {};
  return {
    obj: object,
    k: cleanKey(stack.shift())
  };
}

function setPath(object, path, newValue) {
  var _getLastOfPath = getLastOfPath(object, path, Object),
      obj = _getLastOfPath.obj,
      k = _getLastOfPath.k;

  obj[k] = newValue;
}
function pushPath(object, path, newValue, concat) {
  var _getLastOfPath2 = getLastOfPath(object, path, Object),
      obj = _getLastOfPath2.obj,
      k = _getLastOfPath2.k;

  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}
function getPath(object, path) {
  var _getLastOfPath3 = getLastOfPath(object, path),
      obj = _getLastOfPath3.obj,
      k = _getLastOfPath3.k;

  if (!obj) return undefined;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  var value = getPath(data, key);

  if (value !== undefined) {
    return value;
  }

  return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (var prop in source) {
    if (prop !== '__proto__' && prop !== 'constructor') {
      if (prop in target) {
        if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }

  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
var _entityMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
  '/': '&#x2F;'
};
function escape(data) {
  if (typeof data === 'string') {
    return data.replace(/[&<>"'\/]/g, function (s) {
      return _entityMap[s];
    });
  }

  return data;
}
var isIE10 = typeof window !== 'undefined' && window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;

var ResourceStore = function (_EventEmitter) {
  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_7__["default"])(ResourceStore, _EventEmitter);

  function ResourceStore(data) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      ns: ['translation'],
      defaultNS: 'translation'
    };

    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, ResourceStore);

    _this = Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__["default"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__["default"])(ResourceStore).call(this));

    if (isIE10) {
      EventEmitter.call(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__["default"])(_this));
    }

    _this.data = data || {};
    _this.options = options;

    if (_this.options.keySeparator === undefined) {
      _this.options.keySeparator = '.';
    }

    return _this;
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(ResourceStore, [{
    key: "addNamespaces",
    value: function addNamespaces(ns) {
      if (this.options.ns.indexOf(ns) < 0) {
        this.options.ns.push(ns);
      }
    }
  }, {
    key: "removeNamespaces",
    value: function removeNamespaces(ns) {
      var index = this.options.ns.indexOf(ns);

      if (index > -1) {
        this.options.ns.splice(index, 1);
      }
    }
  }, {
    key: "getResource",
    value: function getResource(lng, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      var path = [lng, ns];
      if (key && typeof key !== 'string') path = path.concat(key);
      if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
      }

      return getPath(this.data, path);
    }
  }, {
    key: "addResource",
    value: function addResource(lng, ns, key, value) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
        silent: false
      };
      var keySeparator = this.options.keySeparator;
      if (keySeparator === undefined) keySeparator = '.';
      var path = [lng, ns];
      if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
        value = ns;
        ns = path[1];
      }

      this.addNamespaces(ns);
      setPath(this.data, path, value);
      if (!options.silent) this.emit('added', lng, ns, key, value);
    }
  }, {
    key: "addResources",
    value: function addResources(lng, ns, resources) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
        silent: false
      };

      for (var m in resources) {
        if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
          silent: true
        });
      }

      if (!options.silent) this.emit('added', lng, ns, resources);
    }
  }, {
    key: "addResourceBundle",
    value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
        silent: false
      };
      var path = [lng, ns];

      if (lng.indexOf('.') > -1) {
        path = lng.split('.');
        deep = resources;
        resources = ns;
        ns = path[1];
      }

      this.addNamespaces(ns);
      var pack = getPath(this.data, path) || {};

      if (deep) {
        deepExtend(pack, resources, overwrite);
      } else {
        pack = Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, pack, resources);
      }

      setPath(this.data, path, pack);
      if (!options.silent) this.emit('added', lng, ns, resources);
    }
  }, {
    key: "removeResourceBundle",
    value: function removeResourceBundle(lng, ns) {
      if (this.hasResourceBundle(lng, ns)) {
        delete this.data[lng][ns];
      }

      this.removeNamespaces(ns);
      this.emit('removed', lng, ns);
    }
  }, {
    key: "hasResourceBundle",
    value: function hasResourceBundle(lng, ns) {
      return this.getResource(lng, ns) !== undefined;
    }
  }, {
    key: "getResourceBundle",
    value: function getResourceBundle(lng, ns) {
      if (!ns) ns = this.options.defaultNS;
      if (this.options.compatibilityAPI === 'v1') return Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, {}, this.getResource(lng, ns));
      return this.getResource(lng, ns);
    }
  }, {
    key: "getDataByLanguage",
    value: function getDataByLanguage(lng) {
      return this.data[lng];
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.data;
    }
  }]);

  return ResourceStore;
}(EventEmitter);

var postProcessor = {
  processors: {},
  addPostProcessor: function addPostProcessor(module) {
    this.processors[module.name] = module;
  },
  handle: function handle(processors, value, key, options, translator) {
    var _this = this;

    processors.forEach(function (processor) {
      if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
    });
    return value;
  }
};

var checkedLoadedFor = {};

var Translator = function (_EventEmitter) {
  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_7__["default"])(Translator, _EventEmitter);

  function Translator(services) {
    var _this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, Translator);

    _this = Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__["default"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__["default"])(Translator).call(this));

    if (isIE10) {
      EventEmitter.call(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__["default"])(_this));
    }

    copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__["default"])(_this));
    _this.options = options;

    if (_this.options.keySeparator === undefined) {
      _this.options.keySeparator = '.';
    }

    _this.logger = baseLogger.create('translator');
    return _this;
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(Translator, [{
    key: "changeLanguage",
    value: function changeLanguage(lng) {
      if (lng) this.language = lng;
    }
  }, {
    key: "exists",
    value: function exists(key) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        interpolation: {}
      };
      var resolved = this.resolve(key, options);
      return resolved && resolved.res !== undefined;
    }
  }, {
    key: "extractFromKey",
    value: function extractFromKey(key, options) {
      var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
      if (nsSeparator === undefined) nsSeparator = ':';
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
      var namespaces = options.ns || this.options.defaultNS;

      if (nsSeparator && key.indexOf(nsSeparator) > -1) {
        var m = key.match(this.interpolator.nestingRegexp);

        if (m && m.length > 0) {
          return {
            key: key,
            namespaces: namespaces
          };
        }

        var parts = key.split(nsSeparator);
        if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
        key = parts.join(keySeparator);
      }

      if (typeof namespaces === 'string') namespaces = [namespaces];
      return {
        key: key,
        namespaces: namespaces
      };
    }
  }, {
    key: "translate",
    value: function translate(keys, options, lastKey) {
      var _this2 = this;

      if (Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(options) !== 'object' && this.options.overloadTranslationOptionHandler) {
        options = this.options.overloadTranslationOptionHandler(arguments);
      }

      if (!options) options = {};
      if (keys === undefined || keys === null) return '';
      if (!Array.isArray(keys)) keys = [String(keys)];
      var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;

      var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
          key = _this$extractFromKey.key,
          namespaces = _this$extractFromKey.namespaces;

      var namespace = namespaces[namespaces.length - 1];
      var lng = options.lng || this.language;
      var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;

      if (lng && lng.toLowerCase() === 'cimode') {
        if (appendNamespaceToCIMode) {
          var nsSeparator = options.nsSeparator || this.options.nsSeparator;
          return namespace + nsSeparator + key;
        }

        return key;
      }

      var resolved = this.resolve(keys, options);
      var res = resolved && resolved.res;
      var resUsedKey = resolved && resolved.usedKey || key;
      var resExactUsedKey = resolved && resolved.exactUsedKey || key;
      var resType = Object.prototype.toString.apply(res);
      var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
      var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
      var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
      var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';

      if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
        if (!options.returnObjects && !this.options.returnObjects) {
          this.logger.warn('accessing an object - but returnObjects options is not enabled!');
          return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, options) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");
        }

        if (keySeparator) {
          var resTypeIsArray = resType === '[object Array]';
          var copy$$1 = resTypeIsArray ? [] : {};
          var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;

          for (var m in res) {
            if (Object.prototype.hasOwnProperty.call(res, m)) {
              var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
              copy$$1[m] = this.translate(deepKey, Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, options, {
                joinArrays: false,
                ns: namespaces
              }));
              if (copy$$1[m] === deepKey) copy$$1[m] = res[m];
            }
          }

          res = copy$$1;
        }
      } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
        res = res.join(joinArrays);
        if (res) res = this.extendTranslation(res, keys, options, lastKey);
      } else {
        var usedDefault = false;
        var usedKey = false;

        if (!this.isValidLookup(res) && options.defaultValue !== undefined) {
          usedDefault = true;

          if (options.count !== undefined) {
            var suffix = this.pluralResolver.getSuffix(lng, options.count);
            res = options["defaultValue".concat(suffix)];
          }

          if (!res) res = options.defaultValue;
        }

        if (!this.isValidLookup(res)) {
          usedKey = true;
          res = key;
        }

        var updateMissing = options.defaultValue && options.defaultValue !== res && this.options.updateMissing;

        if (usedKey || usedDefault || updateMissing) {
          this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? options.defaultValue : res);

          if (keySeparator) {
            var fk = this.resolve(key, Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, options, {
              keySeparator: false
            }));
            if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
          }

          var lngs = [];
          var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);

          if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
            for (var i = 0; i < fallbackLngs.length; i++) {
              lngs.push(fallbackLngs[i]);
            }
          } else if (this.options.saveMissingTo === 'all') {
            lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
          } else {
            lngs.push(options.lng || this.language);
          }

          var send = function send(l, k) {
            if (_this2.options.missingKeyHandler) {
              _this2.options.missingKeyHandler(l, namespace, k, updateMissing ? options.defaultValue : res, updateMissing, options);
            } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
              _this2.backendConnector.saveMissing(l, namespace, k, updateMissing ? options.defaultValue : res, updateMissing, options);
            }

            _this2.emit('missingKey', l, namespace, k, res);
          };

          if (this.options.saveMissing) {
            var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';

            if (this.options.saveMissingPlurals && needsPluralHandling) {
              lngs.forEach(function (l) {
                var plurals = _this2.pluralResolver.getPluralFormsOfKey(l, key);

                plurals.forEach(function (p) {
                  return send([l], p);
                });
              });
            } else {
              send(lngs, key);
            }
          }
        }

        res = this.extendTranslation(res, keys, options, resolved, lastKey);
        if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);
        if (usedKey && this.options.parseMissingKeyHandler) res = this.options.parseMissingKeyHandler(res);
      }

      return res;
    }
  }, {
    key: "extendTranslation",
    value: function extendTranslation(res, key, options, resolved, lastKey) {
      var _this3 = this;

      if (this.i18nFormat && this.i18nFormat.parse) {
        res = this.i18nFormat.parse(res, options, resolved.usedLng, resolved.usedNS, resolved.usedKey, {
          resolved: resolved
        });
      } else if (!options.skipInterpolation) {
        if (options.interpolation) this.interpolator.init(Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, options, {
          interpolation: Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.options.interpolation, options.interpolation)
        }));
        var skipOnVariables = options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
        var nestBef;

        if (skipOnVariables) {
          var nb = res.match(this.interpolator.nestingRegexp);
          nestBef = nb && nb.length;
        }

        var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
        if (this.options.interpolation.defaultVariables) data = Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.options.interpolation.defaultVariables, data);
        res = this.interpolator.interpolate(res, data, options.lng || this.language, options);

        if (skipOnVariables) {
          var na = res.match(this.interpolator.nestingRegexp);
          var nestAft = na && na.length;
          if (nestBef < nestAft) options.nest = false;
        }

        if (options.nest !== false) res = this.interpolator.nest(res, function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          if (lastKey && lastKey[0] === args[0] && !options.context) {
            _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));

            return null;
          }

          return _this3.translate.apply(_this3, args.concat([key]));
        }, options);
        if (options.interpolation) this.interpolator.reset();
      }

      var postProcess = options.postProcess || this.options.postProcess;
      var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;

      if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
        res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({
          i18nResolved: resolved
        }, options) : options, this);
      }

      return res;
    }
  }, {
    key: "resolve",
    value: function resolve(keys) {
      var _this4 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var found;
      var usedKey;
      var exactUsedKey;
      var usedLng;
      var usedNS;
      if (typeof keys === 'string') keys = [keys];
      keys.forEach(function (k) {
        if (_this4.isValidLookup(found)) return;

        var extracted = _this4.extractFromKey(k, options);

        var key = extracted.key;
        usedKey = key;
        var namespaces = extracted.namespaces;
        if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
        var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
        var needsContextHandling = options.context !== undefined && typeof options.context === 'string' && options.context !== '';
        var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
        namespaces.forEach(function (ns) {
          if (_this4.isValidLookup(found)) return;
          usedNS = ns;

          if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
            checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;

            _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
          }

          codes.forEach(function (code) {
            if (_this4.isValidLookup(found)) return;
            usedLng = code;
            var finalKey = key;
            var finalKeys = [finalKey];

            if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
              _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
            } else {
              var pluralSuffix;
              if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count);
              if (needsPluralHandling && needsContextHandling) finalKeys.push(finalKey + pluralSuffix);
              if (needsContextHandling) finalKeys.push(finalKey += "".concat(_this4.options.contextSeparator).concat(options.context));
              if (needsPluralHandling) finalKeys.push(finalKey += pluralSuffix);
            }

            var possibleKey;

            while (possibleKey = finalKeys.pop()) {
              if (!_this4.isValidLookup(found)) {
                exactUsedKey = possibleKey;
                found = _this4.getResource(code, ns, possibleKey, options);
              }
            }
          });
        });
      });
      return {
        res: found,
        usedKey: usedKey,
        exactUsedKey: exactUsedKey,
        usedLng: usedLng,
        usedNS: usedNS
      };
    }
  }, {
    key: "isValidLookup",
    value: function isValidLookup(res) {
      return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
    }
  }, {
    key: "getResource",
    value: function getResource(code, ns, key) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
      return this.resourceStore.getResource(code, ns, key, options);
    }
  }]);

  return Translator;
}(EventEmitter);

function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

var LanguageUtil = function () {
  function LanguageUtil(options) {
    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, LanguageUtil);

    this.options = options;
    this.whitelist = this.options.supportedLngs || false;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create('languageUtils');
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(LanguageUtil, [{
    key: "getScriptPartFromCode",
    value: function getScriptPartFromCode(code) {
      if (!code || code.indexOf('-') < 0) return null;
      var p = code.split('-');
      if (p.length === 2) return null;
      p.pop();
      if (p[p.length - 1].toLowerCase() === 'x') return null;
      return this.formatLanguageCode(p.join('-'));
    }
  }, {
    key: "getLanguagePartFromCode",
    value: function getLanguagePartFromCode(code) {
      if (!code || code.indexOf('-') < 0) return code;
      var p = code.split('-');
      return this.formatLanguageCode(p[0]);
    }
  }, {
    key: "formatLanguageCode",
    value: function formatLanguageCode(code) {
      if (typeof code === 'string' && code.indexOf('-') > -1) {
        var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
        var p = code.split('-');

        if (this.options.lowerCaseLng) {
          p = p.map(function (part) {
            return part.toLowerCase();
          });
        } else if (p.length === 2) {
          p[0] = p[0].toLowerCase();
          p[1] = p[1].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        } else if (p.length === 3) {
          p[0] = p[0].toLowerCase();
          if (p[1].length === 2) p[1] = p[1].toUpperCase();
          if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
          if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
          if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
        }

        return p.join('-');
      }

      return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
    }
  }, {
    key: "isWhitelisted",
    value: function isWhitelisted(code) {
      this.logger.deprecate('languageUtils.isWhitelisted', 'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\'s usage asap.');
      return this.isSupportedCode(code);
    }
  }, {
    key: "isSupportedCode",
    value: function isSupportedCode(code) {
      if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
        code = this.getLanguagePartFromCode(code);
      }

      return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
    }
  }, {
    key: "getBestMatchFromCodes",
    value: function getBestMatchFromCodes(codes) {
      var _this = this;

      if (!codes) return null;
      var found;
      codes.forEach(function (code) {
        if (found) return;

        var cleanedLng = _this.formatLanguageCode(code);

        if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
      });

      if (!found && this.options.supportedLngs) {
        codes.forEach(function (code) {
          if (found) return;

          var lngOnly = _this.getLanguagePartFromCode(code);

          if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
          found = _this.options.supportedLngs.find(function (supportedLng) {
            if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
          });
        });
      }

      if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
      return found;
    }
  }, {
    key: "getFallbackCodes",
    value: function getFallbackCodes(fallbacks, code) {
      if (!fallbacks) return [];
      if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
      if (typeof fallbacks === 'string') fallbacks = [fallbacks];
      if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
      if (!code) return fallbacks["default"] || [];
      var found = fallbacks[code];
      if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
      if (!found) found = fallbacks[this.formatLanguageCode(code)];
      if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
      if (!found) found = fallbacks["default"];
      return found || [];
    }
  }, {
    key: "toResolveHierarchy",
    value: function toResolveHierarchy(code, fallbackCode) {
      var _this2 = this;

      var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
      var codes = [];

      var addCode = function addCode(c) {
        if (!c) return;

        if (_this2.isSupportedCode(c)) {
          codes.push(c);
        } else {
          _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
        }
      };

      if (typeof code === 'string' && code.indexOf('-') > -1) {
        if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
        if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
        if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
      } else if (typeof code === 'string') {
        addCode(this.formatLanguageCode(code));
      }

      fallbackCodes.forEach(function (fc) {
        if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
      });
      return codes;
    }
  }]);

  return LanguageUtil;
}();

var sets = [{
  lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'ti', 'tr', 'uz', 'wa'],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'kk', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
  nr: [1],
  fc: 3
}, {
  lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ['ar'],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ['cs', 'sk'],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ['csb', 'pl'],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ['cy'],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ['fr'],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ['ga'],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ['gd'],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ['is'],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ['jv'],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ['kw'],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ['lt'],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ['lv'],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ['mk'],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ['mnk'],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ['mt'],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ['or'],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ['ro'],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ['sl'],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ['he', 'iw'],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: function _(n) {
    return Number(n > 1);
  },
  2: function _(n) {
    return Number(n != 1);
  },
  3: function _(n) {
    return 0;
  },
  4: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function _(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function _(n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function _(n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function _(n) {
    return Number(n >= 2);
  },
  10: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function _(n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function _(n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function _(n) {
    return Number(n !== 0);
  },
  14: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function _(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function _(n) {
    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
  },
  18: function _(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function _(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function _(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function _(n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  },
  22: function _(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
  }
};

function createRules() {
  var rules = {};
  sets.forEach(function (set) {
    set.lngs.forEach(function (l) {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
}

var PluralResolver = function () {
  function PluralResolver(languageUtils) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, PluralResolver);

    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create('pluralResolver');
    this.rules = createRules();
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(PluralResolver, [{
    key: "addRule",
    value: function addRule(lng, obj) {
      this.rules[lng] = obj;
    }
  }, {
    key: "getRule",
    value: function getRule(code) {
      return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
    }
  }, {
    key: "needsPlural",
    value: function needsPlural(code) {
      var rule = this.getRule(code);
      return rule && rule.numbers.length > 1;
    }
  }, {
    key: "getPluralFormsOfKey",
    value: function getPluralFormsOfKey(code, key) {
      var _this = this;

      var ret = [];
      var rule = this.getRule(code);
      if (!rule) return ret;
      rule.numbers.forEach(function (n) {
        var suffix = _this.getSuffix(code, n);

        ret.push("".concat(key).concat(suffix));
      });
      return ret;
    }
  }, {
    key: "getSuffix",
    value: function getSuffix(code, count) {
      var _this2 = this;

      var rule = this.getRule(code);

      if (rule) {
        var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
        var suffix = rule.numbers[idx];

        if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
          if (suffix === 2) {
            suffix = 'plural';
          } else if (suffix === 1) {
            suffix = '';
          }
        }

        var returnSuffix = function returnSuffix() {
          return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
        };

        if (this.options.compatibilityJSON === 'v1') {
          if (suffix === 1) return '';
          if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
          return returnSuffix();
        } else if (this.options.compatibilityJSON === 'v2') {
          return returnSuffix();
        } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
          return returnSuffix();
        }

        return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
      }

      this.logger.warn("no plural rule found for: ".concat(code));
      return '';
    }
  }]);

  return PluralResolver;
}();

var Interpolator = function () {
  function Interpolator() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, Interpolator);

    this.logger = baseLogger.create('interpolator');
    this.options = options;

    this.format = options.interpolation && options.interpolation.format || function (value) {
      return value;
    };

    this.init(options);
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(Interpolator, [{
    key: "init",
    value: function init() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      if (!options.interpolation) options.interpolation = {
        escapeValue: true
      };
      var iOpts = options.interpolation;
      this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
      this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
      this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
      this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
      this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
      this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
      this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
      this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
      this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
      this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
      this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
      this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
      this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
      this.resetRegExp();
    }
  }, {
    key: "reset",
    value: function reset() {
      if (this.options) this.init(this.options);
    }
  }, {
    key: "resetRegExp",
    value: function resetRegExp() {
      var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
      this.regexp = new RegExp(regexpStr, 'g');
      var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
      this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
      var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
      this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
    }
  }, {
    key: "interpolate",
    value: function interpolate(str, data, lng, options) {
      var _this = this;

      var match;
      var value;
      var replaces;
      var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};

      function regexSafe(val) {
        return val.replace(/\$/g, '$$$$');
      }

      var handleFormat = function handleFormat(key) {
        if (key.indexOf(_this.formatSeparator) < 0) {
          var path = getPathWithDefaults(data, defaultData, key);
          return _this.alwaysFormat ? _this.format(path, undefined, lng) : path;
        }

        var p = key.split(_this.formatSeparator);
        var k = p.shift().trim();
        var f = p.join(_this.formatSeparator).trim();
        return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, options);
      };

      this.resetRegExp();
      var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
      var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables || this.options.interpolation.skipOnVariables;
      var todos = [{
        regex: this.regexpUnescape,
        safeValue: function safeValue(val) {
          return regexSafe(val);
        }
      }, {
        regex: this.regexp,
        safeValue: function safeValue(val) {
          return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
        }
      }];
      todos.forEach(function (todo) {
        replaces = 0;

        while (match = todo.regex.exec(str)) {
          value = handleFormat(match[1].trim());

          if (value === undefined) {
            if (typeof missingInterpolationHandler === 'function') {
              var temp = missingInterpolationHandler(str, match, options);
              value = typeof temp === 'string' ? temp : '';
            } else if (skipOnVariables) {
              value = match[0];
              continue;
            } else {
              _this.logger.warn("missed to pass in variable ".concat(match[1], " for interpolating ").concat(str));

              value = '';
            }
          } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
            value = makeString(value);
          }

          str = str.replace(match[0], todo.safeValue(value));
          todo.regex.lastIndex = 0;
          replaces++;

          if (replaces >= _this.maxReplaces) {
            break;
          }
        }
      });
      return str;
    }
  }, {
    key: "nest",
    value: function nest(str, fc) {
      var _this2 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var match;
      var value;

      var clonedOptions = Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, options);

      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;

      function handleHasOptions(key, inheritedOptions) {
        var sep = this.nestingOptionsSeparator;
        if (key.indexOf(sep) < 0) return key;
        var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
        var optionsString = "{".concat(c[1]);
        key = c[0];
        optionsString = this.interpolate(optionsString, clonedOptions);
        optionsString = optionsString.replace(/'/g, '"');

        try {
          clonedOptions = JSON.parse(optionsString);
          if (inheritedOptions) clonedOptions = Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, inheritedOptions, clonedOptions);
        } catch (e) {
          this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
          return "".concat(key).concat(sep).concat(optionsString);
        }

        delete clonedOptions.defaultValue;
        return key;
      }

      while (match = this.nestingRegexp.exec(str)) {
        var formatters = [];
        var doReduce = false;

        if (match[0].includes(this.formatSeparator) && !/{.*}/.test(match[1])) {
          var r = match[1].split(this.formatSeparator).map(function (elem) {
            return elem.trim();
          });
          match[1] = r.shift();
          formatters = r;
          doReduce = true;
        }

        value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
        if (value && match[0] === str && typeof value !== 'string') return value;
        if (typeof value !== 'string') value = makeString(value);

        if (!value) {
          this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
          value = '';
        }

        if (doReduce) {
          value = formatters.reduce(function (v, f) {
            return _this2.format(v, f, options.lng, options);
          }, value.trim());
        }

        str = str.replace(match[0], value);
        this.regexp.lastIndex = 0;
      }

      return str;
    }
  }]);

  return Interpolator;
}();

function remove(arr, what) {
  var found = arr.indexOf(what);

  while (found !== -1) {
    arr.splice(found, 1);
    found = arr.indexOf(what);
  }
}

var Connector = function (_EventEmitter) {
  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_7__["default"])(Connector, _EventEmitter);

  function Connector(backend, store, services) {
    var _this;

    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, Connector);

    _this = Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__["default"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__["default"])(Connector).call(this));

    if (isIE10) {
      EventEmitter.call(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__["default"])(_this));
    }

    _this.backend = backend;
    _this.store = store;
    _this.services = services;
    _this.languageUtils = services.languageUtils;
    _this.options = options;
    _this.logger = baseLogger.create('backendConnector');
    _this.state = {};
    _this.queue = [];

    if (_this.backend && _this.backend.init) {
      _this.backend.init(services, options.backend, options);
    }

    return _this;
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(Connector, [{
    key: "queueLoad",
    value: function queueLoad(languages, namespaces, options, callback) {
      var _this2 = this;

      var toLoad = [];
      var pending = [];
      var toLoadLanguages = [];
      var toLoadNamespaces = [];
      languages.forEach(function (lng) {
        var hasAllNamespaces = true;
        namespaces.forEach(function (ns) {
          var name = "".concat(lng, "|").concat(ns);

          if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
            _this2.state[name] = 2;
          } else if (_this2.state[name] < 0) ; else if (_this2.state[name] === 1) {
            if (pending.indexOf(name) < 0) pending.push(name);
          } else {
            _this2.state[name] = 1;
            hasAllNamespaces = false;
            if (pending.indexOf(name) < 0) pending.push(name);
            if (toLoad.indexOf(name) < 0) toLoad.push(name);
            if (toLoadNamespaces.indexOf(ns) < 0) toLoadNamespaces.push(ns);
          }
        });
        if (!hasAllNamespaces) toLoadLanguages.push(lng);
      });

      if (toLoad.length || pending.length) {
        this.queue.push({
          pending: pending,
          loaded: {},
          errors: [],
          callback: callback
        });
      }

      return {
        toLoad: toLoad,
        pending: pending,
        toLoadLanguages: toLoadLanguages,
        toLoadNamespaces: toLoadNamespaces
      };
    }
  }, {
    key: "loaded",
    value: function loaded(name, err, data) {
      var s = name.split('|');
      var lng = s[0];
      var ns = s[1];
      if (err) this.emit('failedLoading', lng, ns, err);

      if (data) {
        this.store.addResourceBundle(lng, ns, data);
      }

      this.state[name] = err ? -1 : 2;
      var loaded = {};
      this.queue.forEach(function (q) {
        pushPath(q.loaded, [lng], ns);
        remove(q.pending, name);
        if (err) q.errors.push(err);

        if (q.pending.length === 0 && !q.done) {
          Object.keys(q.loaded).forEach(function (l) {
            if (!loaded[l]) loaded[l] = [];

            if (q.loaded[l].length) {
              q.loaded[l].forEach(function (ns) {
                if (loaded[l].indexOf(ns) < 0) loaded[l].push(ns);
              });
            }
          });
          q.done = true;

          if (q.errors.length) {
            q.callback(q.errors);
          } else {
            q.callback();
          }
        }
      });
      this.emit('loaded', loaded);
      this.queue = this.queue.filter(function (q) {
        return !q.done;
      });
    }
  }, {
    key: "read",
    value: function read(lng, ns, fcName) {
      var _this3 = this;

      var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 350;
      var callback = arguments.length > 5 ? arguments[5] : undefined;
      if (!lng.length) return callback(null, {});
      return this.backend[fcName](lng, ns, function (err, data) {
        if (err && data && tried < 5) {
          setTimeout(function () {
            _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
          }, wait);
          return;
        }

        callback(err, data);
      });
    }
  }, {
    key: "prepareLoading",
    value: function prepareLoading(languages, namespaces) {
      var _this4 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var callback = arguments.length > 3 ? arguments[3] : undefined;

      if (!this.backend) {
        this.logger.warn('No backend was added via i18next.use. Will not load resources.');
        return callback && callback();
      }

      if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
      if (typeof namespaces === 'string') namespaces = [namespaces];
      var toLoad = this.queueLoad(languages, namespaces, options, callback);

      if (!toLoad.toLoad.length) {
        if (!toLoad.pending.length) callback();
        return null;
      }

      toLoad.toLoad.forEach(function (name) {
        _this4.loadOne(name);
      });
    }
  }, {
    key: "load",
    value: function load(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {}, callback);
    }
  }, {
    key: "reload",
    value: function reload(languages, namespaces, callback) {
      this.prepareLoading(languages, namespaces, {
        reload: true
      }, callback);
    }
  }, {
    key: "loadOne",
    value: function loadOne(name) {
      var _this5 = this;

      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var s = name.split('|');
      var lng = s[0];
      var ns = s[1];
      this.read(lng, ns, 'read', undefined, undefined, function (err, data) {
        if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
        if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);

        _this5.loaded(name, err, data);
      });
    }
  }, {
    key: "saveMissing",
    value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

      if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
        this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
        return;
      }

      if (key === undefined || key === null || key === '') return;

      if (this.backend && this.backend.create) {
        this.backend.create(languages, namespace, key, fallbackValue, null, Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, options, {
          isUpdate: isUpdate
        }));
      }

      if (!languages || !languages[0]) return;
      this.store.addResource(languages[0], namespace, key, fallbackValue);
    }
  }]);

  return Connector;
}(EventEmitter);

function get() {
  return {
    debug: false,
    initImmediate: true,
    ns: ['translation'],
    defaultNS: ['translation'],
    fallbackLng: ['dev'],
    fallbackNS: false,
    whitelist: false,
    nonExplicitWhitelist: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: 'all',
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: '.',
    nsSeparator: ':',
    pluralSeparator: '_',
    contextSeparator: '_',
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: 'fallback',
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: true,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle(args) {
      var ret = {};
      if (Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(args[1]) === 'object') ret = args[1];
      if (typeof args[1] === 'string') ret.defaultValue = args[1];
      if (typeof args[2] === 'string') ret.tDescription = args[2];

      if (Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(args[2]) === 'object' || Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(args[3]) === 'object') {
        var options = args[3] || args[2];
        Object.keys(options).forEach(function (key) {
          ret[key] = options[key];
        });
      }

      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: function format(value, _format, lng, options) {
        return value;
      },
      prefix: '{{',
      suffix: '}}',
      formatSeparator: ',',
      unescapePrefix: '-',
      nestingPrefix: '$t(',
      nestingSuffix: ')',
      nestingOptionsSeparator: ',',
      maxReplaces: 1000,
      skipOnVariables: false
    }
  };
}
function transformOptions(options) {
  if (typeof options.ns === 'string') options.ns = [options.ns];
  if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
  if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];

  if (options.whitelist) {
    if (options.whitelist && options.whitelist.indexOf('cimode') < 0) {
      options.whitelist = options.whitelist.concat(['cimode']);
    }

    options.supportedLngs = options.whitelist;
  }

  if (options.nonExplicitWhitelist) {
    options.nonExplicitSupportedLngs = options.nonExplicitWhitelist;
  }

  if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
    options.supportedLngs = options.supportedLngs.concat(['cimode']);
  }

  return options;
}

function noop() {}

var I18n = function (_EventEmitter) {
  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_7__["default"])(I18n, _EventEmitter);

  function I18n() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var callback = arguments.length > 1 ? arguments[1] : undefined;

    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, I18n);

    _this = Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__["default"])(this, Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__["default"])(I18n).call(this));

    if (isIE10) {
      EventEmitter.call(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__["default"])(_this));
    }

    _this.options = transformOptions(options);
    _this.services = {};
    _this.logger = baseLogger;
    _this.modules = {
      external: []
    };

    if (callback && !_this.isInitialized && !options.isClone) {
      if (!_this.options.initImmediate) {
        _this.init(options, callback);

        return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__["default"])(_this, Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__["default"])(_this));
      }

      setTimeout(function () {
        _this.init(options, callback);
      }, 0);
    }

    return _this;
  }

  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(I18n, [{
    key: "init",
    value: function init() {
      var _this2 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;

      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      if (options.whitelist && !options.supportedLngs) {
        this.logger.deprecate('whitelist', 'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.');
      }

      if (options.nonExplicitWhitelist && !options.nonExplicitSupportedLngs) {
        this.logger.deprecate('whitelist', 'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.');
      }

      this.options = Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, get(), this.options, transformOptions(options));
      this.format = this.options.interpolation.format;
      if (!callback) callback = noop;

      function createClassOnDemand(ClassOrObject) {
        if (!ClassOrObject) return null;
        if (typeof ClassOrObject === 'function') return new ClassOrObject();
        return ClassOrObject;
      }

      if (!this.options.isClone) {
        if (this.modules.logger) {
          baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
        } else {
          baseLogger.init(null, this.options);
        }

        var lu = new LanguageUtil(this.options);
        this.store = new ResourceStore(this.options.resources, this.options);
        var s = this.services;
        s.logger = baseLogger;
        s.resourceStore = this.store;
        s.languageUtils = lu;
        s.pluralResolver = new PluralResolver(lu, {
          prepend: this.options.pluralSeparator,
          compatibilityJSON: this.options.compatibilityJSON,
          simplifyPluralSuffix: this.options.simplifyPluralSuffix
        });
        s.interpolator = new Interpolator(this.options);
        s.utils = {
          hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
        };
        s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
        s.backendConnector.on('*', function (event) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          _this2.emit.apply(_this2, [event].concat(args));
        });

        if (this.modules.languageDetector) {
          s.languageDetector = createClassOnDemand(this.modules.languageDetector);
          s.languageDetector.init(s, this.options.detection, this.options);
        }

        if (this.modules.i18nFormat) {
          s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
          if (s.i18nFormat.init) s.i18nFormat.init(this);
        }

        this.translator = new Translator(this.services, this.options);
        this.translator.on('*', function (event) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          _this2.emit.apply(_this2, [event].concat(args));
        });
        this.modules.external.forEach(function (m) {
          if (m.init) m.init(_this2);
        });
      }

      if (!this.services.languageDetector && !this.options.lng) {
        this.logger.warn('init: no languageDetector is used and no lng is defined');
      }

      var storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
      storeApi.forEach(function (fcName) {
        _this2[fcName] = function () {
          var _this2$store;

          return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
        };
      });
      var storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
      storeApiChained.forEach(function (fcName) {
        _this2[fcName] = function () {
          var _this2$store2;

          (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);

          return _this2;
        };
      });
      var deferred = defer();

      var load = function load() {
        _this2.changeLanguage(_this2.options.lng, function (err, t) {
          _this2.isInitialized = true;
          if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);

          _this2.emit('initialized', _this2.options);

          deferred.resolve(t);
          callback(err, t);
        });
      };

      if (this.options.resources || !this.options.initImmediate) {
        load();
      } else {
        setTimeout(load, 0);
      }

      return deferred;
    }
  }, {
    key: "loadResources",
    value: function loadResources(language) {
      var _this3 = this;

      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
      var usedCallback = callback;
      var usedLng = typeof language === 'string' ? language : this.language;
      if (typeof language === 'function') usedCallback = language;

      if (!this.options.resources || this.options.partialBundledLanguages) {
        if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
        var toLoad = [];

        var append = function append(lng) {
          if (!lng) return;

          var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);

          lngs.forEach(function (l) {
            if (toLoad.indexOf(l) < 0) toLoad.push(l);
          });
        };

        if (!usedLng) {
          var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          fallbacks.forEach(function (l) {
            return append(l);
          });
        } else {
          append(usedLng);
        }

        if (this.options.preload) {
          this.options.preload.forEach(function (l) {
            return append(l);
          });
        }

        this.services.backendConnector.load(toLoad, this.options.ns, usedCallback);
      } else {
        usedCallback(null);
      }
    }
  }, {
    key: "reloadResources",
    value: function reloadResources(lngs, ns, callback) {
      var deferred = defer();
      if (!lngs) lngs = this.languages;
      if (!ns) ns = this.options.ns;
      if (!callback) callback = noop;
      this.services.backendConnector.reload(lngs, ns, function (err) {
        deferred.resolve();
        callback(err);
      });
      return deferred;
    }
  }, {
    key: "use",
    value: function use(module) {
      if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
      if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');

      if (module.type === 'backend') {
        this.modules.backend = module;
      }

      if (module.type === 'logger' || module.log && module.warn && module.error) {
        this.modules.logger = module;
      }

      if (module.type === 'languageDetector') {
        this.modules.languageDetector = module;
      }

      if (module.type === 'i18nFormat') {
        this.modules.i18nFormat = module;
      }

      if (module.type === 'postProcessor') {
        postProcessor.addPostProcessor(module);
      }

      if (module.type === '3rdParty') {
        this.modules.external.push(module);
      }

      return this;
    }
  }, {
    key: "changeLanguage",
    value: function changeLanguage(lng, callback) {
      var _this4 = this;

      this.isLanguageChangingTo = lng;
      var deferred = defer();
      this.emit('languageChanging', lng);

      var done = function done(err, l) {
        if (l) {
          _this4.language = l;
          _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);

          _this4.translator.changeLanguage(l);

          _this4.isLanguageChangingTo = undefined;

          _this4.emit('languageChanged', l);

          _this4.logger.log('languageChanged', l);
        } else {
          _this4.isLanguageChangingTo = undefined;
        }

        deferred.resolve(function () {
          return _this4.t.apply(_this4, arguments);
        });
        if (callback) callback(err, function () {
          return _this4.t.apply(_this4, arguments);
        });
      };

      var setLng = function setLng(lngs) {
        var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);

        if (l) {
          if (!_this4.language) {
            _this4.language = l;
            _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
          }

          if (!_this4.translator.language) _this4.translator.changeLanguage(l);
          if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
        }

        _this4.loadResources(l, function (err) {
          done(err, l);
        });
      };

      if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
        setLng(this.services.languageDetector.detect());
      } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
        this.services.languageDetector.detect(setLng);
      } else {
        setLng(lng);
      }

      return deferred;
    }
  }, {
    key: "getFixedT",
    value: function getFixedT(lng, ns) {
      var _this5 = this;

      var fixedT = function fixedT(key, opts) {
        var options;

        if (Object(_babel_runtime_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(opts) !== 'object') {
          for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
            rest[_key3 - 2] = arguments[_key3];
          }

          options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
        } else {
          options = Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, opts);
        }

        options.lng = options.lng || fixedT.lng;
        options.lngs = options.lngs || fixedT.lngs;
        options.ns = options.ns || fixedT.ns;
        return _this5.t(key, options);
      };

      if (typeof lng === 'string') {
        fixedT.lng = lng;
      } else {
        fixedT.lngs = lng;
      }

      fixedT.ns = ns;
      return fixedT;
    }
  }, {
    key: "t",
    value: function t() {
      var _this$translator;

      return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
    }
  }, {
    key: "exists",
    value: function exists() {
      var _this$translator2;

      return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
    }
  }, {
    key: "setDefaultNamespace",
    value: function setDefaultNamespace(ns) {
      this.options.defaultNS = ns;
    }
  }, {
    key: "hasLoadedNamespace",
    value: function hasLoadedNamespace(ns) {
      var _this6 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!this.isInitialized) {
        this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
        return false;
      }

      if (!this.languages || !this.languages.length) {
        this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
        return false;
      }

      var lng = this.languages[0];
      var fallbackLng = this.options ? this.options.fallbackLng : false;
      var lastLng = this.languages[this.languages.length - 1];
      if (lng.toLowerCase() === 'cimode') return true;

      var loadNotPending = function loadNotPending(l, n) {
        var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];

        return loadState === -1 || loadState === 2;
      };

      if (options.precheck) {
        var preResult = options.precheck(this, loadNotPending);
        if (preResult !== undefined) return preResult;
      }

      if (this.hasResourceBundle(lng, ns)) return true;
      if (!this.services.backendConnector.backend) return true;
      if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
      return false;
    }
  }, {
    key: "loadNamespaces",
    value: function loadNamespaces(ns, callback) {
      var _this7 = this;

      var deferred = defer();

      if (!this.options.ns) {
        callback && callback();
        return Promise.resolve();
      }

      if (typeof ns === 'string') ns = [ns];
      ns.forEach(function (n) {
        if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
      });
      this.loadResources(function (err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "loadLanguages",
    value: function loadLanguages(lngs, callback) {
      var deferred = defer();
      if (typeof lngs === 'string') lngs = [lngs];
      var preloaded = this.options.preload || [];
      var newLngs = lngs.filter(function (lng) {
        return preloaded.indexOf(lng) < 0;
      });

      if (!newLngs.length) {
        if (callback) callback();
        return Promise.resolve();
      }

      this.options.preload = preloaded.concat(newLngs);
      this.loadResources(function (err) {
        deferred.resolve();
        if (callback) callback(err);
      });
      return deferred;
    }
  }, {
    key: "dir",
    value: function dir(lng) {
      if (!lng) lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;
      if (!lng) return 'rtl';
      var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam'];
      return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? 'rtl' : 'ltr';
    }
  }, {
    key: "createInstance",
    value: function createInstance() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;
      return new I18n(options, callback);
    }
  }, {
    key: "cloneInstance",
    value: function cloneInstance() {
      var _this8 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

      var mergedOptions = Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.options, options, {
        isClone: true
      });

      var clone = new I18n(mergedOptions);
      var membersToCopy = ['store', 'services', 'language'];
      membersToCopy.forEach(function (m) {
        clone[m] = _this8[m];
      });
      clone.services = Object(_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__["default"])({}, this.services);
      clone.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      clone.translator = new Translator(clone.services, clone.options);
      clone.translator.on('*', function (event) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }

        clone.emit.apply(clone, [event].concat(args));
      });
      clone.init(mergedOptions, callback);
      clone.translator.options = clone.options;
      clone.translator.backendConnector.services.utils = {
        hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
      };
      return clone;
    }
  }]);

  return I18n;
}(EventEmitter);

var i18next = new I18n();

/* harmony default export */ __webpack_exports__["default"] = (i18next);


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/indexof/index.js":
/*!***************************************!*\
  !*** ./node_modules/indexof/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/jsgametools/lib/JSGameTools.js":
/*!*****************************************************!*\
  !*** ./node_modules/jsgametools/lib/JSGameTools.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e():undefined}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=22)}([function(t,e){function n(e){return t.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},n(e)}t.exports=n},function(t,e,n){var i=n(12);function r(e,n,o){return"undefined"!=typeof Reflect&&Reflect.get?t.exports=r=Reflect.get:t.exports=r=function(t,e,n){var r=i(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}},r(e,n,o||e)}t.exports=r},function(t,e){t.exports=function(t,e){var n=e.get(t);if(!n)throw new TypeError("attempted to get private field on non-instance");return n.get?n.get.call(t):n.value}},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}t.exports=function(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),t}},function(t,e,n){var i=n(13);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}},function(t,e,n){var i=n(16),r=n(3);t.exports=function(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?r(t):e}},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e){t.exports=function(t,e,n){var i=e.get(t);if(!i)throw new TypeError("attempted to set private field on non-instance");if(i.set)i.set.call(t,n);else{if(!i.writable)throw new TypeError("attempted to set read only private field");i.value=n}return n}},function(t,e,n){var i=n(12),r=n(8);function o(t,e,n,s){return(o="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(t,e,n,o){var s,a=i(t,e);if(a){if((s=Object.getOwnPropertyDescriptor(a,e)).set)return s.set.call(o,n),!0;if(!s.writable)return!1}if(s=Object.getOwnPropertyDescriptor(o,e)){if(!s.writable)return!1;s.value=n,Object.defineProperty(o,e,s)}else r(o,e,n);return!0})(t,e,n,s)}t.exports=function(t,e,n,i,r){if(!o(t,e,n,i||t)&&r)throw new Error("failed to set property");return n}},function(t,e,n){var i=n(18),r=n(19),o=n(20),s=n(21);t.exports=function(t){return i(t)||r(t)||o(t)||s()}},function(t,e,n){var i=n(0);t.exports=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=i(t)););return t}},function(t,e){function n(e,i){return t.exports=n=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},n(e,i)}t.exports=n},function(t,e){t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}},function(t,e,n){var i=n(13),r=n(17);function o(e,n,s){return r()?t.exports=o=Reflect.construct:t.exports=o=function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&i(o,n.prototype),o},o.apply(null,arguments)}t.exports=o},function(t,e){function n(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=n=function(t){return typeof t}:t.exports=n=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(e)}t.exports=n},function(t,e){t.exports=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}},function(t,e,n){var i=n(14);t.exports=function(t){if(Array.isArray(t))return i(t)}},function(t,e){t.exports=function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}},function(t,e,n){var i=n(14);t.exports=function(t,e){if(t){if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(t,e):void 0}}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},function(t,e,n){"use strict";n.r(e),n.d(e,"Constants",(function(){return i})),n.d(e,"Button",(function(){return ot})),n.d(e,"ButtonImage",(function(){return lt})),n.d(e,"ImageLoader",(function(){return ht})),n.d(e,"NotificationMessage",(function(){return At})),n.d(e,"Utils",(function(){return Y})),n.d(e,"Menu",(function(){return kt})),n.d(e,"Input",(function(){return _t})),n.d(e,"Label",(function(){return Ot})),n.d(e,"Link",(function(){return Ft})),n.d(e,"Tooltip",(function(){return Mt})),n.d(e,"Scene",(function(){return Pt})),n.d(e,"FPSMeter",(function(){return zt})),n.d(e,"ProgressBar",(function(){return Gt})),n.d(e,"Canvas",(function(){return jt})),n.d(e,"Component",(function(){return N})),n.d(e,"EasingFunctions",(function(){return qt})),n.d(e,"Col",(function(){return mt})),n.d(e,"Container",(function(){return $})),n.d(e,"Row",(function(){return it})),n.d(e,"ImageContainer",(function(){return at})),n.d(e,"Arrow",(function(){return Qt})),n.d(e,"Cross",(function(){return Ct})),n.d(e,"Scrollbar",(function(){return W})),n.d(e,"ScrollbarVertical",(function(){return K})),n.d(e,"ScrollbarHorizontal",(function(){return G})),n.d(e,"Box",(function(){return B})),n.d(e,"Style",(function(){return T})),n.d(e,"Select",(function(){return ie})),n.d(e,"SelectOption",(function(){return oe})),n.d(e,"SelectOptionsContainer",(function(){return ce})),n.d(e,"Triangle",(function(){return te})),n.d(e,"Circle",(function(){return he})),n.d(e,"Reactor",(function(){return L})),n.d(e,"Event",(function(){return R})),n.d(e,"ReactorCanvas",(function(){return Kt}));var i={Setting:{DISABLE_OPTIMIZATIONS:!1,DISABLE_EXPERIMENTAL_OPTIMIZATIONS:!0,DISABLE_CONTAINERS_CUTTING:!1,FONT_FAMILY:"sans-serif",FONT_SIZE:28,CANVAS_WIDTH:600,CANVAS_HEIGHT:400,DEFAULT_PADDING:6,DEFAULT_SPACING:6,BUTTON_DEFAULT_BACKGROUND:"rgba(0, 0, 0, 0)",BUTTON_DEFAULT_HOVER_BACKGROUND:"#95A5A6",BUTTON_DEFAULT_CLICK_BACKGROUND:"#727F80",BUTTON_DEFAULT_ALTERNATIVE_BACKGROUND:"#ACBEBF",INPUT_DEFAULT_FONT_COLOR:"#000",INPUT_DEFAULT_BACKGROUND_COLOR:"#fff",INPUT_DEFAULT_BORDER_COLOR:"#000",INPUT_DEFAULT_BORDER_COLOR_SELECTED:"#a2cdd8",INPUT_DEFAULT_SELECT_COLOR:"#2980b9",LABEL_DEFAULT_FONT_COLOR:"#000",LINK_DEFAULT_COLOR:"#0000EE",LINK_DEFAULT_HOVER_COLOR:"#4D4DFF",LINK_DEFAULT_CLICK_COLOR:"#EE7700",MENU_DEFAULT_BACKGROUND:"rgba(44, 62, 80, 0.75)",MENU_DEFAULT_BLUR_BACKGROUND:!1,NOTIFICATION_DEFAULT_BACKGROUND:"rgba(46, 204, 113, 0.5)",NOTIFICATION_DEFAULT_ANIMATION_DURATION:500,PROGRESS_DEFAULT_BACKGROUND:"#bdc3c7",PROGRESS_DEFAULT_FOREGROUND:"#27ae60",PROGRESS_DEFAULT_ANIMATION_DURATION:2e3,TOOLTIP_DEFAULT_BACKGROUND:"rgba(255, 255, 255, 0.25)",ARROW_DEFAULT_LINE_CAP:"round",ARROW_DEFAULT_COLOR:"#FF0000",ARROW_DEFAULT_LINE_SIZE:8,ARROW_DEFAULT_HEAD_SIZE:20,CROSS_DEFAULT_LINE_CAP:"round",CROSS_DEFAULT_COLOR:"#fff",CROSS_DEFAULT_LINE_SIZE:3,SCROLLBAR_DEFAULT_BACKGROUND:"rgba(149, 165, 166, 0.75)",SCROLLBAR_DEFAULT_HOVER_BACKGROUND:"rgba(149, 165, 166, 0.9)",SCROLLBAR_DEFAULT_CLICK_BACKGROUND:"rgba(149, 165, 166, 0.5)",SCROLLBAR_DEFAULT_SIZE:10,DEFAULT_BORDER_SIZE:3,DEFAULT_BORDER_COLOR_SELECTED:"#a2cdd8",DEFAULT_ANIMATION_DURATION:2e3,TRIANGLE_DEFAULT_LINE_CAP:"round",TRIANGLE_DEFAULT_COLOR:"#000",TRIANGLE_DEFAULT_FILL_COLOR:"#000",TRIANGLE_DEFAULT_LINE_SIZE:3,TRIANGLE_DEFAULT_FILL:!0,SELECT_DEFAULT_BACKGROUND:"#ecf0f1",SELECT_DEFAULT_HOVER_BACKGROUND:"#bdc3c7",SELECT_DEFAULT_CLICK_BACKGROUND:"#adb2b5",CIRCLE_DEFAULT_LINE_CAP:"round",CIRCLE_DEFAULT_COLOR:"#fff",CIRCLE_DEFAULT_FILL_COLOR:"#000",CIRCLE_DEFAULT_LINE_SIZE:3,CIRCLE_DEFAULT_FILL:!0},Key:{UP:38,RIGHT:39,BOTTOM:40,LEFT:37,ENTER:13,ECHAP:27,TAB:9},Alignement:{RIGHT:"right",LEFT:"left",CENTER:"center",DEFAULT:"default"},VerticalAlignement:{TOP:"top",CENTER:"center",BOTTOM:"bottom",DEFAULT:"default"},String:{ERROR_MESSAGE_CANVAS:"A fatal error has occurred at the JSGameTools level.",ERROR_MESSAGE_CANVAS_LABEL:":'(\nA fatal error has occurred at the JSGameTools level.",RETRY:"Retry",NOTICE_MESSAGE:"Notice:",WARNING_MESSAGE:"Warning:",ERROR_MESSAGE:"Error:",OPTIMIZATION_DISABLED:"Optimizations are disabled. You may notice low performance.",CONTAINER_CUTTING_DISABLED:"Containers cutting is disabled.",BUTTON_IMAGE_DEPRECATED:"JSGameTools.ButtonImage is deprecated. Please use a Button with an ImageContainer instead.",INPUT_FULLSCREEN:"The use of JSGameTools.Canvas is needed for Input components to properly work in fullscreen mode."}},r=n(4),o=n.n(r),s=n(5),a=n.n(s),c=n(3),l=n.n(c),h=n(1),u=n.n(h),f=n(6),d=n.n(f),p=n(7),v=n.n(p),y=n(0),g=n.n(y),m=n(8),E=n.n(m),C=n(2),S=n.n(C),A=n(9),w=n.n(A),k=new WeakMap,T=function(){function t(e){o()(this,t),k.set(this,{writable:!0,value:{}}),E()(this,"component",void 0),this.setAll(e)}return a()(t,[{key:"set",value:function(t,e){S()(this,k)[t]=e,this.component&&this.component.reactor&&this.component.reactor.dispatchEvent("onChange",this)}},{key:"setAll",value:function(t){if(t)for(var e in t)t.hasOwnProperty(e)&&this.set(e,t[e])}},{key:"copy",value:function(){return new t(S()(this,k))}},{key:"getStyles",value:function(){var t={};for(var e in S()(this,k))S()(this,k).hasOwnProperty(e)&&(t[e]=S()(this,k)[e]);return t}},{key:"fontColor",get:function(){return S()(this,k).fontColor}},{key:"fontColorHover",get:function(){return S()(this,k).fontColorHover}},{key:"fontColorDown",get:function(){return S()(this,k).fontColorDown}},{key:"fontFamily",get:function(){return null!=S()(this,k).fontFamily?S()(this,k).fontFamily:i.Setting.FONT_FAMILY}},{key:"fontSize",get:function(){return null!=S()(this,k).fontSize?S()(this,k).fontSize:i.Setting.FONT_SIZE}},{key:"bold",get:function(){return S()(this,k).bold}},{key:"underline",get:function(){return S()(this,k).underline}},{key:"wrap",get:function(){return S()(this,k).wrap}},{key:"backgroundColor",get:function(){return S()(this,k).backgroundColor}},{key:"foregroundColor",get:function(){return S()(this,k).foregroundColor}},{key:"backgroundColorHover",get:function(){return S()(this,k).backgroundColorHover}},{key:"backgroundColorDown",get:function(){return S()(this,k).backgroundColorDown}},{key:"borderColor",get:function(){return S()(this,k).borderColor}},{key:"borderColorHover",get:function(){return S()(this,k).borderColorHover}},{key:"borderColorDown",get:function(){return S()(this,k).borderColorDown}},{key:"borderColorSelected",get:function(){return null!=S()(this,k).borderColorSelected?S()(this,k).borderColorSelected:i.Setting.DEFAULT_BORDER_COLOR_SELECTED}},{key:"borderSize",get:function(){return null!=S()(this,k).borderSize?S()(this,k).borderSize:i.Setting.DEFAULT_BORDER_SIZE}},{key:"selectColor",get:function(){return S()(this,k).selectColor}},{key:"alignement",get:function(){return S()(this,k).alignement}},{key:"verticalAlignement",get:function(){return S()(this,k).verticalAlignement}},{key:"disableAnimation",get:function(){return S()(this,k).disableAnimation}},{key:"scrollXDisabled",get:function(){return S()(this,k).scrollXDisabled}},{key:"scrollYDisabled",get:function(){return S()(this,k).scrollYDisabled}},{key:"padding",get:function(){return null!=S()(this,k).padding?S()(this,k).padding:i.Setting.DEFAULT_PADDING}},{key:"spaceBetweenComponents",get:function(){return null!=S()(this,k).spaceBetweenComponents?S()(this,k).spaceBetweenComponents:i.Setting.DEFAULT_SPACING}},{key:"hidden",get:function(){return S()(this,k).hidden}},{key:"blurBackground",get:function(){return S()(this,k).blurBackground}},{key:"lineWidth",get:function(){return S()(this,k).lineWidth}},{key:"animationDuration",get:function(){return null!=S()(this,k).animationDuration?S()(this,k).animationDuration:i.Setting.DEFAULT_ANIMATION_DURATION}},{key:"foreground",get:function(){return S()(this,k).foreground}},{key:"zIndex",get:function(){return null!=S()(this,k).zIndex?S()(this,k).zIndex:0}},{key:"lineCap",get:function(){return S()(this,k).lineCap}},{key:"fill",get:function(){return S()(this,k).fill}},{key:"fillColor",get:function(){return S()(this,k).fillColor}},{key:"color",get:function(){return S()(this,k).color}},{key:"movable",get:function(){return S()(this,k).movable||!1}}]),t}(),R=function(){function t(e){o()(this,t),this.name=e,this.callbacks=[]}return a()(t,[{key:"registerCallback",value:function(t){this.callbacks.push(t)}},{key:"removeCallback",value:function(t){this.callbacks.filter((function(e){return e!=t}))}},{key:"removeAllCallbacks",value:function(){this.callbacks=[]}}]),t}(),L=function(){function t(){o()(this,t),this.events={}}return a()(t,[{key:"registerEvent",value:function(t){this.events[t]=new R(t)}},{key:"dispatchEvent",value:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];if(this.events[t]){var r=this.events[t].callbacks;r.forEach((function(t){return t&&t.apply(void 0,n)}))}}},{key:"addEventListener",value:function(t,e){this.events[t]&&this.events[t].registerCallback(e)}},{key:"removeEventListener",value:function(t,e){this.events[t]&&this.events[t].removeCallback(e)}},{key:"removeAllEventListener",value:function(t){this.events[t]&&this.events[t].removeAllCallbacks()}}]),t}(),b=new WeakMap,_=new WeakMap,I=new WeakMap,D=new WeakMap,O=new WeakMap,x=new WeakMap,F=new WeakMap,N=function(){function t(e,n,i,r,s){o()(this,t),E()(this,"selectable",!0),b.set(this,{writable:!0,value:0}),_.set(this,{writable:!0,value:0}),I.set(this,{writable:!0,value:0}),D.set(this,{writable:!0,value:0}),O.set(this,{writable:!0,value:!1}),x.set(this,{writable:!0,value:!1}),F.set(this,{writable:!0,value:void 0}),w()(this,I,e||0),w()(this,D,n||0),w()(this,b,i),w()(this,_,r),this.canvas,this.parent,this.style=s,this.reactor=new L,this.reactor.registerEvent("onClick"),this.reactor.registerEvent("onHover"),this.reactor.registerEvent("onDown"),this.reactor.registerEvent("onScroll"),this.reactor.registerEvent("onMove"),this.reactor.registerEvent("onUp"),this.reactor.registerEvent("onChange"),this.init=!1,this.hasInitEvents=!1,w()(this,x,!1),this.clicked=!1,this.hovered=!1,w()(this,O,!1),this.offsetScrollX=0,this.offsetScrollY=0,this.offsetMoveX=0,this.offsetMoveY=0,this.moveEventStartX=0,this.moveEventStartY=0,this.touchEventStartX=0,this.touchEventStartY=0,this.touchEventStartTimestamp=0,this.tooltip,this.initEvents()}return a()(t,[{key:"initEvents",value:function(){var t=this;if(!this.hasInitEvents&&null!=this.canvas){this.canvas.addEventListener("mousemove",this,(function(e,n){if(t.disabled)t.hovered=!1,t.clicked=!1,t.tooltip&&t.tooltip.disable();else{var i=t.getMousePos(e);if(t.clicked){var r=-e.movementX,o=-e.movementY;t.offsetMoveX+=r,t.offsetMoveY+=o,t.reactor&&t.reactor.dispatchEvent("onMove",r,o,i),t.moveEventStartX=i.x,t.moveEventStartY=i.y}n?(t.reactor&&!t.disabled&&t.reactor.dispatchEvent("onHover",i),t.tooltip&&(t.tooltip.x=i.x+10,t.tooltip.y=i.y+10,t.tooltip.enable()),t.hovered=!0):(t.hovered=!1,t.tooltip&&t.tooltip.disable())}})),this.canvas.addEventListener("click",this,(function(e,n){if(t.disabled)t.hovered=!1,t.clicked=!1;else{var i=t.getMousePos(e);n&&t.hovered?(t.reactor&&t.reactor.dispatchEvent("onClick",i),t.selected=!0):(t.clicked=!1,t.selected=!1)}})),this.canvas.addEventListener("mousedown",this,(function(e,n){if(t.disabled)t.hovered=!1,t.clicked=!1;else{var i=t.getMousePos(e);n&&(t.reactor&&t.reactor.dispatchEvent("onDown",i),t.clicked=!0,t.moveEventStartX=i.x,t.moveEventStartY=i.y)}})),this.canvas.addEventListener("mouseup",this,(function(e){if(!t.disabled){var n=t.getMousePos(e);t.reactor&&t.reactor.dispatchEvent("onUp",n),t.clicked=!1}})),this.canvas.addEventListener("wheel",this,(function(e){!t.hovered||t.disabled||t.scrollDisabled||(t.offsetScrollX+=e.deltaX,t.offsetScrollY+=e.deltaY,t.reactor&&t.reactor.dispatchEvent("onScroll",e.deltaX,e.deltaY))}));var e=function(e,n){var i=e.changedTouches[0],r=t.getMousePos(i);n?(t.hovered=!0,t.selected=!0):(t.hovered=!1,t.selected=!1),t.hovered&&!t.disabled&&(t.touchEventStartX=r.x,t.touchEventStartY=r.y,t.touchEventStartTimestamp=e.timestamp)};this.canvas.addEventListener("touchstart",this,e),this.canvas.addEventListener("touchend",this,e),this.canvas.addEventListener("touchmove",this,(function(e){!function(e){var n=e.changedTouches[0],i=t.getMousePos(n);if(t.hovered&&!t.disabled&&!t.scrollDisabled){var r=t.touchEventStartX-i.x,o=t.touchEventStartY-i.y;t.offsetScrollX+=r,t.offsetScrollY+=o,t.reactor&&t.reactor.dispatchEvent("onScroll",r,o,i),t.touchEventStartX=i.x,t.touchEventStartY=i.y}}(e),e.preventDefault()})),this.hasInitEvents=!0}}},{key:"draw",value:function(t){this.hidden||(this.initEvents(),this.disabled&&(this.selected=!1,this.clicked=!1,this.hovered=!1,this.tooltip&&(this.tooltip.disabled=!0)))}},{key:"getMousePos",value:function(t){return this.canvas.getMousePos(t)}},{key:"isInside",value:function(t){return t.x>this.x&&t.x<this.x+this.width&&t.y<this.y+this.height&&t.y>this.y}},{key:"disable",value:function(){this.disabled=!0}},{key:"enable",value:function(){this.disabled=!1}},{key:"setClickAction",value:function(t){this.removeAllClickActions(),this.addClickAction(t)}},{key:"addClickAction",value:function(t){this.reactor.addEventListener("onClick",t)}},{key:"removeClickAction",value:function(t){this.reactor.removeEventListener("onClick",t)}},{key:"removeAllClickActions",value:function(){this.reactor.removeAllEventListener("onClick")}},{key:"setHoverAction",value:function(t){this.removeAllHoverActions(),this.addHoverAction(t)}},{key:"addHoverAction",value:function(t){this.reactor.addEventListener("onHover",t)}},{key:"removeHoverAction",value:function(t){this.reactor.removeEventListener("onHover",t)}},{key:"removeAllHoverActions",value:function(){this.reactor.removeAllEventListener("onHover")}},{key:"setDownAction",value:function(t){this.removeAllDownActions(),this.addDownAction(t)}},{key:"addDownAction",value:function(t){this.reactor.addEventListener("onDown",t)}},{key:"removeDownAction",value:function(t){this.reactor.removeEventListener("onDown",t)}},{key:"removeAllDownActions",value:function(){this.reactor.removeAllEventListener("onDown")}},{key:"setScrollAction",value:function(t){this.removeAllScrollActions(),this.addScrollAction(t)}},{key:"addScrollAction",value:function(t){this.reactor.addEventListener("onScroll",t)}},{key:"removeScrollAction",value:function(t){this.reactor.removeEventListener("onScroll",t)}},{key:"removeAllScrollActions",value:function(){this.reactor.removeAllEventListener("onScroll")}},{key:"setMoveAction",value:function(t){this.removeAllMoveActions(),this.addMoveAction(t)}},{key:"addMoveAction",value:function(t){this.reactor.addEventListener("onMove",t)}},{key:"removeMoveAction",value:function(t){this.reactor.removeEventListener("onMove",t)}},{key:"removeAllMoveActions",value:function(){this.reactor.removeAllEventListener("onMove")}},{key:"setChangeAction",value:function(t){this.removeAllChangeActions(),this.addChangeAction(t)}},{key:"addChangeAction",value:function(t){this.reactor.addEventListener("onChange",t)}},{key:"removeChangeAction",value:function(t){this.reactor.removeEventListener("onChange",t)}},{key:"removeAllChangeActions",value:function(){this.reactor.removeAllEventListener("onChange")}},{key:"setUpAction",value:function(t){this.removeAllUpActions(),this.addUpAction(t)}},{key:"addUpAction",value:function(t){this.reactor.addEventListener("onUp",t)}},{key:"removeUpAction",value:function(t){this.reactor.removeEventListener("onUp",t)}},{key:"removeAllUpActions",value:function(){this.reactor.removeAllEventListener("onUp")}},{key:"getAllParents",value:function(){for(var t=this.parent,e=[];t;)e.push(t),t=t.parent;return e}},{key:"compareTo",value:function(t){var e=this.style&&this.style.foreground,n=t.style&&t.style.foreground,i=this.style&&this.style.zIndex,r=t.style&&t.style.zIndex;return this.parent==t?1:t.parent==this?-1:e&&!n?1:!e&&n?-1:i>r?1:i<r?-1:t.compareToComponent(this)||-this.compareToComponent(t)}},{key:"compareToComponent",value:function(t){return 0}},{key:"compareToMenu",value:function(t){return-1}},{key:"compareToTooltip",value:function(t){return-1}},{key:"compareToNotification",value:function(t){return-1}},{key:"compareToScrollbar",value:function(t){return-1}},{key:"disabled",get:function(){return S()(this,O)||this.parent&&this.parent.disabled},set:function(t){w()(this,O,t),this.reactor&&this.reactor.dispatchEvent("onChange",this)}},{key:"height",get:function(){return S()(this,_)},set:function(t){w()(this,_,t),this.reactor&&this.reactor.dispatchEvent("onChange",this)}},{key:"width",get:function(){return S()(this,b)},set:function(t){w()(this,b,t),this.reactor&&this.reactor.dispatchEvent("onChange",this)}},{key:"maxWidth",get:function(){return this.width}},{key:"maxHeight",get:function(){return this.height}},{key:"innerWidth",get:function(){return this.width}},{key:"innerHeight",get:function(){return this.height}},{key:"minWidth",get:function(){return this.width}},{key:"minHeight",get:function(){return this.height}},{key:"x",get:function(){var t=this.parent||this.canvas;if(this.style.alignement&&t){var e=t.width,n=t.style&&t.style.padding||0;if(this.style.alignement==i.Alignement.CENTER)return t.x+e/2-this.width/2;if(this.style.alignement==i.Alignement.RIGHT)return t.x+e-this.width-n;if(this.style.alignement==i.Alignement.LEFT)return t.x+n}else if(t)return t.x+S()(this,I);return S()(this,I)},set:function(t){w()(this,I,t),this.reactor&&this.reactor.dispatchEvent("onChange",this)}},{key:"y",get:function(){var t=this.parent||this.canvas;if(this.style.verticalAlignement&&t){var e=t.height,n=t.style&&t.style.padding||0;if(this.style.verticalAlignement==i.VerticalAlignement.BOTTOM)return t.y+e-this.height-n;if(this.style.verticalAlignement==i.VerticalAlignement.CENTER)return t.y+e/2-this.height/2;if(this.style.verticalAlignement==i.VerticalAlignement.TOP)return t.y+n}else if(t)return t.y+S()(this,D);return S()(this,D)},set:function(t){w()(this,D,t),this.reactor&&this.reactor.dispatchEvent("onChange",this)}},{key:"defaultStyle",get:function(){return new T({padding:i.Setting.DEFAULT_PADDING,spaceBetweenComponents:i.Setting.DEFAULT_SPACING})}},{key:"style",get:function(){return S()(this,F)||this.defaultStyle},set:function(t){w()(this,F,new T),S()(this,F).setAll(this.defaultStyle.getStyles()),t&&t instanceof T&&S()(this,F).setAll(t.getStyles()),S()(this,F).component=this,this.reactor&&this.reactor.dispatchEvent("onChange",this)}},{key:"hidden",get:function(){return this.style&&this.style.hidden||this.parent&&this.parent.hidden},set:function(t){this.disabled=t,this.style&&this.style.set("hidden",t),this.reactor&&this.reactor.dispatchEvent("onChange",this)}},{key:"selected",get:function(){return S()(this,x)},set:function(t){w()(this,x,t),this.reactor&&this.reactor.dispatchEvent("onChange",this)}}],[{key:"compareComponents",value:function(t,e){return t.compareTo(e)}}]),t}(),M=n(10),U=n.n(M);function P(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var B=function(t){d()(n,t);var e=P(n);function n(t,i,r,s,a){var c;return o()(this,n),c=e.call(this,t,i,r,s,a),E()(l()(c),"selectable",!1),c}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas.getContext("2d");e.save(),this.drawBackground(e),this.drawBorder(e),e.restore()}}},{key:"drawBackground",value:function(t){var e=this.backgroundColor;e&&(t.save(),t.fillStyle=e,t.fillRect(Math.round(this.x),Math.round(this.y),Math.round(this.width),Math.round(this.height)),t.restore())}},{key:"drawBorder",value:function(t){var e=this.borderColor;e&&this.style.borderSize>0&&(t.save(),t.strokeStyle=e,t.lineWidth=this.style.borderSize,t.strokeRect(Math.round(this.x),Math.round(this.y),Math.round(this.width-this.style.borderSize/2),Math.round(this.height-this.style.borderSize/2)),t.restore())}},{key:"backgroundColor",get:function(){return this.hovered&&this.clicked&&null!=this.style.backgroundColorDown?this.style.backgroundColorDown:this.hovered&&null!=this.style.backgroundColorHover?this.style.backgroundColorHover:this.style.backgroundColor}},{key:"borderColor",get:function(){return this.clicked&&this.hovered&&null!=this.style.borderColorDown?this.style.borderColorDown:!this.clicked&&this.hovered&&null!=this.style.borderColorHover?this.style.borderColorHover:this.selectable&&this.selected&&null!=this.style.borderColorSelected?this.style.borderColorSelected:this.style.borderColor}}]),n}(N);function z(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var W=function(t){d()(n,t);var e=z(n);function n(t,r,s){var a;return o()(this,n),a=e.call(this,null,null,null,null,r),E()(l()(a),"selectable",!0),a.parent=s,a.size=t||i.Setting.SCROLLBAR_DEFAULT_SIZE,a}return a()(n,[{key:"draw",value:function(t){this.hidden||(this.clicked&&(this.hovered=!0),u()(g()(n.prototype),"draw",this).call(this,t))}},{key:"compareToComponent",value:function(t){return t.compareToScrollbar(this)}},{key:"compareToScrollbar",value:function(t){return 0}},{key:"maxWidthParent",get:function(){return this.parent?this.parent.maxWidth-Math.abs(Math.min(0,this.parent.x)):0}},{key:"maxHeightParent",get:function(){return this.parent?this.parent.maxHeight-Math.abs(Math.min(0,this.parent.y)):0}},{key:"innerWidthParent",get:function(){return this.parent?this.parent.innerWidth-Math.abs(Math.min(0,this.parent.x)):0}},{key:"innerHeightParent",get:function(){return this.parent?this.parent.innerHeight-Math.abs(Math.min(0,this.parent.y)):0}},{key:"maxWidth",get:function(){return this.width}},{key:"maxHeight",get:function(){return this.height}},{key:"contentRatioX",get:function(){return this.parent?this.maxWidthParent/this.innerWidthParent:0}},{key:"contentRatioY",get:function(){return this.parent?this.maxHeightParent/this.innerHeightParent:0}},{key:"width",get:function(){return this.maxWidthParent*this.contentRatioX}},{key:"height",get:function(){return this.maxHeightParent*this.contentRatioY}},{key:"windowScrollSizeX",get:function(){return this.innerWidthParent-this.maxWidthParent}},{key:"windowScrollSizeY",get:function(){return this.innerHeightParent-this.maxHeightParent}},{key:"percentScrollbarX",get:function(){return this.parent?this.parent.offsetScrollX/this.windowScrollSizeX:0}},{key:"percentScrollbarY",get:function(){return this.parent?this.parent.offsetScrollY/this.windowScrollSizeY:0}},{key:"scrollAreaSizeX",get:function(){return this.maxWidthParent-this.width}},{key:"scrollAreaSizeY",get:function(){return this.maxHeightParent-this.height}},{key:"x",get:function(){return this.parent?Math.abs(this.parent.x)+this.scrollAreaSizeX*this.percentScrollbarX:0}},{key:"y",get:function(){return this.parent?Math.abs(this.parent.y)+this.scrollAreaSizeY*this.percentScrollbarY:0}},{key:"defaultStyle",get:function(){return new T({backgroundColor:i.Setting.SCROLLBAR_DEFAULT_BACKGROUND,backgroundColorHover:i.Setting.SCROLLBAR_DEFAULT_HOVER_BACKGROUND,backgroundColorDown:i.Setting.SCROLLBAR_DEFAULT_CLICK_BACKGROUND,borderSize:0})}}]),n}(B);function H(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var G=function(t){d()(n,t);var e=H(n);function n(t,i,r){var s;return o()(this,n),s=e.call(this,t,i,r),E()(l()(s),"selectable",!0),s.addMoveAction((function(t){s.parent&&(s.parent.offsetScrollX-=t,s.parent.reactor&&s.parent.reactor.dispatchEvent("onScroll",-t,0))})),s}return a()(n,[{key:"draw",value:function(t){this.scrollAreaSizeX>0&&u()(g()(n.prototype),"draw",this).call(this,t)}},{key:"height",get:function(){return this.size}},{key:"y",get:function(){return this.parent?this.parent.y+this.parent.height-this.size:null}}]),n}(W);function X(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var K=function(t){d()(n,t);var e=X(n);function n(t,i,r){var s;return o()(this,n),s=e.call(this,t,i,r),E()(l()(s),"selectable",!0),s.addMoveAction((function(t,e){s.parent&&(s.parent.offsetScrollY-=e,s.parent.reactor&&s.parent.reactor.dispatchEvent("onScroll",0,-e))})),s}return a()(n,[{key:"draw",value:function(t){this.scrollAreaSizeY>0&&u()(g()(n.prototype),"draw",this).call(this,t)}},{key:"width",get:function(){return this.size}},{key:"x",get:function(){return this.parent?this.parent.x+this.parent.width-this.size:0}}]),n}(W),Y={preRenderedFont:{},lastKey:-1,preRenderFont:function(t,e,n,i){t.push("?"),t.push(" "),t.push("A");for(var r=0;r<t.length;r++){var o=document.createElement("canvas"),s=o.getContext("2d");s.font=e+"px "+i;var a=s.measureText(t[r]).width;o.width=a,o.height=e+e/6,s.font=e+"px "+i,s.fillStyle=n,s.textBaseline="top",s.fillText(t[r],0,0),this.preRenderedFont[t[r]]=o}},drawImage:function(t,e,n,i,r,o,s,a,c,l,h,u){this.drawImageWrapper(t,e,n,i,r,o,s,a,c,l,h,u)},drawImageData:function(t,e,n,i,r,o,s,a,c,l,h,u){this.drawImageWrapper(t,e,n,i,r,o,s,a,c,l,h,u)},drawImageWrapper:function(t,e,n,i,r,o,s,a,c,l,h,u){n=null==n||isNaN(n)?null:Math.round(n),i=null==i||isNaN(i)?null:Math.round(i),r=null==r||isNaN(r)?null:Math.round(r),o=null==o||isNaN(o)?null:Math.round(o),s=null==s||isNaN(s)?null:Math.round(s),a=null==a||isNaN(a)?null:Math.round(a),c=null==c||isNaN(c)?null:Math.round(c),l=null==l||isNaN(l)?null:Math.round(l),h=null!=h&&h,null!=(u=null==u||isNaN(u)?null:u)&&(t.save(),t.translate(n+r/2,i+o/2),t.rotate(u*Math.PI/180),n=-r/2,i=-o/2),h&&t.clearRect(n,i,r,o),null!=t&&null!=e&&(null!=s&&null!=a&&null!=c&&null!=l?t.drawImage(e,s,a,c,l,n,i,r,o):t.drawImage(e,n,i,r,o)),null!=u&&t.restore()},drawText:function(t,e,n,r,o,s,a,c,l,h,u,f,d,p){if(t){t.save(),Array.isArray(n)||(t.fillStyle=n,t.strokeStyle=n),t.font=(u?"bold ":"")+r+"px "+o,t.textBaseline=d||"bottom",t.filter="none",h&&(e=this.wrapTextLines(t,e).text);var v=e.split("\n"),y=0,g=Math.round(c),m=Math.round(l)+r,E=0;l||(a==i.VerticalAlignement.CENTER?m+=Math.round((p&&p.height?p.height:t.canvas.height)/2-r*v.length/2):a==i.VerticalAlignement.BOTTOM&&(m+=Math.round((p&&p.height?p.height:t.canvas.height)-r*v.length/2-r/5)));for(var C=0;C<v.length;C++){var S=v[C],A=t.measureText(S).width;if(Array.isArray(n)){var w=C;w>n.length-1&&(w=n.length-1),t.fillStyle=n[w],t.strokeStyle=n[w]}s==i.Alignement.CENTER?g=Math.round(p&&p.x?p.x:0)+Math.round((p&&p.width?p.width:t.canvas.width)/2-t.measureText(S).width/2):s==i.Alignement.RIGHT&&(g=Math.round(p&&p.x?p.x:0)+Math.round((p&&p.width?p.width:t.canvas.width)-t.measureText(S).width-(p&&p.spaceBetweenComponents?p.spaceBetweenComponents:i.Setting.DEFAULT_SPACING))),t.fillText(S,g,m),f&&(t.lineWidth=1,t.beginPath(),t.moveTo(g,m-2),t.lineTo(Math.round(g+A),m-2),t.stroke()),A>y&&(y=A),0==C&&(E=m),m+=r}return t.restore(),{x:g,y:E,height:r*v.length,width:y}}},wrapText:function(t,e){if(t.length>e){for(var n=e;n>0&&" "!=t[n];n--);if(n>0){var i=t.substring(0,n),r=t.substring(n+1);return i+"\n"+this.wrapText(r,e)}}return t},wrapTextLines:function(t,e,n,i,r,o){if(t&&e){t.save(),t.font=Math.round(i)+"px "+r,t.imageSmoothingEnabled=!1;for(var s=e.split("\n"),a="",c=n||t.measureText("A").width,l=Math.round(t.canvas.width/c),h=0,u=0,f=0;f<s.length;f++){var d=o?s[f]:this.wrapText(s[f],l);a+=d,f<s.length-1&&(a+="\n");for(var p=0;p<d.split("\n").length;p++){var v=t.measureText(d.split("\n")[p]).width;h+=i,v>u&&(u=v)}}return t.restore(),{text:a,height:h,width:u,carWidth:c}}return{text:"",height:0,width:0,carWidth:0}},drawArrow:function(t,e,n,r,o,s,a,c,l){t.save(),t.lineCap=l||i.Setting.ARROW_DEFAULT_LINE_CAP,t.lineWidth=s||i.Setting.ARROW_DEFAULT_LINE_SIZE,t.strokeStyle=c||i.Setting.ARROW_DEFAULT_COLOR,t.filter="",t.beginPath();var h=a||i.Setting.ARROW_DEFAULT_HEAD_SIZE,u=r-e,f=o-n,d=Math.atan2(f,u);t.moveTo(e,n),t.lineTo(r,o),t.moveTo(r,o),t.lineTo(r-h*Math.cos(d-Math.PI/6),o-h*Math.sin(d-Math.PI/6)),t.moveTo(r,o),t.lineTo(r-h*Math.cos(d+Math.PI/6),o-h*Math.sin(d+Math.PI/6)),t.stroke(),t.restore()},drawCross:function(t,e,n,r,o,s,a,c){t.save(),t.lineCap=c||i.Setting.CROSS_DEFAULT_LINE_CAP,t.lineWidth=s||i.Setting.CROSS_DEFAULT_LINE_SIZE,t.strokeStyle=a||i.Setting.CROSS_DEFAULT_COLOR,t.filter="",t.beginPath(),t.moveTo(e,n),t.lineTo(e+r,n+o),t.moveTo(e+r,n),t.lineTo(e,n+o),t.stroke(),t.restore()},drawTriangle:function(t,e,n,r,o,s,a,c){var l=arguments.length>8&&void 0!==arguments[8]?arguments[8]:i.Setting.TRIANGLE_DEFAULT_FILL,h=arguments.length>9?arguments[9]:void 0;t.save(),t.lineCap=c||i.Setting.TRIANGLE_DEFAULT_LINE_CAP,t.lineWidth=s||i.Setting.TRIANGLE_DEFAULT_LINE_SIZE,t.filter="",l?(t.fillStyle=h||i.Setting.TRIANGLE_DEFAULT_FILL_COLOR,t.strokeStyle=a||i.Setting.TRIANGLE_DEFAULT_COLOR):t.strokeStyle=a||i.Setting.TRIANGLE_DEFAULT_COLOR,t.beginPath(),t.moveTo(e,n),t.lineTo(e+r,n),t.lineTo(e+r/2,n+o),t.lineTo(e,n),l?(t.fill(),t.stroke()):t.stroke(),t.restore()},drawCircle:function(t,e,n,r,o,s,a){var c=arguments.length>7&&void 0!==arguments[7]?arguments[7]:i.Setting.CIRCLE_DEFAULT_FILL,l=arguments.length>8?arguments[8]:void 0;t.save(),t.lineCap=a||i.Setting.CIRCLE_DEFAULT_LINE_CAP,t.lineWidth=o||i.Setting.CIRCLE_DEFAULT_LINE_SIZE,t.filter="",c?(t.fillStyle=l||i.Setting.CIRCLE_DEFAULT_FILL_COLOR,t.strokeStyle=s||i.Setting.CIRCLE_DEFAULT_COLOR):t.strokeStyle=s||i.Setting.CIRCLE_DEFAULT_COLOR,t.beginPath(),t.arc(e+r/2,n+r/2,r/2,0,2*Math.PI,!1),c?(t.fill(),t.stroke()):t.stroke(),t.restore()},clear:function(t){t.clearRect(0,0,t.canvas.width,t.canvas.height)},isFilterHueAvailable:function(){var t=document.createElement("canvas");t.width=5,t.height=5;var e=t.getContext("2d");e.save(),e.fillStyle="#FF0000",e.filter="hue-rotate(90deg)",e.fillRect(0,0,5,5);var n=e.getImageData(0,0,1,1).data;return e.restore(),255!=n[0]||0!=n[1]||0!=n[2]},blurCanvas:function(t,e){t.save(),t.filter="blur("+e+"px)",this.drawImageData(t,t.canvas,0,0,t.canvas.width,t.canvas.height),t.restore()},getFontSize:function(t){return Math.floor(parseInt(t.font.match(/\d+/),10)/1.25)},autoResizeCanvas:function(t,e,n){if(document.fullscreenElement)document.fullscreenElement==t?(t.width=window.innerWidth,t.height=window.innerHeight):(t.width=e,t.height=n);else if(e>=.85*document.documentElement.clientWidth){var i=e/n;t.width=.85*document.documentElement.clientWidth,t.height=t.width/i}else t.width=e,t.height=n},enableAutoResizeCanvas:function(t,e,n){var i=this;t&&"true"!=t.getAttribute("autoresize-canvas-event")&&(this.autoResizeCanvas(t,e,n),window.addEventListener("resize",(function(){t.setAttribute("autoresize-canvas-event","true"),i.autoResizeCanvas(t,e,n)})))},autoResizeCanvasFullscreen:function(t,e){document.fullscreenElement==(e||t)&&(t.width=window.innerWidth,t.height=window.innerHeight,e&&(e.width=window.innerWidth,e.height=window.innerHeight))},enableAutoResizeCanvasFullscreen:function(t,e){var n=this;t&&"true"!=t.getAttribute("autoresizefullscreen-canvas-event")&&(this.autoResizeCanvasFullscreen(t,e),window.addEventListener("resize",(function(){t.setAttribute("autoresizefullscreen-canvas-event","true"),n.autoResizeCanvasFullscreen(t,e)})))},autoResizeCanvasFullpage:function(t,e){t&&"true"==t.getAttribute("fullpage-canvas-enable")&&(t.width=window.innerWidth,t.height=window.innerHeight,e&&(e.width=window.innerWidth,e.height=window.innerHeight,e.style.margin=0,e.style.padding=0),document.body.style.margin=0,document.body.style.padding=0)},enableAutoResizeCanvasFullpage:function(t,e){var n=this;t&&"true"!=t.getAttribute("autoresizefullpage-canvas-event")&&(this.autoResizeCanvasFullpage(t,e),window.addEventListener("resize",(function(){t.setAttribute("autoresizefullpage-canvas-event","true"),n.autoResizeCanvasFullpage(t,e)})))},toggleFullscreen:function(t,e){if(t){var n=t.width,i=t.height;if(e&&(e.width=n,e.height=i),document.fullscreenElement?document.exitFullscreen&&document.exitFullscreen():(e||t).requestFullscreen?(e||t).requestFullscreen():(e||t).mozRequestFullScreen?(e||t).mozRequestFullScreen():(e||t).webkitRequestFullscreen?(e||t).webkitRequestFullscreen():(e||t).msRequestFullscreen?(e||t).msRequestFullscreen():(e||t).oRequestFullscreen&&(e||t).oRequestFullscreen(),this.enableAutoResizeCanvasFullscreen(t,e),"true"!=t.getAttribute("fullscreenchange-canvas-event")){t.setAttribute("fullscreenchange-canvas-event","true");var r=function(){document.fullscreenElement!=(e||t)&&(t.width=n,t.height=i,e&&(e.width=n,e.height=i))};void 0!==document.onfullscreenchange?document.onfullscreenchange=r:void 0!==document.onmsfullscreenchange?document.onmsfullscreenchange=r:void 0!==document.onmozfullscreenchange?document.onmozfullscreenchange=r:void 0!==document.onwebkitfullscreenchange?document.onwebkitfullscreenchange=r:void 0!==document.onokitfullscreenchange&&(document.onofullscreenchange=r)}}},toggleFullpage:function(t,e){if(t){var n=t.width,i=t.height;e&&(e.width=n,e.height=i),t.getAttribute("fullpage-canvas-enable")&&"false"!=t.getAttribute("fullpage-canvas-enable")?t.setAttribute("fullpage-canvas-enable","false"):t.setAttribute("fullpage-canvas-enable","true"),this.enableAutoResizeCanvasFullpage(t,e)}},getMousePos:function(t,e){var n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}};function V(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var Z=new WeakMap,j=new WeakMap,q=new WeakMap,J=new WeakMap,Q=new WeakMap,$=function(t){d()(n,t);var e=V(n);function n(t,r,s,a,c){var h,u;o()(this,n),u=e.call(this,t,r,null,null,c),E()(l()(u),"selectable",!1),Z.set(l()(u),{writable:!0,value:[]}),j.set(l()(u),{writable:!0,value:0}),q.set(l()(u),{writable:!0,value:0}),J.set(l()(u),{writable:!0,value:0}),Q.set(l()(u),{writable:!0,value:0}),E()(l()(u),"eventChangeCallback",(function(){return u.reactor.dispatchEvent("onChange",l()(u))}));for(var f=arguments.length,d=new Array(f>5?f-5:0),p=5;p<f;p++)d[p-5]=arguments[p];return(h=u).addAll.apply(h,d),u.canvasTmp=document.createElement("canvas"),w()(l()(u),j,s),w()(l()(u),q,a),u.scrollbarHorizontal=new G(null,null,l()(u)),u.scrollbarVertical=new K(null,null,l()(u)),u.addScrollAction((function(t,e){return u.controlScrolling(t,e)})),i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS||u.addChangeAction((function(t){t==u.parent&&u.components.forEach((function(t){return t&&t.reactor.dispatchEvent("onChange",l()(u))}))})),u}return a()(n,[{key:"draw",value:function(t){var e=this;if(!this.hidden){var i=t.canvas,r=i.getContext("2d");r.save(),this.isCutting&&(this.canvasTmp.width=i.width,this.canvasTmp.height=i.height,Y.clear(this.canvasTmp.getContext("2d"))),this.components.forEach((function(t){e.canvas&&(t.canvas=e.canvas)})),this.controlScrolling(0,0),u()(g()(n.prototype),"draw",this).call(this,t),r.restore()}}},{key:"drawVerticalScrollBar",value:function(t){this.scrollbarVertical&&(this.scrollbarVertical.canvas=this.canvas,this.scrollbarVertical.draw(t))}},{key:"drawHorizontalScrollBar",value:function(t){this.scrollbarHorizontal&&(this.scrollbarHorizontal.canvas=this.canvas,this.scrollbarHorizontal.draw(t))}},{key:"drawScrollbars",value:function(t){this.style.scrollXDisabled||this.drawHorizontalScrollBar(t),this.style.scrollYDisabled||this.drawVerticalScrollBar(t)}},{key:"set",value:function(){this.clear(),this.addAll.apply(this,arguments),this.enable()}},{key:"add",value:function(t){S()(this,Z).push(t),t.parent=this,this.canvas&&(t.canvas=this.canvas),t.addChangeAction(this.eventChangeCallback),this.reactor.dispatchEvent("onChange",this)}},{key:"addAll",value:function(){for(var t=this,e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];n.forEach((function(e){return t.add(e)}))}},{key:"remove",value:function(t){-1!=S()(this,Z).indexOf(t)&&t.removeChangeAction(this.eventChangeCallback),w()(this,Z,S()(this,Z).filter((function(e){return t!=e}))),this.reactor.dispatchEvent("onChange",this)}},{key:"clear",value:function(){var t=this;S()(this,Z).forEach((function(e){return t.remove(e)})),this.reactor.dispatchEvent("onChange",this)}},{key:"getComponentsTree",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this,n={component:e,childs:[]};return e.allComponents&&e.allComponents.forEach((function(e){return n.childs.push(t.getComponentsTree(e))})),n}},{key:"disable",value:function(){u()(g()(n.prototype),"disable",this).call(this),S()(this,Z).forEach((function(t){return t&&t.disable&&t.disable()})),this.reactor.dispatchEvent("onChange",this)}},{key:"enable",value:function(){u()(g()(n.prototype),"enable",this).call(this),S()(this,Z).forEach((function(t){return t&&t.enable&&t.enable()})),this.reactor.dispatchEvent("onChange",this)}},{key:"updateInnerHeight",value:function(){}},{key:"updateInnerWidth",value:function(){}},{key:"getComponentId",value:function(t){var e=null;return S()(this,Z).forEach((function(n,i){n==t&&(e=i)})),e}},{key:"controlScrolling",value:function(t,e){if(this.style.scrollYDisabled)this.offsetScrollY-=e;else if(this.scrollAreaSizeY<=0)this.offsetScrollY=0;else{var n=this.offsetScrollY/this.scrollAreaSizeY;n<=0&&e<=0?this.offsetScrollY=Math.min(0,this.y):n>1&&e>=0&&(this.offsetScrollY=this.scrollAreaSizeY)}if(this.style.scrollXDisabled)this.offsetScrollX-=t;else if(this.scrollAreaSizeX<=0)this.offsetScrollX=0;else{var i=this.offsetScrollX/this.scrollAreaSizeX;i<=0&&t<=0?this.offsetScrollX=Math.min(0,this.x):i>1&&t>=0&&(this.offsetScrollX=this.scrollAreaSizeX)}}},{key:"isComponentVisible",value:function(t){if(i.Setting.DISABLE_OPTIMIZATIONS)return!0;if(t instanceof N&&!t.hidden){var e=this.width,n=this.height,r=t.width,o=t.height,s=this.canvas&&this.canvas.width||e,a=this.canvas&&this.canvas.height||n;if(t.x+r>=this.x&&t.x<=this.x+e&&t.y+o>=this.y&&t.y<=this.y+n&&t.x+r>=0&&t.x<=s&&t.y+o>=0&&t.y<=a)return!0}return!1}},{key:"components",get:function(){var t=[];return S()(this,Z).forEach((function(e){return t.push(e)})),t}},{key:"allComponents",get:function(){var t=this.components;return t.push(this.scrollbarHorizontal),t.push(this.scrollbarVertical),t}},{key:"width",get:function(){var t=this.parent&&this.parent.width,e=this.maxWidth?Math.min(this.maxWidth,t):null;return this.minWidth?Math.max(this.minWidth,e||t):t}},{key:"height",get:function(){var t=this.parent&&this.parent.height,e=this.maxWidth?Math.min(this.maxHeight,t):null;return this.minHeight?Math.max(this.minHeight,e||t):t}},{key:"maxWidth",get:function(){return S()(this,j)},set:function(t){w()(this,j,t),this.reactor.dispatchEvent("onChange",this)}},{key:"maxHeight",get:function(){return S()(this,q)},set:function(t){w()(this,q,t),this.reactor.dispatchEvent("onChange",this)}},{key:"minWidth",get:function(){return S()(this,J)},set:function(t){w()(this,J,t),this.reactor.dispatchEvent("onChange",this)}},{key:"minHeight",get:function(){return S()(this,Q)},set:function(t){w()(this,Q,t),this.reactor.dispatchEvent("onChange",this)}},{key:"canvas",set:function(t){U()(g()(n.prototype),"canvas",t,this,!0),S()(this,Z).forEach((function(e){e.canvas=t}))},get:function(){return u()(g()(n.prototype),"canvas",this)}},{key:"scrollAreaSizeX",get:function(){return this.innerWidth-this.width}},{key:"scrollAreaSizeY",get:function(){return this.innerHeight-this.height}},{key:"isCutting",get:function(){return!i.Setting.DISABLE_CONTAINERS_CUTTING&&(this.maxWidth&&this.innerWidth>this.maxWidth||this.maxHeight&&this.innerHeight>this.maxHeight)&&null!=this.canvasTmp}},{key:"defaultStyle",get:function(){return new T({padding:0,spaceBetweenComponents:i.Setting.DEFAULT_SPACING})}}],[{key:"sortComponentsTree",value:function(t,e){return t.component.compareTo(e.component)}}]),n}(B);function tt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var et=new WeakMap,nt=new WeakMap,it=function(t){d()(n,t);var e=tt(n);function n(t,r,s,a,c){var h;o()(this,n);for(var u=arguments.length,f=new Array(u>5?u-5:0),d=5;d<u;d++)f[d-5]=arguments[d];return h=e.call.apply(e,[this,t,r,s,a,c].concat(f)),E()(l()(h),"selectable",!1),et.set(l()(h),{writable:!0,value:0}),nt.set(l()(h),{writable:!0,value:0}),i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS||(h.updateInnerWidth(),h.updateInnerHeight(),h.addChangeAction((function(){h.updateInnerWidth(),h.updateInnerHeight()}))),h}return a()(n,[{key:"draw",value:function(t){var e=this;if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var i=t.canvas.getContext("2d");i.save();var r=i;if(this.isCutting&&(r=this.canvasTmp.getContext("2d")),null!=u()(g()(n.prototype),"components",this)){var o=this.style.padding;u()(g()(n.prototype),"components",this).forEach((function(t){o=e.drawComponent(t,o,r)}))}this.isCutting&&Y.drawImageData(i,this.canvasTmp,this.x,this.y,this.width,this.height,this.x,this.y,this.width,this.height),u()(g()(n.prototype),"drawScrollbars",this).call(this,i),i.restore()}}},{key:"drawComponent",value:function(t,e,n){return t instanceof N&&(t.x=e-this.offsetScrollX,t.y=this.style.padding-this.offsetScrollY,this.isComponentVisible(t)?(t.enable(),t.draw(n)):t.disable(),e+=t.width+this.style.spaceBetweenComponents),e}},{key:"updateInnerHeight",value:function(){var t=0;u()(g()(n.prototype),"components",this).forEach((function(e){e.height>t&&(t=e.height)})),w()(this,et,t+this.style.padding)}},{key:"updateInnerWidth",value:function(){var t=0;u()(g()(n.prototype),"components",this).forEach((function(e){return t+=e.width})),w()(this,nt,t+this.style.spaceBetweenComponents*(u()(g()(n.prototype),"components",this).length-1)+this.style.padding)}},{key:"innerHeight",get:function(){return i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS&&this.updateInnerHeight(),S()(this,et)}},{key:"innerWidth",get:function(){return i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS&&this.updateInnerWidth(),S()(this,nt)}},{key:"width",get:function(){var t=this.innerWidth||this.parent&&this.parent.width,e=this.maxWidth?Math.min(this.maxWidth,t):null;return this.minWidth?Math.max(this.minWidth,e||t):e||t}},{key:"height",get:function(){var t=this.innerHeight||this.parent&&this.parent.height,e=this.maxHeight?Math.min(this.maxHeight,t):null;return this.minHeight?Math.max(this.minHeight,e||t):e||t}},{key:"defaultStyle",get:function(){return u()(g()(n.prototype),"defaultStyle",this)}}]),n}($);function rt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var ot=function(t){d()(n,t);var e=rt(n);function n(t,i,r,s,a){var c;o()(this,n);for(var h=arguments.length,u=new Array(h>5?h-5:0),f=5;f<h;f++)u[f-5]=arguments[f];return c=e.call.apply(e,[this,t,i,r,s,a].concat(u)),E()(l()(c),"selectable",!0),c}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas.getContext("2d");e.save(),this.drawComponents(e),e.restore()}}},{key:"drawComponents",value:function(t){u()(g()(n.prototype),"draw",this).call(this,t)}},{key:"height",get:function(){return(this.maxHeight||u()(g()(n.prototype),"height",this))+this.style.padding}},{key:"width",get:function(){return(this.maxWidth||u()(g()(n.prototype),"width",this))+this.style.padding}},{key:"defaultStyle",get:function(){return new T({backgroundColor:i.Setting.BUTTON_DEFAULT_BACKGROUND,backgroundColorHover:i.Setting.BUTTON_DEFAULT_HOVER_BACKGROUND,backgroundColorDown:i.Setting.BUTTON_DEFAULT_CLICK_BACKGROUND,scrollXDisabled:!0,scrollYDisabled:!0})}}]),n}(it);function st(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var at=function(t){d()(n,t);var e=st(n);function n(t,i,r,s,a,c,h){var u;return o()(this,n),u=e.call(this,i,r,s,a,c),E()(l()(u),"selectable",!1),u.image,u.imgSrc,u.imageLoader=h,t instanceof Image?(u.image=t,u.imgSrc=t.src):u.imgSrc=t,u}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas.getContext("2d");e.save(),null!=this.imgSrc&&null!=this.imageLoader&&this.loadImage(this.imageLoader),null!=this.image&&this.drawImage(e),e.restore()}}},{key:"drawImage",value:function(t){Y.drawImage(t,this.image,Math.round(this.x),Math.round(this.y),Math.round(this.width),Math.round(this.height))}},{key:"loadImage",value:function(t){this.image=t.get(this.imgSrc)}},{key:"sizes",get:function(){var t=u()(g()(n.prototype),"width",this),e=u()(g()(n.prototype),"height",this);if(this.image&&(this.image.width>u()(g()(n.prototype),"width",this)||this.image.height>u()(g()(n.prototype),"height",this))){var i=this.image.width/this.image.height;t=Math.floor(u()(g()(n.prototype),"width",this)/1.25),e=Math.floor(t/i)}return{width:t,height:e}}},{key:"height",get:function(){return this.sizes.height},set:function(t){U()(g()(n.prototype),"height",t,this,!0)}},{key:"width",get:function(){return this.sizes.width},set:function(t){U()(g()(n.prototype),"width",t,this,!0)}}]),n}(N);function ct(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var lt=function(t){d()(n,t);var e=ct(n);function n(t,r,s,a,c,l,h,u,f,d){var p;o()(this,n);var v=new T({alignement:a,verticalAlignement:c,backgroundColor:u||i.Setting.BUTTON_DEFAULT_BACKGROUND,backgroundColorHover:f||i.Setting.BUTTON_DEFAULT_HOVER_BACKGROUND});return(p=e.call(this,r,s,l,h,v)).image=new at(t,r,s,l,h,new T({alignement:"center",verticalAlignement:"center"}),d),p.add(p.image),console&&console.warn&&console.warn(i.String.NOTICE_MESSAGE+" "+i.String.BUTTON_IMAGE_DEPRECATED),p}return a()(n,[{key:"loadImage",value:function(t){this.components[0]instanceof at&&this.components[0].loadImage(t)}},{key:"minWidth",set:function(t){this.image.width=t,U()(g()(n.prototype),"minWidth",t,this,!0)},get:function(){return u()(g()(n.prototype),"minWidth",this)}},{key:"minHeight",set:function(t){this.image.height=t,U()(g()(n.prototype),"minHeight",t,this,!0)},get:function(){return u()(g()(n.prototype),"minHeight",this)}},{key:"maxWidth",set:function(t){this.image.width=t,U()(g()(n.prototype),"maxWidth",t,this,!0)},get:function(){return u()(g()(n.prototype),"maxWidth",this)}},{key:"maxHeight",set:function(t){this.image.height=t,U()(g()(n.prototype),"maxHeight",t,this,!0)},get:function(){return u()(g()(n.prototype),"maxHeight",this)}},{key:"width",set:function(t){this.minWidth=t,this.maxWidth=t},get:function(){return u()(g()(n.prototype),"width",this)}},{key:"height",set:function(t){this.minHeight=t,this.maxHeight=t},get:function(){return u()(g()(n.prototype),"height",this)}}]),n}(ot),ht=function(){function t(){o()(this,t),this.images={},this.imagesResized={},this.triedLoading=0,this.hasError=!1,this.nbImagesToLoad=1,this.firstImage=!0}return a()(t,[{key:"load",value:function(t,e){var n=this;if(this.firstImage&&(this.nbImagesToLoad=t.length,this.firstImage=!1),!(t.length>0))return e();this.loadImage(t[0],(function(i){if(1!=i)return n.hasError=!0,e();t.shift(),n.load(t,e)}))}},{key:"loadImage",value:function(t,e){var n=this;this.triedLoading++;var i=new Image;i.src=t,i.onload=function(){return null==n.images?e(!1):(n.images[t]=i,n.triedLoading=0,e(!0))},i.onerror=function(){if(n.triedLoading>=5)return null!=n.images&&(n.images[t]=i),n.triedLoading=0,e(!1);setTimeout((function(){n.loadImage(t,e)}),250)}}},{key:"get",value:function(t,e,n){if(null!=this.images&&this.images.hasOwnProperty(t)){var i=this.images[t];if(!e&&!n||i.width==e&&i.height==n)return i;var r=Math.round(e),o=Math.round(n),s=t+"@"+r+"-"+o;if(!this.imagesResized.hasOwnProperty(s)){var a=document.createElement("canvas"),c=a.getContext("2d");a.width=r,a.height=o,Y.drawImage(c,i,0,0,r,o,0,0,i.width,i.height),this.imagesResized[s]=a}return this.imagesResized[s]}return null}},{key:"clear",value:function(){this.images=null}}]),t}(),ut=n(15),ft=n.n(ut),dt=n(11),pt=n.n(dt);function vt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var yt=new WeakMap,gt=new WeakMap,mt=function(t){d()(n,t);var e=vt(n);function n(t,r,s,a,c){var h;o()(this,n);for(var u=arguments.length,f=new Array(u>5?u-5:0),d=5;d<u;d++)f[d-5]=arguments[d];return h=e.call.apply(e,[this,t,r,s,a,c].concat(f)),E()(l()(h),"selectable",!1),yt.set(l()(h),{writable:!0,value:0}),gt.set(l()(h),{writable:!0,value:0}),i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS||(h.updateInnerWidth(),h.updateInnerHeight(),h.addChangeAction((function(){h.updateInnerWidth(),h.updateInnerHeight()}))),h}return a()(n,[{key:"draw",value:function(t){var e=this;if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var i=t.canvas.getContext("2d");i.save();var r=i;if(this.isCutting&&(r=this.canvasTmp.getContext("2d")),null!=u()(g()(n.prototype),"components",this)){var o=this.style.padding;u()(g()(n.prototype),"components",this).forEach((function(t){o=e.drawComponent(t,o,r)}))}this.isCutting&&Y.drawImageData(i,this.canvasTmp,this.x,this.y,this.width,this.height,this.x,this.y,this.width,this.height),u()(g()(n.prototype),"drawScrollbars",this).call(this,i),i.restore()}}},{key:"drawComponent",value:function(t,e,n){return t instanceof N&&(t.x=this.style.padding-this.offsetScrollX,t.y=e-this.offsetScrollY,this.isComponentVisible(t)?(t.enable(),t.draw(n)):t.disable(),e+=t.height+this.style.spaceBetweenComponents),e}},{key:"updateInnerHeight",value:function(){var t=0;u()(g()(n.prototype),"components",this).forEach((function(e){return t+=e.height})),w()(this,yt,t+this.style.spaceBetweenComponents*(u()(g()(n.prototype),"components",this).length-1)+this.style.padding)}},{key:"updateInnerWidth",value:function(){var t=0;u()(g()(n.prototype),"components",this).forEach((function(e){e.width>t&&(t=e.width)})),w()(this,gt,t+this.style.padding)}},{key:"innerHeight",get:function(){return i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS&&this.updateInnerHeight(),S()(this,yt)}},{key:"innerWidth",get:function(){return i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS&&this.updateInnerWidth(),S()(this,gt)}},{key:"width",get:function(){var t=this.innerWidth||this.parent&&this.parent.width,e=this.maxWidth?Math.min(this.maxWidth,t):null;return this.minWidth?Math.max(this.minWidth,e||t):e||t}},{key:"height",get:function(){var t=this.innerHeight||this.parent&&this.parent.height,e=this.maxHeight?Math.min(this.maxHeight,t):null;return this.minHeight?Math.max(this.minHeight,e||t):e||t}},{key:"defaultStyle",get:function(){return u()(g()(n.prototype),"defaultStyle",this)}}]),n}($);function Et(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var Ct=function(t){d()(n,t);var e=Et(n);function n(t,i,r,s,a){var c;return o()(this,n),c=e.call(this,t,i,r,s,a),E()(l()(c),"selectable",!1),c}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas.getContext("2d");Y.drawCross(e,this.x,this.y,this.width,this.height,this.style.lineWidth,this.style.color,this.style.lineCap),this.init=!0}}},{key:"width",get:function(){return u()(g()(n.prototype),"width",this)+this.style.lineWidth},set:function(t){U()(g()(n.prototype),"width",t,this,!0),this.reactor.dispatchEvent("onChange",this)}},{key:"height",get:function(){return u()(g()(n.prototype),"height",this)+this.style.lineWidth},set:function(t){U()(g()(n.prototype),"height",t,this,!0),this.reactor.dispatchEvent("onChange",this)}},{key:"defaultStyle",get:function(){return new T({lineWidth:i.Setting.CROSS_DEFAULT_LINE_SIZE,color:i.Setting.CROSS_DEFAULT_COLOR,lineCap:i.Setting.CROSS_DEFAULT_LINE_CAP})}}]),n}(N);function St(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var At=function(t){d()(n,t);var e=St(n);function n(t,r,s){var a;o()(this,n);for(var c=arguments.length,h=new Array(c>3?c-3:0),u=3;u<c;u++)h[u-3]=arguments[u];return a=e.call.apply(e,[this,0,0,null,null,t].concat(h)),E()(l()(a),"selectable",!1),a.delayBeforeClosing=null==r?5:r,a.timeLastFrame=0,a.animationTime=0,a.closed=!0,a.closing=!1,a.easingFunction=s,a.closeButton=new ot(null,null,null,null,new T({alignement:i.Alignement.RIGHT,verticalAlignement:i.VerticalAlignement.TOP,padding:10}),new Ct(null,null,10,10)),a.add(a.closeButton),a}return a()(n,[{key:"draw",value:function(t){var e=this;if(!this.hidden){this.closeButton.canvas=this.canvas;var n=t.canvas.getContext("2d");n.save(),this.init||(this.timeLastFrame=performance.now()),null!=this.closeButton&&this.closeButton.setClickAction((function(){e.close()}));var i=performance.now()-this.timeLastFrame;this.timeLastFrame=performance.now(),this.animationTime>=1e3*this.delayBeforeClosing&&!this.closing&&!this.closed&&this.close(),this.closing?this.style.disableAnimation?this.animationTime=-1:this.animationTime-=i:this.animationTime+=i,this.animationTime<0&&(this.closed=!0,this.closing=!1),this.closed?this.disableCloseButton():(this.drawComponents(n),null!=this.closeButton&&(this.closeButton.y=this.y+this.style.padding/2,this.closeButton.draw(n)),this.enableCloseButton()),n.restore(),this.init=!0}}},{key:"drawComponents",value:function(t){u()(g()(n.prototype),"draw",this).call(this,t)}},{key:"close",value:function(){this.disableCloseButton(),this.closing||(this.closing=!0,this.animationTime=this.style.animationDuration)}},{key:"open",value:function(){this.timeLastFrame=0,this.animationTime=0,this.init=!1,this.closed=!1,this.closing=!1}},{key:"disableCloseButton",value:function(){null!=this.closeButton&&null!=this.closeButton&&this.closeButton instanceof ot&&this.closeButton.disable()}},{key:"enableCloseButton",value:function(){null!=this.closeButton&&null!=this.closeButton&&this.closeButton instanceof ot&&this.closeButton.enable()}},{key:"copy",value:function(){return ft()(n,[this.style.copy(),this.delayBeforeClosing,this.easingFunction].concat(pt()(this.components)))}},{key:"compareToComponent",value:function(t){return t.compareToNotification(this)}},{key:"compareToTooltip",value:function(t){return-1}},{key:"compareToNotification",value:function(t){return 0}},{key:"compareToMenu",value:function(t){return-1}},{key:"offsetY",get:function(){var t=1;return this.style.disableAnimation||(t=this.animationTime/this.style.animationDuration,this.easingFunction&&(t=this.easingFunction(t))),t}},{key:"y",get:function(){var t=this.offsetY;return this.style.verticalAlignement==i.VerticalAlignement.TOP?this.height*(t<=1?t:1)-this.height:this.canvas.scene.height-this.height*(t<=1?t:1)},set:function(t){U()(g()(n.prototype),"y",t,this,!0)}},{key:"width",get:function(){return this.canvas&&this.canvas.scene?this.canvas.scene.width:null}},{key:"height",get:function(){return u()(g()(n.prototype),"height",this)-(this.closeButton?this.closeButton.height:0)}},{key:"defaultStyle",get:function(){return new T({alignement:i.Alignement.CENTER,backgroundColor:i.Setting.NOTIFICATION_DEFAULT_BACKGROUND,animationDuration:i.Setting.NOTIFICATION_DEFAULT_ANIMATION_DURATION})}},{key:"hidden",get:function(){return u()(g()(n.prototype),"hidden",this)||this.closed},set:function(t){U()(g()(n.prototype),"hidden",t,this,!0),t?this.forceClose():this.open()}}]),n}(mt);function wt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var kt=function(t){d()(n,t);var e=wt(n);function n(t){var i;o()(this,n);for(var r=arguments.length,s=new Array(r>1?r-1:0),a=1;a<r;a++)s[a-1]=arguments[a];return i=e.call.apply(e,[this,0,0,null,null,t].concat(s)),E()(l()(i),"selectable",!1),i.lastKey=null==i.lastKey?-1:i.lastKey,i.selectedComponent=null==i.selectedComponent?0:i.selectedComponent,i.disable(),i}return a()(n,[{key:"draw",value:function(t){var e=this;if(!this.hidden){var n=t.canvas.getContext("2d");this.style.blurBackground&&this.drawBlur(n),n.save(),this.drawComponents(n),this.init||(document.addEventListener("keydown",(function(t){e.disabled||(e.lastKey=t.keyCode,e.lastKey!=i.Key.UP&&e.lastKey!=i.Key.BOTTOM||t.preventDefault())})),this.init=!0);var r=!1;null!=this.components&&(this.lastKey==i.Key.UP?(this.select(this.selectedComponent-1),r=!0):this.lastKey==i.Key.BOTTOM?(this.select(this.selectedComponent+1),r=!0):this.lastKey==i.Key.ECHAP?(this.disable(),r=!0):this.components.forEach((function(t,n){t.selected&&e.select(n)})),this.components.forEach((function(t,n){if(t instanceof N){if(r)if(e.selectedComponent==n){if(t.selectable&&(t.selected=!0),!e.isComponentVisible(t)){var o=t.height,s=e.maxHeight-e.offsetScrollY-(t.y+o);e.offsetScrollY=-s,e.controlScrolling(null,-s)}}else t.selected=!1;if(e.selectedComponent==n&&e.lastKey==i.Key.ENTER&&t.reactor&&!t.disabled)return e.lastKey=-1,e.selectedComponent=0,void t.reactor.dispatchEvent("onClick")}}))),n.restore(),this.lastKey=-1}}},{key:"drawComponents",value:function(t){u()(g()(n.prototype),"draw",this).call(this,t)}},{key:"drawBlur",value:function(t){Y.blurCanvas(t,5)}},{key:"drawBackground",value:function(t){t.fillStyle=this.style.backgroundColor,t.fillRect(this.parent?this.parent.x:0,this.parent?this.parent.y:0,this.maxWidth,this.maxHeight)}},{key:"disable",value:function(){u()(g()(n.prototype),"disable",this).call(this),this.components.forEach((function(t){return t&&t.disable&&t.disable()}))}},{key:"enable",value:function(){u()(g()(n.prototype),"enable",this).call(this),this.components.forEach((function(t){return t&&t.enable&&t.enable()}))}},{key:"select",value:function(t){if(this.selectedComponent=t,!(this.components.filter((function(t){return t.selectable})).length<=0)&&(this.selectedComponent>=this.components.length?this.selectedComponent=0:this.selectedComponent<0&&(this.selectedComponent=this.components.length-1),this.components[this.selectedComponent]&&!this.components[this.selectedComponent].selectable)){if(this.lastKey==i.Key.UP)return this.select(this.selectedComponent-1);if(this.lastKey==i.Key.BOTTOM)return this.select(this.selectedComponent+1)}}},{key:"compareToComponent",value:function(t){return t.compareToMenu(this)}},{key:"compareToMenu",value:function(t){return 0}},{key:"compareToTooltip",value:function(t){return-1}},{key:"compareToNotification",value:function(t){return 1}},{key:"isInside",value:function(t){return!this.hidden}},{key:"scrollAreaSizeX",get:function(){return this.innerWidth-this.maxWidth}},{key:"scrollAreaSizeY",get:function(){return this.innerHeight-this.maxHeight}},{key:"maxHeight",get:function(){return u()(g()(n.prototype),"maxHeight",this)||this.canvas&&this.canvas.scene&&this.canvas.scene.height}},{key:"maxWidth",get:function(){return this.canvas&&this.canvas.scene&&this.canvas.scene.width}},{key:"minWidth",get:function(){return this.parent?this.parent.width:0}},{key:"defaultStyle",get:function(){return new T({blurBackground:i.Setting.MENU_DEFAULT_BLUR_BACKGROUND,backgroundColor:i.Setting.MENU_DEFAULT_BACKGROUND,verticalAlignement:i.VerticalAlignement.CENTER,scrollXDisabled:!0})}},{key:"hidden",get:function(){return u()(g()(n.prototype),"hidden",this)||this.disabled},set:function(t){U()(g()(n.prototype),"hidden",t,this,!0),this.disabled=t}}]),n}(mt);function Tt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var Rt=new WeakMap,Lt=new WeakMap,bt=new WeakMap,_t=function(t){d()(n,t);var e=Tt(n);function n(t,i,r,s,a,c){var h;o()(this,n),h=e.call(this,t,i,r,s,a),E()(l()(h),"selectable",!0),Rt.set(l()(h),{writable:!0,value:0}),Lt.set(l()(h),{writable:!0,value:0}),bt.set(l()(h),{writable:!0,value:0}),h.text=c||"",w()(l()(h),Rt,0),w()(l()(h),bt,0),w()(l()(h),Lt,0),h.lastInputText=!1,h.offsetX=0,h.lastTime=0,h.totalTime=0,h.clickCurrentPosition=null,h.textCache=null,h.input=document.createElement("input"),h.input.setAttribute("type","text"),h.input.style.position="absolute",h.input.style.left="-9999px",h.input.tabIndex=-1,h.input.value=h.text,h.input.addEventListener("blur",(function(){return h.selected=!1})),h.input.addEventListener("focus",(function(){return h.selected=!0})),h.input.addEventListener("input",(function(){h.totalTime=0,h.lastInputText=!0,h.positionStart=h.input.selectionStart,h.positionEnd=h.input.selectionEnd})),document.body.appendChild(h.input),h.appendToCanvas=!1,h.noticeLogged=!1,h.canvasTmp=document.createElement("canvas");var u=function(t,e,n){if(n){var i=h.getLetterClicked(n);null!=i&&(i>h.positionStartClick?h.setSelectionRange(h.positionStartClick,i,"forward"):i<h.positionStartClick&&h.setSelectionRange(i,h.positionStartClick,"backward"))}};return h.addDownAction((function(t){var e=h.getLetterClicked(t);null!=e&&(h.positionStartClick=e,h.setSelectionRange(e,e,"forward")),h.totalTime=0})),h.addClickAction((function(){return h.click()})),h.addMoveAction(u),h.addScrollAction(u),h}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas,r=e.getContext("2d");r.save(),this.input.selectionEnd!=this.positionEnd&&(this.totalTime=0),this.canvas&&this.canvas.container&&!this.appendToCanvas?(document.body.removeChild(this.input),this.canvas.container.appendChild(this.input),this.appendToCanvas=!0):this.canvas||this.noticeLogged||(console&&console.warn&&console.warn(i.String.WARNING_MESSAGE+" "+i.String.INPUT_FULLSCREEN),this.noticeLogged=!0),this.selected&&!this.disabled?this.click():this.blur(),this.text=this.input.value,this.positionStart=this.input.selectionStart,this.positionEnd=this.input.selectionEnd;var o=performance.now(),s=0;this.lastTime>0&&(s=o-this.lastTime),this.lastTime=o,this.totalTime+=s,this.drawBackground(r),this.drawBorder(r),this.canvasTmp.width=e.width,this.canvasTmp.height=e.height;var a=this.canvasTmp.getContext("2d");Y.clear(a),this.updateTextCache(this.x+5),this.autoScroll(),this.drawText(a,this.x+5),Y.drawImageData(r,this.canvasTmp,this.x+this.style.borderSize,this.y+this.style.borderSize,this.width-2*this.style.borderSize,this.height-2*this.style.borderSize,this.x+this.style.borderSize,this.y+this.style.borderSize,this.width-2*this.style.borderSize,this.height-2*this.style.borderSize),(this.hovered||this.clicked)&&(this.canvas&&this.canvas.canvas?this.canvas.canvas.style.cursor="text":e.style.cursor="default"),this.selected||(this.totalTime=0),r.restore()}}},{key:"drawText",value:function(t,e){for(var n=-1;n<this.text.length;n++){if(n>-1){var i=this.textCache.letters[n].sizes,r=e-this.offsetX,o=this.y+this.style.borderSize;this.isLetterVisible(n)&&(this.positionStart!=this.positionEnd&&n>=this.positionStart&&n<this.positionEnd&&this.drawHighlight(t,e,i),Y.drawText(t,this.text[n],this.style.fontColor,this.style.fontSize,this.style.fontFamily,"default","default",r,o,!1)),e+=i.width+this.style.spaceBetweenComponents}this.positionEnd==n+1&&this.selected&&(this.totalTime<=500?this.drawCursor(t,e):this.totalTime>1e3&&(this.totalTime=0))}return e}},{key:"drawCursor",value:function(t,e){t.strokeStyle=this.style.borderColor,t.lineWidth=1,t.beginPath(),t.moveTo(e-this.offsetX,this.y+3),t.lineTo(e-this.offsetX,this.y+this.style.fontSize),t.stroke()}},{key:"drawHighlight",value:function(t,e,n){t.fillStyle=this.style.selectColor,t.fillRect(e-this.offsetX,this.y+this.style.borderSize,n.width+2,this.height-2*this.style.borderSize-1)}},{key:"updateTextCache",value:function(t){var e=this.canvas?this.canvas.getContext("2d"):null,n=this.canvas&&this.canvas.scene||this.canvas||e&&e.canvas;if(e&&(i.Setting.DISABLE_OPTIMIZATIONS||!this.textCache||this.textCache.fontSize!=this.style.fontSize||this.textCache.fontFamily!=this.style.fontFamily||this.text!=this.textCache.text||n&&n.width!=this.textCache.parentWidth)){this.textCache={fontSize:this.style.fontSize,fontFamily:this.style.fontFamily,text:this.text,parentWidth:n.width,letters:[]};for(var r=0;r<this.text.length;r++){var o=Y.wrapTextLines(e,this.text[r],this.width,this.style.fontSize,this.style.fontFamily,!0);this.textCache.letters[r]={text:this.text[r],currentX:t,sizes:o},t+=o.width+this.style.spaceBetweenComponents}}}},{key:"isClickCurrentPosition",value:function(t,e,n){return t.x+this.offsetX<=e+n.width+this.style.spaceBetweenComponents&&t.x+this.offsetX>=e}},{key:"isClickAfterPosition",value:function(t,e,n){return t.x+this.offsetX>=e+n.width+this.style.spaceBetweenComponents}},{key:"getLetterClicked",value:function(t){if(this.textCache)for(var e=0;e<this.text.length;e++){var n=this.textCache.letters[e];if(this.isClickCurrentPosition(t,Math.round(n.currentX),n.sizes))return e;if(e>=this.text.length-1&&this.isClickAfterPosition(t,Math.round(n.currentX),n.sizes))return e+1}}},{key:"isLetterVisible",value:function(t){if(this.textCache){var e=this.textCache.letters[t];if(e){var n=e.currentX-this.offsetX;if(n>=this.x-e.sizes.width&&n<=this.x+this.width)return!0}}return!1}},{key:"autoScroll",value:function(){if(this.textCache){var t=this.cursorPosition,e=t.currentLetter?t.currentLetter.sizes.width:0,n=t.x+e+this.style.spaceBetweenComponents,i=t.x-e-this.style.spaceBetweenComponents,r=Math.max(0,Math.round(n-this.x-this.width+this.style.borderSize+2*this.style.spaceBetweenComponents)),o=Math.max(0,Math.round(i-this.x-this.style.borderSize-2*this.style.spaceBetweenComponents));if(this.offsetX<0&&(this.offsetX=0),n-this.offsetX>=this.x+this.width-this.style.borderSize)return this.offsetX=r,r;if(i-this.offsetX<=this.x+this.style.borderSize)return this.offsetX=o,o}return!1}},{key:"click",value:function(){this.input.focus()}},{key:"blur",value:function(){this.input.blur()}},{key:"setSelectionRange",value:function(t,e,n){this.input.setSelectionRange(t,e,n),this.positionStart=t,this.positionEnd=e}},{key:"cursorPosition",get:function(){if(this.textCache){var t=this.positionEnd-1;if(this.positionEnd!=this.positionStart&&this.positionEnd==this.positionStartClick&&this.positionStart<this.positionStartClick&&(t=this.positionStart-1),t<0)return{currentLetter:this.textCache.letters[0],x:this.x+this.style.borderSize};var e=this.textCache.letters[t];if(e)return{currentLetter:e,x:e.currentX}}}},{key:"positionStart",get:function(){return S()(this,Rt)},set:function(t){this.input.selectionStart=t,w()(this,Rt,t)}},{key:"positionStartClick",get:function(){return S()(this,Lt)},set:function(t){w()(this,Lt,t)}},{key:"positionEnd",get:function(){return S()(this,bt)},set:function(t){this.input.selectionEnd=t,w()(this,bt,t)}},{key:"height",get:function(){var t=this.style&&this.style.borderSize?this.style.borderSize:0;return u()(g()(n.prototype),"height",this)?u()(g()(n.prototype),"height",this):this.style.fontSize+2*t}},{key:"defaultStyle",get:function(){return new T({fontSize:Math.floor(i.Setting.FONT_SIZE/1.25),fontFamily:i.Setting.FONT_FAMILY,fontColor:i.Setting.INPUT_DEFAULT_FONT_COLOR,backgroundColor:i.Setting.INPUT_DEFAULT_BACKGROUND_COLOR,borderColor:i.Setting.INPUT_DEFAULT_BORDER_COLOR,borderColorSelected:i.Setting.INPUT_DEFAULT_BORDER_COLOR_SELECTED,selectColor:i.Setting.INPUT_DEFAULT_SELECT_COLOR,spaceBetweenComponents:1})}}]),n}(B);function It(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var Dt=new WeakMap,Ot=function(t){d()(n,t);var e=It(n);function n(t,r,s,a){var c;return o()(this,n),c=e.call(this,r,s,null,null,a),E()(l()(c),"selectable",!1),Dt.set(l()(c),{writable:!0,value:""}),c.text=t,c.sizesCache=null,i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS||(c.updateSizes(),c.addChangeAction((function(t){c.updateSizes(),t!=c.parent&&c.parent&&c.parent.reactor&&c.parent.reactor.dispatchEvent("onChange",l()(c))}))),c}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas.getContext("2d");e.save(),Y.drawText(e,this.text,this.style.fontColor,this.style.fontSize,this.style.fontFamily,this.style.alignement,this.style.verticalAlignement,this.x,this.y,this.style.wrap,this.style.bold,this.style.underline,null,this.parent),e.restore()}}},{key:"updateSizes",value:function(){var t=this.canvas?this.canvas.getContext("2d"):null,e=this.canvas&&this.canvas.scene||this.canvas||t&&t.canvas;if(t&&(i.Setting.DISABLE_OPTIMIZATIONS||!this.sizesCache||this.sizesCache.fontSize!=this.style.fontSize||this.sizesCache.fontFamily!=this.style.fontFamily||this.sizesCache.wrap!=this.style.wrap||this.text!=this.sizesCache.text||e&&e.width!=this.sizesCache.parentWidth||null==this.sizesCache.value)){var n=Y.wrapTextLines(t,this.text,null,this.style.fontSize,this.style.fontFamily,!this.style.wrap);e&&(this.sizesCache={fontSize:this.style.fontSize,fontFamily:this.style.fontFamily,wrap:this.style.wrap,text:this.text,parentWidth:e.width,value:n})}return this.sizesCache&&this.sizesCache.value}},{key:"text",set:function(t){w()(this,Dt,t),this.reactor.dispatchEvent("onChange",this)},get:function(){return S()(this,Dt)}},{key:"sizes",get:function(){return i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS&&this.updateSizes(),this.sizesCache&&this.sizesCache.value}},{key:"height",get:function(){var t=this.sizes;return t&&t.height}},{key:"width",get:function(){var t=this.sizes;return t&&t.width}},{key:"defaultStyle",get:function(){return new T({fontSize:i.Setting.FONT_SIZE,fontFamily:i.Setting.FONT_FAMILY,fontColor:i.Setting.LABEL_DEFAULT_FONT_COLOR,wrap:!0,bold:!1,underline:!1})}}]),n}(N);function xt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var Ft=function(t){d()(n,t);var e=xt(n);function n(t,i,r,s){var a;return o()(this,n),a=e.call(this,t,i,r,s),E()(l()(a),"selectable",!0),a.initialColor=a.style.fontColor,a.initialUnderline=a.style.underline,a}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas;this.clicked?(this.style.set("underline",!1),this.style.set("fontColor",this.style.fontColorDown),e.style.cursor="pointer"):this.hovered||this.selected?(this.style.set("underline",!1),this.style.set("fontColor",this.style.fontColorHover),this.hovered&&(e.style.cursor="pointer")):(this.style.set("underline",this.initialUnderline),this.style.set("fontColor",this.initialColor)),this.init=!0}}},{key:"defaultStyle",get:function(){return new T({fontSize:i.Setting.FONT_SIZE,fontFamily:i.Setting.FONT_FAMILY,fontColor:i.Setting.LINK_DEFAULT_COLOR,fontColorHover:i.Setting.LINK_DEFAULT_HOVER_COLOR,fontColorDown:i.Setting.LINK_DEFAULT_CLICK_COLOR,wrap:!0,bold:!1,underline:!0})}}]),n}(Ot);function Nt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var Mt=function(t){d()(n,t);var e=Nt(n);function n(t){var i;o()(this,n);for(var r=arguments.length,s=new Array(r>1?r-1:0),a=1;a<r;a++)s[a-1]=arguments[a];return i=e.call.apply(e,[this,null,null,null,null,t].concat(s)),E()(l()(i),"selectable",!1),i.disabled=!0,i}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){var e=t.canvas.getContext("2d");e.save(),this.x+this.width+this.style.padding>this.parent.width&&(this.x-=this.width+this.style.padding),this.y+this.height+this.style.padding>this.parent.height&&(this.y-=this.height+this.style.padding),u()(g()(n.prototype),"draw",this).call(this,e),e.restore()}}},{key:"compareToComponent",value:function(t){return t.compareToTooltip(this)}},{key:"compareToMenu",value:function(t){return 1}},{key:"compareToTooltip",value:function(t){return 0}},{key:"compareToNotification",value:function(t){return 1}},{key:"width",get:function(){return u()(g()(n.prototype),"width",this)+this.style.padding},set:function(t){U()(g()(n.prototype),"width",t,this,!0)}},{key:"height",get:function(){return u()(g()(n.prototype),"height",this)+this.style.padding},set:function(t){U()(g()(n.prototype),"height",t,this,!0)}},{key:"defaultStyle",get:function(){return new T({backgroundColor:i.Setting.TOOLTIP_DEFAULT_BACKGROUND})}},{key:"hidden",get:function(){return u()(g()(n.prototype),"hidden",this)||this.disabled},set:function(t){U()(g()(n.prototype),"hidden",t,this,!0),this.disabled=t}}]),n}(mt);function Ut(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var Pt=function(t){d()(n,t);var e=Ut(n);function n(){var t,i;return o()(this,n),i=e.call(this),E()(l()(i),"selectable",!1),E()(l()(i),"enableEvents",!1),(t=i).addAll.apply(t,arguments),i}return a()(n,[{key:"draw",value:function(t){var e=this;if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var i=t.canvas,r=i.getContext("2d");r.save(),i.style.cursor="default";var o=r;(this.maxWidth||this.maxHeight)&&(o=this.canvasTmp.getContext("2d"));var s=u()(g()(n.prototype),"components",this).filter((function(t){return t&&t instanceof _t}));s&&s.forEach((function(t){return t.canvas=e.canvas})),this.drawComponents(o),(this.maxWidth||this.maxHeight)&&Y.drawImageData(r,this.canvasTmp,this.x,this.y,this.width,this.height,this.x,this.y,this.width,this.height),u()(g()(n.prototype),"drawScrollbars",this).call(this,r),r.restore()}}},{key:"drawComponents",value:function(t){this.components.sort(n.compareComponents).forEach((function(e){return e.draw(t)}))}},{key:"defaultStyle",get:function(){return new T({padding:i.Setting.DEFAULT_PADDING})}}]),n}($);function Bt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var zt=function(t){d()(n,t);var e=Bt(n);function n(t,i,r,s){var a;return o()(this,n),a=e.call(this,null,i,r,s),E()(l()(a),"selectable",!1),a.displayFrames=t||!1,a.frames=0,a.lastFrame=0,a.currentFPS=0,a.intervalCountFPS=setInterval((function(){return a.countFPS()}),1e3),a}return a()(n,[{key:"draw",value:function(t){this.hidden||(this.text="FPS: "+this.currentFPS+(this.displayFrames?" / Frames: "+this.frames:""),u()(g()(n.prototype),"draw",this).call(this,t),this.frames++)}},{key:"countFPS",value:function(){this.lastFrame>0&&(this.currentFPS=this.frames-this.lastFrame),this.lastFrame=this.frames}}]),n}(Ot);function Wt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var Ht=new WeakMap,Gt=function(t){d()(n,t);var e=Wt(n);function n(t,i,r,s,a,c,h){var u;return o()(this,n),u=e.call(this,t,i,r,s,a),Ht.set(l()(u),{writable:!0,value:0}),E()(l()(u),"selectable",!1),u.percent=null==c?0:c,w()(l()(u),Ht,u.percent),u.easingFunction=h,u.lastTime=0,u.totalTime=0,u}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas.getContext("2d");e.save();var i=performance.now(),r=0;S()(this,Ht)==this.percent||this.style.disableAnimation?(this.totalTime=0,this.lastTime=0):(this.lastTime>0&&(r=i-this.lastTime),this.totalTime+=r,this.totalTime>=this.style.animationDuration?(w()(this,Ht,this.percent),this.totalTime=0,this.lastTime=0):this.lastTime=i),this.drawBackground(e),this.drawForeground(e,this.widthForeground),e.restore()}}},{key:"drawForeground",value:function(t,e){t.save(),t.fillStyle=this.style.foregroundColor,t.fillRect(this.x,this.y,e,this.height),t.restore()}},{key:"animationPercent",get:function(){var t=S()(this,Ht)==this.percent||this.style.disableAnimation?1:this.totalTime/this.style.animationDuration;return this.easingFunction&&(t=this.easingFunction(t)),t}},{key:"widthForeground",get:function(){return Math.max(0,Math.min(this.width,this.width*(S()(this,Ht)+(this.percent-S()(this,Ht))*this.animationPercent)))}},{key:"defaultStyle",get:function(){return new T({backgroundColor:i.Setting.PROGRESS_DEFAULT_BACKGROUND,foregroundColor:i.Setting.PROGRESS_DEFAULT_FOREGROUND,animationDuration:i.Setting.PROGRESS_DEFAULT_ANIMATION_DURATION})}}]),n}(B);function Xt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var Kt=function(t){d()(n,t);var e=Xt(n);function n(){return o()(this,n),e.apply(this,arguments)}return a()(n,[{key:"registerEvent",value:function(t){this.events[t]||(this.events[t]=[])}},{key:"dispatchEvent",value:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];if(this.events[t]){var r=this.events[t];r.forEach((function(t){return t&&t.callback&&t.callback.apply(t,n)}))}}},{key:"dispatchEventComponent",value:function(t,e){for(var n=arguments.length,i=new Array(n>2?n-2:0),r=2;r<n;r++)i[r-2]=arguments[r];if(this.events[t]){var o=this.events[t];o.forEach((function(t){return t&&t.callback&&t.component==e&&t.callback.apply(t,i)}))}}},{key:"addEventListener",value:function(t,e,n){this.events[t]&&this.events[t].push({component:e,callback:n})}},{key:"removeEventListener",value:function(t,e){this.events[t]&&this.events[t].filter((function(t){return t&&t.callback!=e}))}},{key:"removeEventListenerComponent",value:function(t,e){this.events[t]&&this.events[t].filter((function(t){return t&&t.component!=e}))}},{key:"removeAllEventListener",value:function(){this.events=[]}}]),n}(L),Yt=new WeakMap,Vt=new WeakMap,Zt=new WeakMap,jt=function(){function t(e,n,r,s,a,c){var l=this;o()(this,t),Yt.set(this,{writable:!0,value:void 0}),Vt.set(this,{writable:!0,value:void 0}),Zt.set(this,{writable:!0,value:void 0}),this.canvas=n||document.createElement("canvas"),this.container=document.createElement("div"),this.width=r||i.Setting.CANVAS_WIDTH,this.height=s||i.Setting.CANVAS_HEIGHT,this.scene=e,this.container.appendChild(this.canvas),this.started=!1,this.init=!1,this.maxFPS=c||-1,w()(this,Yt,0),this.hasError=!1;var h=new ot(null,null,null,null,new T({alignement:"center",backgroundColor:i.Setting.BUTTON_DEFAULT_ALTERNATIVE_BACKGROUND}),new Ot(i.String.RETRY,null,null,new T({fontColor:"white",alignement:"center"}))),u=new kt(new T({spaceBetweenComponents:15}),new Ot(i.String.ERROR_MESSAGE_CANVAS_LABEL,null,null,new T({fontColor:"white",alignement:"center"})),h);u.enable(),this.sceneError=new Pt(u),this.scenePrevious=this.scene,h.addClickAction((function(){l.hasError=!1,l.scene=l.scenePrevious})),this.reactor=new Kt,this.reactor.registerEvent("mousemove"),this.reactor.registerEvent("click"),this.reactor.registerEvent("mousedown"),this.reactor.registerEvent("mouseup"),this.reactor.registerEvent("wheel"),this.reactor.registerEvent("touchstart"),this.reactor.registerEvent("touchend"),this.reactor.registerEvent("touchmove"),a&&this.autoResize(),this.createEvents(),i.Setting.DISABLE_OPTIMIZATIONS&&console&&console.info(i.String.NOTICE_MESSAGE+" "+i.String.OPTIMIZATION_DISABLED),i.Setting.DISABLE_CONTAINERS_CUTTING&&console&&console.info(i.String.NOTICE_MESSAGE+" "+i.String.CONTAINER_CUTTING_DISABLED)}return a()(t,[{key:"draw",value:function(){var t=this.canvas.getContext("2d");this.drawClear(t),this.drawScene(t)}},{key:"drawScene",value:function(t){if(this.scene){this.scene.parent=this,this.scene.canvas=this;try{this.scene.draw(t)}catch(t){this.hasError=!0,this.scene=this.sceneError,console.error(i.String.ERROR_MESSAGE+" "+i.String.ERROR_MESSAGE_CANVAS+"\n",t)}}}},{key:"drawClear",value:function(t){Y.clear(t)}},{key:"startDraw",value:function(t){var e=this;this.started=!0,requestAnimationFrame((function(n){if(e.started){var i=n-S()(e,Yt);(e.maxFPS<1||i>1e3/e.maxFPS)&&(w()(e,Yt,n),e.draw()),e.startDraw(t),t&&t()}}))}},{key:"stopDraw",value:function(){this.started=!1}},{key:"appendTo",value:function(t){t.appendChild(this.container)}},{key:"remove",value:function(t){t.removeChild(this.container),this.container.removeChild(this.canvas)}},{key:"toggleFullscreen",value:function(){Y.toggleFullscreen(this.canvas,this.container)}},{key:"toggleFullpage",value:function(){Y.toggleFullpage(this.canvas,this.container)}},{key:"autoResize",value:function(){Y.enableAutoResizeCanvas(this.canvas,this.width,this.height)}},{key:"getContext",value:function(t){return this.canvas?this.canvas.getContext(t||"2d"):null}},{key:"createEvents",value:function(){var t=this;!this.init&&this.canvas&&(["mousemove","click","mousedown","mouseup","wheel"].forEach((function(e){t.canvas.addEventListener(e,(function(n){var i=t.getMousePos(n);t.doEvents(n,e,i),n.preventDefault()}),!1)})),["touchstart","touchmove","touchend"].forEach((function(e){t.canvas.addEventListener(e,(function(n){var i=n.changedTouches[0],r=t.getMousePos(i);t.doEvents(n,e,r)}))})),this.init=!0)}},{key:"doEvents",value:function(t,e,n){var i=this,r=this.getComponentsAtPosition(n);this.reactor.dispatchEvent(e,t,!1),pt()(r).reverse().forEach((function(n){return i.reactor.dispatchEventComponent(e,n,t,!0)}))}},{key:"addEventListener",value:function(t,e,n){this.reactor.addEventListener(t,e,n)}},{key:"getMousePos",value:function(t){return Y.getMousePos(this.canvas,t)}},{key:"getAllComponents",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.scene;return this.scene.getAllComponents(t)}},{key:"getComponentsAtPosition",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.scene,i=this.scene.getComponentsTree(n),r=[n];return i.childs&&i.childs.sort(Pt.sortComponentsTree).reverse().some((function(n){if(n.component.isInside(t)&&!n.component.hidden&&!n.component.disabled)return r.push.apply(r,pt()(e.getComponentsAtPosition(t,n.component))),!0})),r}},{key:"x",get:function(){return 0}},{key:"y",get:function(){return 0}},{key:"width",get:function(){return this.canvas?this.canvas.width:S()(this,Vt)},set:function(t){w()(this,Vt,t),this.canvas.width=t,this.scene&&this.scene.reactor.dispatchEvent("onChange",this)}},{key:"height",get:function(){return this.canvas?this.canvas.height:S()(this,Zt)},set:function(t){w()(this,Zt,t),this.canvas.height=t,this.scene&&this.scene.reactor.dispatchEvent("onChange",this)}}]),t}(),qt={easeInCubic:function(t){return t*t*t},easeOutBounce:function(t){var e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutCubic:function(t){return t<.5?4*t*t*t:1-Math.pow(-2*t+2,3)/2},easeInOutSine:function(t){return-(Math.cos(Math.PI*t)-1)/2},easeInOutQuint:function(t){return t<.5?16*t*t*t*t*t:1-Math.pow(-2*t+2,5)/2},easeInOutCirc:function(t){return t<.5?(1-Math.sqrt(1-Math.pow(2*t,2)))/2:(Math.sqrt(1-Math.pow(-2*t+2,2))+1)/2},easeInOutQuad:function(t){return t<.5?2*t*t:1-Math.pow(-2*t+2,2)/2},easeInOutQuart:function(t){return t<.5?8*t*t*t*t:1-Math.pow(-2*t+2,4)/2},easeInOutExpo:function(t){return 0===t?0:1===t?1:t<.5?Math.pow(2,20*t-10)/2:(2-Math.pow(2,-20*t+10))/2},easeInOutBack:function(t){var e=2.5949095;return t<.5?Math.pow(2*t,2)*(7.189819*t-e)/2:(Math.pow(2*t-2,2)*((e+1)*(2*t-2)+e)+2)/2}};function Jt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var Qt=function(t){d()(n,t);var e=Jt(n);function n(t,i,r,s,a){var c;return o()(this,n),c=e.call(this,t,i,null,null,a),E()(l()(c),"selectable",!1),c.toX=r,c.toY=s,c}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas.getContext("2d");Y.drawArrow(e,this.x,this.y,this.toX,this.toY,this.style.lineWidth,this.style.headSize,this.style.color,this.style.lineCap),this.init=!0}}},{key:"width",get:function(){return Math.abs(this.x-this.toX)}},{key:"height",get:function(){return Math.abs(this.y-this.toY)}},{key:"defaultStyle",get:function(){return new T({lineWidth:i.Setting.ARROW_DEFAULT_LINE_SIZE,headSize:i.Setting.ARROW_DEFAULT_HEAD_SIZE,color:i.Setting.ARROW_DEFAULT_COLOR,lineCap:i.Setting.ARROW_DEFAULT_LINE_CAP})}}]),n}(N);function $t(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var te=function(t){d()(n,t);var e=$t(n);function n(t,i,r,s,a){var c;return o()(this,n),c=e.call(this,t,i,r,s,a),E()(l()(c),"selectable",!1),c}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas.getContext("2d");Y.drawTriangle(e,this.x,this.y,this.width,this.height,this.style.lineWidth,this.style.color,this.style.lineCap,this.style.fill,this.style.fillColor),this.init=!0}}},{key:"width",get:function(){return u()(g()(n.prototype),"width",this)+this.style.lineWidth},set:function(t){U()(g()(n.prototype),"width",t,this,!0)}},{key:"height",get:function(){return u()(g()(n.prototype),"height",this)+this.style.lineWidth},set:function(t){U()(g()(n.prototype),"height",t,this,!0)}},{key:"defaultStyle",get:function(){return new T({lineWidth:i.Setting.TRIANGLE_DEFAULT_LINE_SIZE,color:i.Setting.TRIANGLE_DEFAULT_COLOR,fill:i.Setting.TRIANGLE_DEFAULT_FILL,lineCap:i.Setting.TRIANGLE_DEFAULT_LINE_CAP,fillColor:i.Setting.TRIANGLE_DEFAULT_FILL_COLOR})}}]),n}(N);function ee(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var ne=new WeakMap,ie=function(t){d()(n,t);var e=ee(n);function n(t,r,s,a,c,h,u){var f;return o()(this,n),f=e.call(this,t,r,s,a,c),ne.set(l()(f),{writable:!0,value:0}),f.optionContainer=h,u&&(f.selectedOption=u),f.label=new Ot("",t,r,c),f.label.style.setAll({alignement:i.Alignement.LEFT,verticalAlignement:i.VerticalAlignement.CENTER}),f.triangle=new te(null,null,8,8,c),f.triangle.style.setAll({alignement:i.Alignement.RIGHT,verticalAlignement:i.VerticalAlignement.CENTER}),f.addAll(f.label,f.triangle),f.addClickAction((function(){f.optionContainer&&(f.optionContainer.hidden=!1)})),i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS||(f.updateWidth(),f.addChangeAction((function(){return f.updateWidth()}))),f}return a()(n,[{key:"draw",value:function(t){this.hidden||(this.selectedOption&&this.selectedOption.label&&(this.label.text=this.selectedOption.label.text),u()(g()(n.prototype),"draw",this).call(this,t),this.optionContainer&&(this.optionContainer.select=this))}},{key:"updateWidth",value:function(){var t=this.label.width;this.optionContainer&&this.optionContainer.components.forEach((function(e){var n=e.label;n&&(n.updateSizes&&n.updateSizes(),n.width>t&&(t=n.width))})),w()(this,ne,t+this.style.padding+this.triangle.width+15)}},{key:"selectedOption",get:function(){return this.optionContainer?this.optionContainer.components[this.optionContainer.selectedOption]:null},set:function(t){this.optionContainer.selectedOption=t,this.reactor.dispatchEvent("onChange",this)}},{key:"text",get:function(){return this.selectedOption&&this.selectedOption.label?this.selectedOption.label.text:null}},{key:"width",get:function(){return i.Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS&&this.updateWidth(),S()(this,ne)}},{key:"allComponents",get:function(){var t=[];return t.push.apply(t,pt()(u()(g()(n.prototype),"allComponents",this))),t}},{key:"defaultStyle",get:function(){return new T({backgroundColor:i.Setting.SELECT_DEFAULT_BACKGROUND,backgroundColorHover:i.Setting.SELECT_DEFAULT_HOVER_BACKGROUND,backgroundColorDown:i.Setting.SELECT_DEFAULT_CLICK_BACKGROUND,padding:i.Setting.DEFAULT_PADDING})}}]),n}(ot);function re(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var oe=function(t){d()(n,t);var e=re(n);function n(t,i){var r;o()(this,n);var s=new Ot("Option");return(r=e.call(this,null,null,null,null,i,t||s)).label=t||s,r}return a()(n,[{key:"add",value:function(t){t instanceof Ot&&(this.clear(),u()(g()(n.prototype),"add",this).call(this,t))}},{key:"width",get:function(){return this.parent&&this.parent.width}},{key:"defaultStyle",get:function(){return new T({backgroundColor:i.Setting.SELECT_DEFAULT_BACKGROUND,backgroundColorHover:i.Setting.SELECT_DEFAULT_HOVER_BACKGROUND,backgroundColorDown:i.Setting.SELECT_DEFAULT_CLICK_BACKGROUND,padding:i.Setting.DEFAULT_PADDING})}}]),n}(ot);function se(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var ae=new WeakMap,ce=function(t){d()(n,t);var e=se(n);function n(t,i){var r;o()(this,n);for(var s=arguments.length,a=new Array(s>2?s-2:0),c=2;c<s;c++)a[c-2]=arguments[c];return r=e.call.apply(e,[this,null,null,null,t,i].concat(a)),ae.set(l()(r),{writable:!0,value:void 0}),w()(l()(r),ae,0),r.select=null,r}return a()(n,[{key:"draw",value:function(t){u()(g()(n.prototype),"draw",this).call(this,t),this.selected&&this.selected&&(this.select.selected=!0)}},{key:"add",value:function(t){var e=this;u()(g()(n.prototype),"add",this).call(this,t),t.addClickAction((function(){w()(e,ae,e.getComponentId(t)),e.selected=!1,e.hidden=!0,e.select&&(e.select.selected=!1)}))}},{key:"x",get:function(){return this.select&&this.select.x}},{key:"y",get:function(){var t=this.select&&this.select.height,e=this.height,n=this.select&&this.select.y;return this.canvas&&this.canvas.scene&&n+t+e>=this.canvas.scene.height?n-e:n+t}},{key:"width",get:function(){return this.select&&this.select.width}},{key:"selectedOption",get:function(){return Math.max(0,Math.min(this.components.length-1,S()(this,ae)))},set:function(t){w()(this,ae,t),this.reactor.dispatchEvent("onChange",this)}},{key:"defaultStyle",get:function(){return new T({padding:0,spaceBetweenComponents:0,backgroundColor:i.Setting.SELECT_DEFAULT_BACKGROUND,backgroundColorHover:null,backgroundColorDown:null,scrollXDisabled:!1,scrollYDisabled:!1})}},{key:"hidden",get:function(){return u()(g()(n.prototype),"hidden",this)||this.select&&!this.select.selected||!this.select},set:function(t){return U()(g()(n.prototype),"hidden",t,this,!0)}},{key:"selected",get:function(){return u()(g()(n.prototype),"selected",this)||this.select&&this.select.selected},set:function(t){U()(g()(n.prototype),"selected",t,this,!0)}}]),n}(mt);function le(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,i=g()(t);if(e){var r=g()(this).constructor;n=Reflect.construct(i,arguments,r)}else n=i.apply(this,arguments);return v()(this,n)}}var he=function(t){d()(n,t);var e=le(n);function n(t,i,r,s){var a;return o()(this,n),a=e.call(this,t,i,r,r,s),E()(l()(a),"selectable",!1),a}return a()(n,[{key:"draw",value:function(t){if(!this.hidden){u()(g()(n.prototype),"draw",this).call(this,t);var e=t.canvas.getContext("2d");Y.drawCircle(e,this.x,this.y,this.width,this.style.lineWidth,this.style.color,this.style.lineCap,this.style.fill,this.style.fillColor),this.init=!0}}},{key:"width",get:function(){return u()(g()(n.prototype),"width",this)+this.style.lineWidth},set:function(t){U()(g()(n.prototype),"width",t,this,!0),this.reactor.dispatchEvent("onChange",this)}},{key:"height",get:function(){return u()(g()(n.prototype),"height",this)+this.style.lineWidth},set:function(t){U()(g()(n.prototype),"height",t,this,!0),this.reactor.dispatchEvent("onChange",this)}},{key:"defaultStyle",get:function(){return new T({lineWidth:i.Setting.CIRCLE_DEFAULT_LINE_SIZE,color:i.Setting.CIRCLE_DEFAULT_COLOR,fill:i.Setting.CIRCLE_DEFAULT_FILL,lineCap:i.Setting.CIRCLE_DEFAULT_LINE_CAP,fillColor:i.Setting.CIRCLE_DEFAULT_FILL_COLOR})}}]),n}(N)}])}));

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),

/***/ "./node_modules/parseqs/index.js":
/*!***************************************!*\
  !*** ./node_modules/parseqs/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};


/***/ }),

/***/ "./node_modules/parseuri/index.js":
/*!****************************************!*\
  !*** ./node_modules/parseuri/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    uri.pathNames = pathNames(uri, uri['path']);
    uri.queryKey = queryKey(uri, uri['query']);

    return uri;
};

function pathNames(obj, path) {
    var regx = /\/{2,9}/g,
        names = path.replace(regx, "/").split("/");

    if (path.substr(0, 1) == '/' || path.length === 0) {
        names.splice(0, 1);
    }
    if (path.substr(path.length - 1, 1) == '/') {
        names.splice(names.length - 1, 1);
    }

    return names;
}

function queryKey(uri, query) {
    var data = {};

    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
        if ($1) {
            data[$1] = $2;
        }
    });

    return data;
}


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/seedrandom/index.js":
/*!******************************************!*\
  !*** ./node_modules/seedrandom/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = __webpack_require__(/*! ./lib/alea */ "./node_modules/seedrandom/lib/alea.js");

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = __webpack_require__(/*! ./lib/xor128 */ "./node_modules/seedrandom/lib/xor128.js");

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = __webpack_require__(/*! ./lib/xorwow */ "./node_modules/seedrandom/lib/xorwow.js");

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = __webpack_require__(/*! ./lib/xorshift7 */ "./node_modules/seedrandom/lib/xorshift7.js");

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = __webpack_require__(/*! ./lib/xor4096 */ "./node_modules/seedrandom/lib/xor4096.js");

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = __webpack_require__(/*! ./lib/tychei */ "./node_modules/seedrandom/lib/tychei.js");

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = __webpack_require__(/*! ./seedrandom */ "./node_modules/seedrandom/seedrandom.js");

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

module.exports = sr;


/***/ }),

/***/ "./node_modules/seedrandom/lib/alea.js":
/*!*********************************************!*\
  !*** ./node_modules/seedrandom/lib/alea.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = String(data);
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.alea = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/lib/tychei.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/tychei.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
};

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.tychei = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/lib/xor128.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xor128.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xor128 = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/lib/xor4096.js":
/*!************************************************!*\
  !*** ./node_modules/seedrandom/lib/xor4096.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
};

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xor4096 = impl;
}

})(
  this,                                     // window object or global
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/lib/xorshift7.js":
/*!**************************************************!*\
  !*** ./node_modules/seedrandom/lib/xorshift7.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v, w;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, w, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      w = X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) w = X[7] = -1; else w = X[j];

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xorshift7 = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/lib/xorwow.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/lib/xorwow.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); }
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (__webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js") && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return impl; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {
  this.xorwow = impl;
}

})(
  this,
   true && module,    // present in node.js
  __webpack_require__(/*! !webpack amd define */ "./node_modules/webpack/buildin/amd-define.js")   // present with an AMD loader
);



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/seedrandom/seedrandom.js":
/*!***********************************************!*\
  !*** ./node_modules/seedrandom/seedrandom.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*
Copyright 2019 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (global, pool, math) {
//
// The following constants are related to IEEE 754 limits.
//

var width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; }
  prng.quick = function() { return arc4.g(4) / 0x100000000; }
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); }
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
};

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    var out;
    if (nodecrypto && (out = nodecrypto.randomBytes)) {
      // The use of 'out' to remember randomBytes makes tight minified code.
      out = out(width);
    } else {
      out = new Uint8Array(width);
      (global.crypto || global.msCrypto).getRandomValues(out);
    }
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if ( true && module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = __webpack_require__(/*! crypto */ 0);
  } catch (ex) {}
} else if (true) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return seedrandom; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}


// End anonymous scope, and pass initial values.
})(
  // global: `self` in browsers (including strict mode and web workers),
  // otherwise `this` in Node and other environments
  (typeof self !== 'undefined') ? self : this,
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);


/***/ }),

/***/ "./node_modules/socket.io-client/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/socket.io-client/lib/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var url = __webpack_require__(/*! ./url */ "./node_modules/socket.io-client/lib/url.js");
var parser = __webpack_require__(/*! socket.io-parser */ "./node_modules/socket.io-parser/index.js");
var Manager = __webpack_require__(/*! ./manager */ "./node_modules/socket.io-client/lib/manager.js");
var debug = __webpack_require__(/*! debug */ "./node_modules/socket.io-client/node_modules/debug/src/browser.js")('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  }
  return io.socket(parsed.path, opts);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(/*! ./manager */ "./node_modules/socket.io-client/lib/manager.js");
exports.Socket = __webpack_require__(/*! ./socket */ "./node_modules/socket.io-client/lib/socket.js");


/***/ }),

/***/ "./node_modules/socket.io-client/lib/manager.js":
/*!******************************************************!*\
  !*** ./node_modules/socket.io-client/lib/manager.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var eio = __webpack_require__(/*! engine.io-client */ "./node_modules/engine.io-client/lib/index.js");
var Socket = __webpack_require__(/*! ./socket */ "./node_modules/socket.io-client/lib/socket.js");
var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");
var parser = __webpack_require__(/*! socket.io-parser */ "./node_modules/socket.io-parser/index.js");
var on = __webpack_require__(/*! ./on */ "./node_modules/socket.io-client/lib/on.js");
var bind = __webpack_require__(/*! component-bind */ "./node_modules/component-bind/index.js");
var debug = __webpack_require__(/*! debug */ "./node_modules/socket.io-client/node_modules/debug/src/browser.js")('socket.io-client:manager');
var indexOf = __webpack_require__(/*! indexof */ "./node_modules/indexof/index.js");
var Backoff = __webpack_require__(/*! backo2 */ "./node_modules/backo2/index.js");

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  var _parser = opts.parser || parser;
  this.encoder = new _parser.Encoder();
  this.decoder = new _parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.generateId(nsp);
    }
  }
};

/**
 * generate `socket.id` for the given `nsp`
 *
 * @param {String} nsp
 * @return {String}
 * @api private
 */

Manager.prototype.generateId = function (nsp) {
  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    if (timeout === 0) {
      openSub.destroy(); // prevents a race condition with the 'open' event
    }

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.generateId(nsp);
    });

    if (this.autoConnect) {
      // manually call here since connecting event is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};


/***/ }),

/***/ "./node_modules/socket.io-client/lib/on.js":
/*!*************************************************!*\
  !*** ./node_modules/socket.io-client/lib/on.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}


/***/ }),

/***/ "./node_modules/socket.io-client/lib/socket.js":
/*!*****************************************************!*\
  !*** ./node_modules/socket.io-client/lib/socket.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var parser = __webpack_require__(/*! socket.io-parser */ "./node_modules/socket.io-parser/index.js");
var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");
var toArray = __webpack_require__(/*! to-array */ "./node_modules/to-array/index.js");
var on = __webpack_require__(/*! ./on */ "./node_modules/socket.io-client/lib/on.js");
var bind = __webpack_require__(/*! component-bind */ "./node_modules/component-bind/index.js");
var debug = __webpack_require__(/*! debug */ "./node_modules/socket.io-client/node_modules/debug/src/browser.js")('socket.io-client:socket');
var parseqs = __webpack_require__(/*! parseqs */ "./node_modules/parseqs/index.js");
var hasBin = __webpack_require__(/*! has-binary2 */ "./node_modules/has-binary2/index.js");

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  this.flags = {};
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  if (!this.io.reconnecting) this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var packet = {
    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
    data: args
  };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  this.flags = {};

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
      debug('sending connect packet with query %s', query);
      this.packet({type: parser.CONNECT, query: query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  var sameNamespace = packet.nsp === this.nsp;
  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';

  if (!sameNamespace && !rootNamespaceError) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    self.packet({
      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags.compress = compress;
  return this;
};

/**
 * Sets the binary flag
 *
 * @param {Boolean} whether the emitted data contains binary
 * @return {Socket} self
 * @api public
 */

Socket.prototype.binary = function (binary) {
  this.flags.binary = binary;
  return this;
};


/***/ }),

/***/ "./node_modules/socket.io-client/lib/url.js":
/*!**************************************************!*\
  !*** ./node_modules/socket.io-client/lib/url.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var parseuri = __webpack_require__(/*! parseuri */ "./node_modules/parseuri/index.js");
var debug = __webpack_require__(/*! debug */ "./node_modules/socket.io-client/node_modules/debug/src/browser.js")('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || (typeof location !== 'undefined' && location);
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}


/***/ }),

/***/ "./node_modules/socket.io-client/node_modules/debug/src/browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/debug/src/browser.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(/*! ./debug */ "./node_modules/socket.io-client/node_modules/debug/src/debug.js");
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/socket.io-client/node_modules/debug/src/debug.js":
/*!***********************************************************************!*\
  !*** ./node_modules/socket.io-client/node_modules/debug/src/debug.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ "./node_modules/ms/index.js");

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),

/***/ "./node_modules/socket.io-parser/binary.js":
/*!*************************************************!*\
  !*** ./node_modules/socket.io-parser/binary.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = __webpack_require__(/*! isarray */ "./node_modules/socket.io-parser/node_modules/isarray/index.js");
var isBuf = __webpack_require__(/*! ./is-buffer */ "./node_modules/socket.io-parser/is-buffer.js");
var toString = Object.prototype.toString;
var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');
var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet) {
  var buffers = [];
  var packetData = packet.data;
  var pack = packet;
  pack.data = _deconstructPacket(packetData, buffers);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

function _deconstructPacket(data, buffers) {
  if (!data) return data;

  if (isBuf(data)) {
    var placeholder = { _placeholder: true, num: buffers.length };
    buffers.push(data);
    return placeholder;
  } else if (isArray(data)) {
    var newData = new Array(data.length);
    for (var i = 0; i < data.length; i++) {
      newData[i] = _deconstructPacket(data[i], buffers);
    }
    return newData;
  } else if (typeof data === 'object' && !(data instanceof Date)) {
    var newData = {};
    for (var key in data) {
      newData[key] = _deconstructPacket(data[key], buffers);
    }
    return newData;
  }
  return data;
}

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  packet.data = _reconstructPacket(packet.data, buffers);
  packet.attachments = undefined; // no longer useful
  return packet;
};

function _reconstructPacket(data, buffers) {
  if (!data) return data;

  if (data && data._placeholder) {
    return buffers[data.num]; // appropriate buffer (should be natural order anyway)
  } else if (isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      data[i] = _reconstructPacket(data[i], buffers);
    }
  } else if (typeof data === 'object') {
    for (var key in data) {
      data[key] = _reconstructPacket(data[key], buffers);
    }
  }

  return data;
}

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((withNativeBlob && obj instanceof Blob) ||
        (withNativeFile && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};


/***/ }),

/***/ "./node_modules/socket.io-parser/index.js":
/*!************************************************!*\
  !*** ./node_modules/socket.io-parser/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var debug = __webpack_require__(/*! debug */ "./node_modules/socket.io-parser/node_modules/debug/src/browser.js")('socket.io-parser');
var Emitter = __webpack_require__(/*! component-emitter */ "./node_modules/component-emitter/index.js");
var binary = __webpack_require__(/*! ./binary */ "./node_modules/socket.io-parser/binary.js");
var isArray = __webpack_require__(/*! isarray */ "./node_modules/socket.io-parser/node_modules/isarray/index.js");
var isBuf = __webpack_require__(/*! ./is-buffer */ "./node_modules/socket.io-parser/is-buffer.js");

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

var ERROR_PACKET = exports.ERROR + '"encode error"';

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    encodeAsBinary(obj, callback);
  } else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {

  // first is type
  var str = '' + obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
    str += obj.attachments + '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' !== obj.nsp) {
    str += obj.nsp + ',';
  }

  // immediately followed by the id
  if (null != obj.id) {
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    var payload = tryStringify(obj.data);
    if (payload !== false) {
      str += payload;
    } else {
      return ERROR_PACKET;
    }
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

function tryStringify(str) {
  try {
    return JSON.stringify(str);
  } catch(e){
    return false;
  }
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an encoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if (typeof obj === 'string') {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  } else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  } else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var i = 0;
  // look up type
  var p = {
    type: Number(str.charAt(0))
  };

  if (null == exports.types[p.type]) {
    return error('unknown packet type ' + p.type);
  }

  // look up attachments if type binary
  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
    var buf = '';
    while (str.charAt(++i) !== '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) !== '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' === str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' === c) break;
      p.nsp += c;
      if (i === str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i === str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    var payload = tryParse(str.substr(i));
    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
    if (isPayloadValid) {
      p.data = payload;
    } else {
      return error('invalid payload');
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(str) {
  try {
    return JSON.parse(str);
  } catch(e){
    return false;
  }
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(msg) {
  return {
    type: exports.ERROR,
    data: 'parser error: ' + msg
  };
}


/***/ }),

/***/ "./node_modules/socket.io-parser/is-buffer.js":
/*!****************************************************!*\
  !*** ./node_modules/socket.io-parser/is-buffer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {
module.exports = isBuf;

var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

var isView = function (obj) {
  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
};

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (withNativeBuffer && Buffer.isBuffer(obj)) ||
          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/socket.io-parser/node_modules/debug/src/browser.js":
/*!*************************************************************************!*\
  !*** ./node_modules/socket.io-parser/node_modules/debug/src/browser.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(/*! ./debug */ "./node_modules/socket.io-parser/node_modules/debug/src/debug.js");
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // Internet Explorer and Edge do not support colors.
  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/socket.io-parser/node_modules/debug/src/debug.js":
/*!***********************************************************************!*\
  !*** ./node_modules/socket.io-parser/node_modules/debug/src/debug.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ "./node_modules/ms/index.js");

/**
 * Active `debug` instances.
 */
exports.instances = [];

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  var prevTime;

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);
  debug.destroy = destroy;

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  exports.instances.push(debug);

  return debug;
}

function destroy () {
  var index = exports.instances.indexOf(this);
  if (index !== -1) {
    exports.instances.splice(index, 1);
    return true;
  } else {
    return false;
  }
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var i;
  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }

  for (i = 0; i < exports.instances.length; i++) {
    var instance = exports.instances[i];
    instance.enabled = exports.enabled(instance.namespace);
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  if (name[name.length - 1] === '*') {
    return true;
  }
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),

/***/ "./node_modules/socket.io-parser/node_modules/isarray/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/socket.io-parser/node_modules/isarray/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/to-array/index.js":
/*!****************************************!*\
  !*** ./node_modules/to-array/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-define.js":
/*!***************************************!*\
  !*** (webpack)/buildin/amd-define.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function() {
	throw new Error("define cannot be used indirect");
};


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/yeast/index.js":
/*!*************************************!*\
  !*** ./node_modules/yeast/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;


/***/ }),

/***/ "./src/Shim.js":
/*!*********************!*\
  !*** ./src/Shim.js ***!
  \*********************/
/*! exports provided: Game, WorkersAvailable, NotificationMessage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Game", function() { return Game; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WorkersAvailable", function() { return WorkersAvailable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotificationMessage", function() { return NotificationMessage; });
/* harmony import */ var _engine_Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine/Constants */ "./src/engine/Constants.js");
/* harmony import */ var _engine_GameController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./engine/GameController */ "./src/engine/GameController.js");
/* harmony import */ var _engine_GameControllerWorker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./engine/GameControllerWorker */ "./src/engine/GameControllerWorker.js");
/* harmony import */ var _ui_GameUI__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/GameUI */ "./src/ui/GameUI.js");
/* harmony import */ var _engine_GameEngine__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./engine/GameEngine */ "./src/engine/GameEngine.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jsgametools */ "./node_modules/jsgametools/lib/JSGameTools.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(jsgametools__WEBPACK_IMPORTED_MODULE_5__);
/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */





 // Polyfills

if (typeof window !== "undefined") {
  window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame;
  window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame || window.oCancelAnimationFrame || window.mozCancelRequestAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame;
}

if (typeof document !== "undefined" && typeof document.fullscreenElement === "undefined") {
  Object.defineProperty(document, "fullscreenElement", {
    get: function get() {
      return document.mozFullScreenElement || document.msFullscreenElement || document.webkitFullscreenElement || document.oFullscreenElement;
    }
  });
}

if (typeof document !== "undefined") {
  document.exitFullscreen = document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.msExitFullscreen;
}

if (!String.prototype.trim) {
  String.prototype.trim = function () {
    return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
  };
} // Test if Workerd are supported


function WorkersAvailable(callback) {
  if (typeof window !== "undefined") {
    try {
      if (!window.Worker) throw "Workers not supported";
      var testWorker = new Worker("dist/GameEngineWorker.js");

      if (testWorker) {
        testWorker.postMessage("ping");

        testWorker.onmessage = function (e) {
          if (e.data == "pong") {
            testWorker.terminate();
            return callback(true);
          }
        };
      }
    } catch (e) {
      return callback(false);
    }
  }
}

var workersAvailable = false;
WorkersAvailable(function (result) {
  workersAvailable = result;
}); // Old game API

function Game(grid, snake, speed, appendTo, enablePause, enableRetry, progressiveSpeed, canvasWidth, canvasHeight, displayFPS, outputType, settings, ui, onlineMode) {
  var controller;
  var engine = new _engine_GameEngine__WEBPACK_IMPORTED_MODULE_4__["default"](grid, snake, speed, enablePause, enableRetry, progressiveSpeed);
  engine.init();

  if (workersAvailable && settings.enableMultithreading) {
    controller = new _engine_GameControllerWorker__WEBPACK_IMPORTED_MODULE_2__["default"](engine);
  } else {
    controller = new _engine_GameController__WEBPACK_IMPORTED_MODULE_1__["default"](engine);
  }

  if (ui) {
    controller.gameUI = ui;
  } else {
    controller.gameUI = new _ui_GameUI__WEBPACK_IMPORTED_MODULE_3__["default"](controller, appendTo, canvasWidth, canvasHeight, displayFPS, outputType, settings);
  }

  if (onlineMode) controller.onlineMode = true;
  controller.init();
  return controller;
} // Old NotificationMessage API


function NotificationMessage(text, textColor, backgroundColor, delayBeforeClosing, animationDelay, fontSize, fontFamily, foreGround, disableAnimation, closeButton) {
  return new jsgametools__WEBPACK_IMPORTED_MODULE_5__["NotificationMessage"](new jsgametools__WEBPACK_IMPORTED_MODULE_5__["Style"]({
    "backgroundColor": backgroundColor,
    "foreGround": foreGround,
    "disableAnimation": disableAnimation
  }), delayBeforeClosing, null, new jsgametools__WEBPACK_IMPORTED_MODULE_5__["Label"](text, null, null, new jsgametools__WEBPACK_IMPORTED_MODULE_5__["Style"]({
    "fontSize": fontSize,
    "fontFamily": fontFamily,
    "fontColor": textColor || "white",
    "alignement": "center",
    "verticalAlignement": "center"
  })));
} // Constants shim
// Player type


if (typeof window !== "undefined") {
  window.PLAYER_AI = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].PlayerType.AI;
  window.PLAYER_HUMAN = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].PlayerType.HUMAN;
  window.PLAYER_HYBRID_HUMAN_AI = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].PlayerType.HYBRID_HUMAN_AI; // AI level

  window.AI_LEVEL_RANDOM = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].AiLevel.RANDOM;
  window.AI_LEVEL_LOW = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].AiLevel.LOW;
  window.AI_LEVEL_DEFAULT = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].AiLevel.DEFAULT;
  window.AI_LEVEL_HIGH = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].AiLevel.HIGH;
  window.AI_LEVEL_ULTRA = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].AiLevel.ULTRA; // Directions

  window.UP = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].Direction.UP;
  window.RIGHT = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].Direction.RIGHT;
  window.BOTTOM = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].Direction.BOTTOM;
  window.LEFT = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].Direction.LEFT;
  window.ANGLE_1 = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].Direction.ANGLE_1;
  window.ANGLE_2 = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].Direction.ANGLE_2;
  window.ANGLE_3 = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].Direction.ANGLE_3;
  window.ANGLE_4 = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].Direction.ANGLE_4; // Infos

  window.APP_VERSION = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].Setting.APP_VERSION;
  window.DATE_VERSION = _engine_Constants__WEBPACK_IMPORTED_MODULE_0__["default"].Setting.DATE_VERSION;
}



/***/ }),

/***/ "./src/StorageFactory.js":
/*!*******************************!*\
  !*** ./src/StorageFactory.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return StorageFactory; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */
var StorageFactory = /*#__PURE__*/function () {
  function StorageFactory(storage) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, StorageFactory);

    this.inMemoryStorage = {};
    this._isSupported;

    try {
      this.storage = storage || window.localStorage;
    } catch (e) {
      this.storage = null;
    } // Test if local storage is supported


    try {
      var testKey = "__some_random_key_you_are_not_going_to_use__";
      this.storage.setItem(testKey, testKey);
      this.storage.removeItem(testKey);
      this._isSupported = true;
    } catch (e) {
      this._isSupported = false;
    }
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(StorageFactory, [{
    key: "clear",
    value: function clear() {
      if (this.isSupported) {
        this.storage.clear();
      } else {
        this.inMemoryStorage = {};
      }
    }
  }, {
    key: "getItem",
    value: function getItem(name) {
      if (this.isSupported) {
        return this.storage.getItem(name);
      }

      if (this.inMemoryStorage.hasOwnProperty(name)) {
        return this.inMemoryStorage[name];
      }

      return null;
    }
  }, {
    key: "key",
    value: function key(index) {
      if (this.isSupported) {
        return this.storage.key(index);
      } else {
        return Object.keys(this.inMemoryStorage)[index] || null;
      }
    }
  }, {
    key: "removeItem",
    value: function removeItem(name) {
      if (this.isSupported) {
        this.storage.removeItem(name);
      } else {
        delete this.inMemoryStorage[name];
      }
    }
  }, {
    key: "setItem",
    value: function setItem(name, value) {
      if (this.isSupported) {
        this.storage.setItem(name, value);
      } else {
        this.inMemoryStorage[name] = String(value);
      }
    }
  }, {
    key: "length",
    value: function length() {
      if (this.isSupported) {
        return this.storage.length;
      } else {
        return Object.keys(this.inMemoryStorage).length;
      }
    }
  }, {
    key: "isSupported",
    get: function get() {
      return this._isSupported;
    }
  }]);

  return StorageFactory;
}();



/***/ }),

/***/ "./src/Timers.js":
/*!***********************!*\
  !*** ./src/Timers.js ***!
  \***********************/
/*! exports provided: Timer, TimerInterval */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Timer", function() { return Timer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimerInterval", function() { return TimerInterval; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */
var Timer = /*#__PURE__*/function () {
  function Timer(callback, delay, timerInterval) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Timer);

    this.callback = callback;
    this.delay = delay;
    this.timerInterval = timerInterval;
    this.remaining = delay;
    this.timerId;
    this.start;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Timer, [{
    key: "pause",
    value: function pause() {
      clearTimeout(this.timerId);
      this.timerInterval != null && this.timerInterval.stop != null && this.timerInterval.stop();
      this.remaining -= Date.now() - this.start;
    }
  }, {
    key: "resume",
    value: function resume() {
      this.start = Date.now();
      clearTimeout(this.timerId);
      this.timerInterval != null && this.timerInterval.stop != null && this.timerInterval.stop();
      this.timerId = setTimeout(this.callback, this.remaining);
      this.timerInterval != null && this.timerInterval.start != null && this.timerInterval.start();
    }
  }, {
    key: "reset",
    value: function reset() {
      clearTimeout(this.timerId);
      this.timerInterval != null && this.timerInterval.stop != null && this.timerInterval.stop();
      this.remaining = this.delay;
    }
  }, {
    key: "getTime",
    value: function getTime() {
      return this.remaining - (Date.now() - this.start);
    }
  }]);

  return Timer;
}();

var TimerInterval = /*#__PURE__*/function () {
  function TimerInterval(callback) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, TimerInterval);

    this.callback = callback;
    this.interval;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(TimerInterval, [{
    key: "start",
    value: function start() {
      this.interval = setInterval(this.callback, 1000);
    }
  }, {
    key: "stop",
    value: function stop() {
      clearInterval(this.interval);
    }
  }]);

  return TimerInterval;
}();



/***/ }),

/***/ "./src/engine/Constants.js":
/*!*********************************!*\
  !*** ./src/engine/Constants.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */
/* harmony default export */ __webpack_exports__["default"] = ({
  CaseType: {
    EMPTY: 0,
    SNAKE: 1,
    FRUIT: 2,
    WALL: 3,
    SNAKE_DEAD: 4,
    SURROUNDED: 5,
    FRUIT_GOLD: 6,
    CROSSED: 7
  },
  PlayerType: {
    AI: "PLAYER_AI",
    HUMAN: "PLAYER_HUMAN",
    HYBRID_HUMAN_AI: "PLAYER_HYBRID_HUMAN_AI"
  },
  AiLevel: {
    RANDOM: "AI_LEVEL_RANDOM",
    LOW: "AI_LEVEL_LOW",
    DEFAULT: "AI_LEVEL_DEFAULT",
    HIGH: "AI_LEVEL_HIGH",
    ULTRA: "AI_LEVEL_ULTRA",
    CUSTOM: "AI_LEVEL_CUSTOM",
    MOCK: "AI_LEVEL_MOCK"
  },
  OutputType: {
    TEXT: "OUTPUT_TEXT",
    GRAPHICAL: "OUTPUT_GRAPHICAL"
  },
  Setting: {
    CANVAS_WIDTH: 800,
    CANVAS_HEIGHT: 600,
    FONT_FAMILY: "Delius",
    FONT_SIZE: 32,
    HEADER_HEIGHT_DEFAULT: 75,
    TARGET_FPS: 60,
    TIME_MULTIPLIER: 15,
    IMAGE_SNAKE_HUE: 75,
    IMAGE_SNAKE_SATURATION: 50,
    IMAGE_SNAKE_VALUE: 77,
    CARS_TO_PRERENDER: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "×"],
    APP_VERSION: "2.2",
    DATE_VERSION: "10/18/2020",
    PROB_GOLD_FRUIT_1_PLAYER: 100,
    PROB_GOLD_FRUIT_MULTIPLE_PLAYERS: 50,
    INFO_NOTIF_COLOR: "rgba(52, 152, 219, 0.5)",
    ERROR_NOTIF_COLOR: "rgba(231, 76, 60, 0.5)"
  },
  Direction: {
    UP: 0,
    TOP: 0,
    RIGHT: 1,
    BOTTOM: 2,
    DOWN: 2,
    LEFT: 3,
    ANGLE_1: 4,
    ANGLE_2: 5,
    ANGLE_3: 6,
    ANGLE_4: 7
  },
  Key: {
    UP: 38,
    RIGHT: 39,
    BOTTOM: 40,
    LEFT: 37,
    ENTER: 13
  },
  Error: {
    ROOM_NOT_FOUND: "ROOM_NOT_FOUND",
    ROOM_ALREADY_JOINED: "ROOM_ALREADY_JOINED",
    INVALID_SETTINGS: "INVALID_SETTINGS",
    MAX_ROOM_LIMIT_REACHED: "MAX_ROOM_LIMIT_REACHED",
    AUTHENTICATION_REQUIRED: "AUTHENTICATION_REQUIRED",
    ALREADY_CREATED_ROOM: "ALREADY_CREATED_ROOM",
    BANNED: "BANNED",
    DISCONNECTED: "DISCONNECTED"
  },
  GameState: {
    STARTING: "STARTING",
    STARTED: "STARTED",
    SEARCHING_PLAYERS: "SEARCHING_PLAYERS",
    AUTHENTICATION_SUCCESS: "AUTHENTICATION_SUCCESS"
  }
});

/***/ }),

/***/ "./src/engine/Event.js":
/*!*****************************!*\
  !*** ./src/engine/Event.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Event; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */
var Event = /*#__PURE__*/function () {
  function Event(name) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Event);

    this.name = name;
    this.callbacks = [];
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Event, [{
    key: "registerCallback",
    value: function registerCallback(callback) {
      this.callbacks.push(callback);
    }
  }]);

  return Event;
}();



/***/ }),

/***/ "./src/engine/GameController.js":
/*!**************************************!*\
  !*** ./src/engine/GameController.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GameController; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Constants */ "./src/engine/Constants.js");
/* harmony import */ var _Reactor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Reactor */ "./src/engine/Reactor.js");




/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */



var GameController = /*#__PURE__*/function () {
  function GameController(engine, ui) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, GameController);

    this.gameUI = ui;
    this.gameEngine = engine; // Copy of game engine variables

    this.grid = null;
    this.snakes = null;
    this.lastKey = -1;
    this.paused = false;
    this.isReseted = false;
    this.exited = false;
    this.gameOver = false;
    this.starting = false;
    this.scoreMax = false;
    this.gameFinished = false;
    this.errorOccurred = false;
    this.clientSidePredictionsMode = false;
    this.currentPlayer = null;
    this.onlineMode = false; // Events

    this.reactor = new _Reactor__WEBPACK_IMPORTED_MODULE_4__["default"]();
    this.reactor.registerEvent("onStart");
    this.reactor.registerEvent("onPause");
    this.reactor.registerEvent("onContinue");
    this.reactor.registerEvent("onReset");
    this.reactor.registerEvent("onStop");
    this.reactor.registerEvent("onExit");
    this.reactor.registerEvent("onKill");
    this.reactor.registerEvent("onScoreIncreased");
    this.reactor.registerEvent("onUpdate");
    this.reactor.registerEvent("onUpdateCounter");
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(GameController, [{
    key: "init",
    value: function init() {
      var _this = this;

      this.update("init", {
        "snakes": this.gameEngine.snakes,
        "grid": this.gameEngine.grid,
        "enablePause": this.gameEngine.enablePause,
        "enableRetry": this.gameEngine.enableRetry,
        "progressiveSpeed": this.gameEngine.progressiveSpeed,
        "offsetFrame": this.gameEngine.speed * _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Setting.TIME_MULTIPLIER,
        "errorOccurred": this.gameEngine.errorOccurred
      });
      this.gameEngine.onReset(function () {
        _this.update("reset", {
          "paused": _this.gameEngine.paused,
          "isReseted": _this.gameEngine.isReseted,
          "exited": _this.gameEngine.exited,
          "grid": _this.gameEngine.grid,
          "numFruit": _this.gameEngine.numFruit,
          "ticks": _this.gameEngine.ticks,
          "scoreMax": _this.gameEngine.scoreMax,
          "gameOver": _this.gameEngine.gameOver,
          "gameFinished": _this.gameEngine.gameFinished,
          "gameMazeWin": _this.gameEngine.gameMazeWin,
          "starting": _this.gameEngine.starting,
          "initialSpeed": _this.gameEngine.initialSpeed,
          "speed": _this.gameEngine.speed,
          "snakes": _this.gameEngine.snakes,
          "confirmReset": false,
          "confirmExit": false,
          "getInfos": false,
          "getInfosGame": false,
          "errorOccurred": _this.gameEngine.errorOccurred,
          "offsetFrame": _this.gameEngine.speed * _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Setting.TIME_MULTIPLIER,
          "aiStuck": _this.gameEngine.aiStuck,
          "precAiStuck": false
        });

        _this.reactor.dispatchEvent("onReset");
      });
      this.gameEngine.onStart(function () {
        _this.update("start", {
          "snakes": _this.gameEngine.snakes,
          "grid": _this.gameEngine.grid,
          "starting": _this.gameEngine.starting,
          "countBeforePlay": _this.gameEngine.countBeforePlay,
          "paused": _this.gameEngine.paused,
          "isReseted": _this.gameEngine.isReseted,
          "confirmReset": false,
          "confirmExit": false,
          "getInfos": false,
          "getInfosGame": false,
          "errorOccurred": _this.gameEngine.errorOccurred
        });

        _this.reactor.dispatchEvent("onStart");
      });
      this.gameEngine.onPause(function () {
        _this.update("pause", {
          "paused": _this.gameEngine.paused,
          "confirmReset": false,
          "confirmExit": false,
          "getInfos": false,
          "getInfosGame": false,
          "errorOccurred": _this.gameEngine.errorOccurred
        });

        _this.reactor.dispatchEvent("onPause");
      });
      this.gameEngine.onContinue(function () {
        _this.update("continue", {
          "confirmReset": false,
          "confirmExit": false,
          "getInfos": false,
          "getInfosGame": false,
          "errorOccurred": _this.gameEngine.errorOccurred
        });

        _this.reactor.dispatchEvent("onContinue");
      });
      this.gameEngine.onStop(function () {
        _this.update("stop", {
          "paused": _this.gameEngine.paused,
          "scoreMax": _this.gameEngine.scoreMax,
          "gameOver": _this.gameEngine.gameOver,
          "gameFinished": _this.gameEngine.gameFinished,
          "confirmReset": false,
          "confirmExit": false,
          "getInfos": false,
          "getInfosGame": false,
          "errorOccurred": _this.gameEngine.errorOccurred
        });

        _this.reactor.dispatchEvent("onStop");
      });
      this.gameEngine.onExit(function () {
        _this.update("exit", {
          "paused": _this.gameEngine.paused,
          "gameOver": _this.gameEngine.gameOver,
          "gameFinished": _this.gameEngine.gameFinished,
          "exited": _this.gameEngine.exited,
          "confirmReset": false,
          "confirmExit": false,
          "getInfos": false,
          "getInfosGame": false,
          "errorOccurred": _this.gameEngine.errorOccurred
        });

        _this.reactor.dispatchEvent("onExit");
      });
      this.gameEngine.onKill(function () {
        _this.update("kill", {
          "paused": _this.gameEngine.paused,
          "gameOver": _this.gameEngine.gameOver,
          "killed": _this.gameEngine.killed,
          "snakes": _this.gameEngine.snakes,
          "gameFinished": _this.gameEngine.gameFinished,
          "grid": _this.gameEngine.grid,
          "confirmReset": false,
          "confirmExit": false,
          "getInfos": false,
          "getInfosGame": false,
          "errorOccurred": _this.gameEngine.errorOccurred
        });

        _this.reactor.dispatchEvent("onKill");
      });
      this.gameEngine.onScoreIncreased(function () {
        _this.reactor.dispatchEvent("onScoreIncreased");
      });
      this.gameEngine.onUpdate(function () {
        var _this$update;

        _this.update("update", (_this$update = {
          "paused": _this.gameEngine.paused,
          "isReseted": _this.gameEngine.isReseted,
          "exited": _this.gameEngine.exited,
          "grid": _this.gameEngine.grid,
          "numFruit": _this.gameEngine.numFruit,
          "ticks": _this.gameEngine.ticks,
          "scoreMax": _this.gameEngine.scoreMax,
          "gameOver": _this.gameEngine.gameOver,
          "gameFinished": _this.gameEngine.gameFinished,
          "gameMazeWin": _this.gameEngine.gameMazeWin,
          "starting": _this.gameEngine.starting,
          "initialSpeed": _this.gameEngine.initialSpeed,
          "speed": _this.gameEngine.speed,
          "snakes": _this.gameEngine.snakes,
          "countBeforePlay": _this.gameEngine.countBeforePlay
        }, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_this$update, "numFruit", _this.gameEngine.numFruit), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_this$update, "offsetFrame", 0), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_this$update, "errorOccurred", _this.gameEngine.errorOccurred), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_this$update, "aiStuck", _this.gameEngine.aiStuck), _this$update));

        _this.reactor.dispatchEvent("onUpdate");
      });
      this.gameEngine.onUpdateCounter(function () {
        var _this$update2;

        _this.update("updateCounter", (_this$update2 = {
          "paused": _this.gameEngine.paused,
          "isReseted": _this.gameEngine.isReseted,
          "exited": _this.gameEngine.exited,
          "grid": _this.gameEngine.grid,
          "numFruit": _this.gameEngine.numFruit,
          "ticks": _this.gameEngine.ticks,
          "scoreMax": _this.gameEngine.scoreMax,
          "gameOver": _this.gameEngine.gameOver,
          "gameFinished": _this.gameEngine.gameFinished,
          "gameMazeWin": _this.gameEngine.gameMazeWin,
          "starting": _this.gameEngine.starting,
          "initialSpeed": _this.gameEngine.initialSpeed,
          "speed": _this.gameEngine.speed,
          "snakes": _this.gameEngine.snakes,
          "countBeforePlay": _this.gameEngine.countBeforePlay
        }, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_this$update2, "numFruit", _this.gameEngine.numFruit), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(_this$update2, "errorOccurred", _this.gameEngine.errorOccurred), _this$update2));

        _this.reactor.dispatchEvent("onUpdateCounter");
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      this.gameEngine.reset();
    }
  }, {
    key: "start",
    value: function start() {
      this.gameEngine.start();
    }
  }, {
    key: "stop",
    value: function stop() {
      this.gameEngine.stop();
    }
  }, {
    key: "finish",
    value: function finish(_finish) {
      this.gameEngine.stop(_finish);
    }
  }, {
    key: "pause",
    value: function pause() {
      this.gameEngine.pause();
    }
  }, {
    key: "kill",
    value: function kill() {
      this.gameEngine.kill();
    }
  }, {
    key: "tick",
    value: function tick() {
      this.gameEngine.paused = false;
      this.gameEngine.countBeforePlay = -1;
      this.gameEngine.tick();
    }
  }, {
    key: "exit",
    value: function exit() {
      this.gameEngine.exit();
    }
  }, {
    key: "forceStart",
    value: function forceStart() {
      this.gameEngine.forceStart();
    }
  }, {
    key: "updateEngine",
    value: function updateEngine(key, data) {
      this.gameEngine[key] = data;
    }
  }, {
    key: "setDisplayFPS",
    value: function setDisplayFPS(display) {
      this.gameUI.setDisplayFPS(display);
    }
  }, {
    key: "setNotification",
    value: function setNotification(notification) {
      this.gameUI.setNotification(notification);
    }
  }, {
    key: "closeRanking",
    value: function closeRanking() {
      this.gameUI.gameRanking && this.gameUI.gameRanking.forceClose();
    }
  }, {
    key: "setTimeToDisplay",
    value: function setTimeToDisplay(time) {
      this.gameUI.setTimeToDisplay(time);
    }
  }, {
    key: "setBestScore",
    value: function setBestScore(score) {
      this.gameUI.setBestScore(score);
    }
  }, {
    key: "destroySnakes",
    value: function destroySnakes(exceptionIds, types) {
      this.gameEngine.destroySnakes(exceptionIds, types);
    }
  }, {
    key: "key",
    value: function key(_key) {
      this.gameEngine.lastKey = _key;
      this.lastKey = _key;
      var playerSnake = this.snakes[this.getCurrentPlayer()];

      if (playerSnake != null && playerSnake.lastKey != null) {
        playerSnake.lastKey = _key;
      }
    }
  }, {
    key: "getCurrentPlayer",
    value: function getCurrentPlayer() {
      if (this.snakes != null) {
        var nbPlayers = this.getNBPlayer(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HUMAN);
        var nbPlayersHybrid = this.getNBPlayer(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HYBRID_HUMAN_AI);

        for (var i = 0; i < this.snakes.length; i++) {
          if (this.currentPlayer == null && nbPlayers <= 1 && nbPlayersHybrid <= 1 && this.snakes[i] && (this.snakes[i].player == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HUMAN || this.snakes[i].player == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HYBRID_HUMAN_AI) || this.currentPlayer == i + 1) {
            return i;
          }
        }
      }

      return -1;
    }
  }, {
    key: "getNBPlayer",
    value: function getNBPlayer(type) {
      var numPlayer = 0;

      if (this.snakes != null) {
        for (var i = 0; i < this.snakes.length; i++) {
          if (this.snakes[i] && this.snakes[i].player == type) {
            numPlayer++;
          }
        }
      }

      return numPlayer;
    }
  }, {
    key: "getPlayer",
    value: function getPlayer(num, type) {
      var numPlayer = 0;

      if (this.snakes != null) {
        for (var i = 0; i < this.snakes.length; i++) {
          if (this.snakes[i] && this.snakes[i].player == type) {
            numPlayer++;
          }

          if (numPlayer == num) {
            return this.snakes[i];
          }
        }
      }

      return null;
    }
  }, {
    key: "update",
    value: function update(message, data, updateEngine) {
      if (this.gameUI != null && data != null) {
        var dataKeys = Object.keys(data);

        for (var i = 0; i < dataKeys.length; i++) {
          if (!this.clientSidePredictionsMode && !this.onlineMode || this.clientSidePredictionsMode && (dataKeys[i] == "snakes" || dataKeys[i] == "grid" || dataKeys[i] == "offsetFrame" || dataKeys[i] == "gameOver") && (!this.onlineMode || this.onlineMode && dataKeys[i] != "errorOccurred") || !this.clientSidePredictionsMode && this.onlineMode && dataKeys[i] != "errorOccurred") {
            if (Object.prototype.hasOwnProperty.call(this.gameUI, dataKeys[i]) && typeof data[dataKeys[i]] !== "function" && typeof this.gameUI[dataKeys[i]] !== "function") {
              this.gameUI[dataKeys[i]] = data[dataKeys[i]];
            }

            if (updateEngine) {
              if (data.snakes && data.snakes[this.getCurrentPlayer()]) {
                data.snakes[this.getCurrentPlayer()].lastKey = this.lastKey;
                this.lastKey = -1;
              }

              if (data.grid) {
                data.grid.rngGame = null;
                data.grid.rngGrid = null;
              }

              this.updateEngine(dataKeys[i], data[dataKeys[i]]);
            }

            if (Object.prototype.hasOwnProperty.call(this, dataKeys[i]) && typeof data[dataKeys[i]] !== "function" && typeof this[dataKeys[i]] !== "function") {
              this[dataKeys[i]] = data[dataKeys[i]];
            }
          }
        }

        if (data.hasOwnProperty("killed") && data.killed && this.gameUI && this.gameUI.setKill) {
          this.gameUI.setKill();
        }
      }
    }
  }, {
    key: "onReset",
    value: function onReset(callback) {
      this.reactor.addEventListener("onReset", callback);
    }
  }, {
    key: "onStart",
    value: function onStart(callback) {
      this.reactor.addEventListener("onStart", callback);
    }
  }, {
    key: "onContinue",
    value: function onContinue(callback) {
      this.reactor.addEventListener("onContinue", callback);
    }
  }, {
    key: "onStop",
    value: function onStop(callback) {
      this.reactor.addEventListener("onStop", callback);
    }
  }, {
    key: "onPause",
    value: function onPause(callback) {
      this.reactor.addEventListener("onPause", callback);
    }
  }, {
    key: "onExit",
    value: function onExit(callback) {
      this.reactor.addEventListener("onExit", callback);
    }
  }, {
    key: "onKill",
    value: function onKill(callback) {
      this.reactor.addEventListener("onKill", callback);
    }
  }, {
    key: "onScoreIncreased",
    value: function onScoreIncreased(callback) {
      this.reactor.addEventListener("onScoreIncreased", callback);
    }
  }]);

  return GameController;
}();



/***/ }),

/***/ "./src/engine/GameControllerSocket.js":
/*!********************************************!*\
  !*** ./src/engine/GameControllerSocket.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GameControllerSocket; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _GameController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GameController */ "./src/engine/GameController.js");
/* harmony import */ var _Grid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Grid */ "./src/engine/Grid.js");
/* harmony import */ var _Snake__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Snake */ "./src/engine/Snake.js");
/* harmony import */ var _Position__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Position */ "./src/engine/Position.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! jsgametools */ "./node_modules/jsgametools/lib/JSGameTools.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(jsgametools__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _Shim__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../Shim */ "./src/Shim.js");






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */








var GameControllerSocket = /*#__PURE__*/function (_GameController) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(GameControllerSocket, _GameController);

  var _super = _createSuper(GameControllerSocket);

  function GameControllerSocket(socket, ui, enableClientSidePredictions, settings) {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GameControllerSocket);

    _this = _super.call(this, new _Shim__WEBPACK_IMPORTED_MODULE_11__["Game"](null, null, null, null, null, null, null, null, null, null, null, settings, ui, true), ui);
    _this.enableClientSidePredictions = enableClientSidePredictions || false;
    _this.socket = socket;
    _this.pingLatency = -1;
    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GameControllerSocket, [{
    key: "parseData",
    value: function parseData(m, d, updateEngine) {
      var data = [m, d];

      if (data.length > 1) {
        var grid = this.grid;

        if (data[1].hasOwnProperty("grid") && data[1]["grid"] != null && data[1]["grid"]["grid"] != null) {
          grid = Object.assign(new _Grid__WEBPACK_IMPORTED_MODULE_7__["default"](), data[1]["grid"]);
          data[1]["grid"] = grid;
        }

        if (data[1].hasOwnProperty("snakes") && data[1]["snakes"] != null) {
          for (var i = 0; i < data[1]["snakes"].length; i++) {
            data[1]["snakes"][i].grid = grid;
            data[1]["snakes"][i] = Object.assign(new _Snake__WEBPACK_IMPORTED_MODULE_8__["default"](), data[1]["snakes"][i]);

            for (var j = 0; j < data[1]["snakes"][i].queue.length; j++) {
              data[1]["snakes"][i].queue[j] = Object.assign(new _Position__WEBPACK_IMPORTED_MODULE_9__["default"](), data[1]["snakes"][i].queue[j]);
            }
          }
        }

        this.update(data[0], data[1], updateEngine);
      }
    }
  }, {
    key: "init",
    value: function init() {
      var _this2 = this;

      this.socket.on("init", function (data) {
        _this2.parseData("init", data, _this2.enableClientSidePredictions);

        _this2.gameEngine.update("update", {
          "engineLoading": false
        }, true);

        if (_this2.enableClientSidePredictions) {
          _this2.gameEngine.update("update", {
            "clientSidePredictionsMode": true
          }, true);

          if (data && data["currentPlayer"]) _this2.gameEngine.currentPlayer = data["currentPlayer"];
          if (data && data["countBeforePlay"] < 0) _this2.gameEngine.forceStart();
        }
      });
      this.socket.on("reset", function (data) {
        _this2.parseData("reset", data, _this2.enableClientSidePredictions);

        _this2.reactor.dispatchEvent("onReset");
      });
      this.socket.on("start", function (data) {
        _this2.parseData("start", data);

        _this2.reactor.dispatchEvent("onStart");
      });
      this.socket.on("pause", function (data) {
        _this2.parseData("pause", data);

        _this2.reactor.dispatchEvent("onPause");
      });
      this.socket.on("continue", function (data) {
        _this2.parseData("continue", data);

        _this2.reactor.dispatchEvent("onContinue");
      });
      this.socket.on("stop", function (data) {
        _this2.parseData("stop", data, _this2.enableClientSidePredictions);

        _this2.reactor.dispatchEvent("onStop");
      });
      this.socket.on("exit", function (data) {
        _this2.parseData("exit", data);

        _this2.gameEngine.exit();

        _this2.reactor.dispatchEvent("onExit");
      });
      this.socket.on("kill", function (data) {
        _this2.parseData("kill", data);

        _this2.gameEngine.kill();

        _this2.reactor.dispatchEvent("onKill");
      });
      this.socket.on("scoreIncreased", function (data) {
        _this2.parseData("scoreIncreased", data);

        _this2.reactor.dispatchEvent("onScoreIncreased");
      });
      this.socket.on("update", function (data) {
        _this2.parseData("update", data, _this2.enableClientSidePredictions);

        if (!_this2.gameEngine.clientSidePredictionsMode) {
          _this2.gameUI.offsetFrame = 0;
        }

        _this2.reactor.dispatchEvent("onUpdate");
      });
      this.socket.on("updateCounter", function (data) {
        _this2.parseData("updateCounter", data);

        if (data && data.countBeforePlay < 0) {
          if (_this2.enableClientSidePredictions) {
            _this2.gameEngine.forceStart();
          }
        }

        _this2.reactor.dispatchEvent("onUpdateCounter");
      });
      this.socket.on("notification", function (text, duration, textColor, backgroundColor, foreground) {
        _this2.gameUI.setNotification(new jsgametools__WEBPACK_IMPORTED_MODULE_10__["NotificationMessage"](text, textColor, backgroundColor, duration, null, null, null, foreground));
      });
      this.socket.once("error", function () {
        _this2.gameUI.setNotification(new jsgametools__WEBPACK_IMPORTED_MODULE_10__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_5__["default"].t("engine.servers.errorConnection"), null, GameConstants.Setting.ERROR_NOTIF_COLOR, null, null, null, null, true));
      });
      this.socket.once("connect_error", function () {
        _this2.gameUI.setNotification(new jsgametools__WEBPACK_IMPORTED_MODULE_10__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_5__["default"].t("engine.servers.errorConnection"), null, GameConstants.Setting.ERROR_NOTIF_COLOR, null, null, null, null, true));
      });
      this.socket.once("connect_timeout", function () {
        _this2.gameUI.setNotification(new jsgametools__WEBPACK_IMPORTED_MODULE_10__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_5__["default"].t("engine.servers.errorConnection"), null, GameConstants.Setting.ERROR_NOTIF_COLOR, null, null, null, null, true));
      });
      this.socket.once("reconnect_error", function () {
        _this2.gameUI.setNotification(new jsgametools__WEBPACK_IMPORTED_MODULE_10__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_5__["default"].t("engine.servers.errorConnection"), null, GameConstants.Setting.ERROR_NOTIF_COLOR, null, null, null, null, true));
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      this.socket.emit("reset");
    }
  }, {
    key: "start",
    value: function start() {
      this.socket.emit("start");
    }
  }, {
    key: "stop",
    value: function stop() {
      this.socket.emit("stop");
    }
  }, {
    key: "finish",
    value: function finish(_finish) {
      this.socket.emit(_finish ? "finish" : "stop");
    }
  }, {
    key: "pause",
    value: function pause() {
      this.socket.emit("pause");
    }
  }, {
    key: "kill",
    value: function kill() {
      this.socket.emit("kill");
    }
  }, {
    key: "tick",
    value: function tick() {
      this.socket.emit("tick");
    }
  }, {
    key: "exit",
    value: function exit() {
      this.socket.emit("exit");
    }
  }, {
    key: "key",
    value: function key(_key) {
      this.socket.emit("key", _key);
      this.gameEngine.key(_key);
      this.lastKey = this.gameEngine.lastKey;
    }
  }, {
    key: "forceStart",
    value: function forceStart() {
      this.socket.emit("forceStart");
    }
  }, {
    key: "updateEngine",
    value: function updateEngine(key, value) {
      this.gameEngine.updateEngine(key, value);
    }
  }]);

  return GameControllerSocket;
}(_GameController__WEBPACK_IMPORTED_MODULE_6__["default"]);



/***/ }),

/***/ "./src/engine/GameControllerWorker.js":
/*!********************************************!*\
  !*** ./src/engine/GameControllerWorker.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GameControllerWorker; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _GameController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./GameController */ "./src/engine/GameController.js");
/* harmony import */ var _Grid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Grid */ "./src/engine/Grid.js");
/* harmony import */ var _Snake__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Snake */ "./src/engine/Snake.js");
/* harmony import */ var _Position__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Position */ "./src/engine/Position.js");






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */





var GameControllerWorker = /*#__PURE__*/function (_GameController) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(GameControllerWorker, _GameController);

  var _super = _createSuper(GameControllerWorker);

  function GameControllerWorker(game, ui) {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GameControllerWorker);

    _this = _super.call(this, game, ui);
    _this.worker;
    _this.workerReady = false;
    _this.messageQueue = []; // Queue of message if the worker is still loading

    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GameControllerWorker, [{
    key: "init",
    value: function init() {
      var _this2 = this;

      if (window.Worker) {
        try {
          this.worker = new Worker("dist/GameEngineWorker.js");
        } catch (e) {
          this.update("init", {
            "errorOccurred": true
          });
          return;
        }

        this.update("init", {
          "engineLoading": true
        });

        if (this.worker instanceof Worker) {
          if (this.gameEngine && this.gameEngine.grid && this.gameEngine.grid.rngGrid) this.gameEngine.grid.rngGrid = null;
          if (this.gameEngine && this.gameEngine.grid && this.gameEngine.grid.rngGame) this.gameEngine.grid.rngGame = null;

          this.worker.onmessage = function (e) {
            var data = e.data;

            if (data == "ready") {
              _this2.workerReady = true;

              _this2.update("init", {
                "engineLoading": false
              });

              _this2.worker.postMessage(["init", _this2.gameEngine]);

              _this2.passQueuedMessages();
            } else {
              if (data.length > 1) {
                var grid = _this2.gameUI.grid;

                if (data[1].hasOwnProperty("grid") && data[1]["grid"] != null) {
                  grid = Object.assign(new _Grid__WEBPACK_IMPORTED_MODULE_6__["default"](), data[1]["grid"]);
                  data[1]["grid"] = grid;
                }

                if (data[1].hasOwnProperty("snakes") && data[1]["snakes"] != null) {
                  for (var i = 0; i < data[1]["snakes"].length; i++) {
                    data[1]["snakes"][i].grid = grid;
                    data[1]["snakes"][i] = Object.assign(new _Snake__WEBPACK_IMPORTED_MODULE_7__["default"](), data[1]["snakes"][i]);

                    for (var j = 0; j < data[1]["snakes"][i].queue.length; j++) {
                      data[1]["snakes"][i].queue[j] = Object.assign(new _Position__WEBPACK_IMPORTED_MODULE_8__["default"](), data[1]["snakes"][i].queue[j]);
                    }
                  }
                }

                _this2.update(data[0], data[1]);

                switch (data[0]) {
                  case "reset":
                    _this2.reactor.dispatchEvent("onReset");

                    break;

                  case "start":
                    _this2.reactor.dispatchEvent("onStart");

                    break;

                  case "pause":
                    _this2.reactor.dispatchEvent("onPause");

                    break;

                  case "continue":
                    _this2.reactor.dispatchEvent("onContinue");

                    break;

                  case "stop":
                    _this2.reactor.dispatchEvent("onStop");

                    break;

                  case "exit":
                    _this2.reactor.dispatchEvent("onExit");

                    break;

                  case "kill":
                    _this2.reactor.dispatchEvent("onKill");

                    _this2.worker.terminate();

                    break;

                  case "scoreIncreased":
                    _this2.reactor.dispatchEvent("onScoreIncreased");

                    break;

                  case "update":
                    _this2.reactor.dispatchEvent("onUpdate");

                    break;

                  case "updateCounter":
                    _this2.reactor.dispatchEvent("onUpdateCounter");

                    break;
                }
              }
            }
          };
        } else {
          if (this.gameUI != null) {
            this.update("init", {
              "errorOccurred": true
            });
          }
        }
      } else {
        if (this.gameUI != null) {
          this.update("init", {
            "errorOccurred": true
          });
        }
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.passMessage(["reset"]);
    }
  }, {
    key: "start",
    value: function start() {
      this.passMessage(["start"]);
    }
  }, {
    key: "stop",
    value: function stop() {
      this.passMessage(["stop"]);
    }
  }, {
    key: "finish",
    value: function finish(_finish) {
      this.passMessage([_finish ? "finish" : "stop"]);
    }
  }, {
    key: "pause",
    value: function pause() {
      this.passMessage(["pause"]);
    }
  }, {
    key: "kill",
    value: function kill() {
      this.passMessage(["kill"]);
    }
  }, {
    key: "tick",
    value: function tick() {
      this.passMessage(["tick"]);
    }
  }, {
    key: "exit",
    value: function exit() {
      this.passMessage(["exit"]);
    }
  }, {
    key: "key",
    value: function key(_key) {
      this.passMessage(["key", _key]);
    }
  }, {
    key: "forceStart",
    value: function forceStart() {
      this.passMessage(["forceStart"]);
    }
  }, {
    key: "updateEngine",
    value: function updateEngine(key, data) {
      this.passMessage(["update", {
        "key": key,
        "data": data
      }]);
    }
  }, {
    key: "destroySnakes",
    value: function destroySnakes(exceptionIds, types) {
      this.passMessage(["destroySnakes", exceptionIds, types]);
    }
  }, {
    key: "passMessage",
    value: function passMessage(message) {
      if (this.workerReady && this.worker instanceof Worker) {
        this.worker.postMessage(message);
      } else {
        this.messageQueue.push(message);
      }
    }
  }, {
    key: "passQueuedMessages",
    value: function passQueuedMessages() {
      var _this3 = this;

      if (this.workerReady && this.worker instanceof Worker) {
        this.messageQueue.forEach(function (message) {
          _this3.worker.postMessage(message);
        });
        this.messageQueue = [];
      }
    }
  }]);

  return GameControllerWorker;
}(_GameController__WEBPACK_IMPORTED_MODULE_5__["default"]);



/***/ }),

/***/ "./src/engine/GameEngine.js":
/*!**********************************!*\
  !*** ./src/engine/GameEngine.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GameEngine; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _GameUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameUtils */ "./src/engine/GameUtils.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Constants */ "./src/engine/Constants.js");
/* harmony import */ var _Reactor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Reactor */ "./src/engine/Reactor.js");
/* harmony import */ var _Grid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Grid */ "./src/engine/Grid.js");
/* harmony import */ var _Snake__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Snake */ "./src/engine/Snake.js");
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! seedrandom */ "./node_modules/seedrandom/index.js");
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(seedrandom__WEBPACK_IMPORTED_MODULE_7__);



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */







var GameEngine = /*#__PURE__*/function () {
  function GameEngine(grid, snake, speed, enablePause, enableRetry, progressiveSpeed, aiStuckLimit) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GameEngine);

    // Game settings
    this.grid = grid;
    this.snakes = snake;
    this.speed = speed == null ? 8 : speed;
    this.initialSpeed = speed == null ? 8 : speed;
    this.initialSpeedUntouched = speed == null ? 8 : speed;
    this.enablePause = enablePause == null ? true : enablePause;
    this.enableRetry = enableRetry == null ? true : enableRetry;
    this.progressiveSpeed = progressiveSpeed == null ? false : progressiveSpeed;
    this.aiStuckLimit = aiStuckLimit == null ? 3 : aiStuckLimit;
    this.countBeforePlay = 3; // Game variables

    this.lastKey = -1;
    this.numFruit = 1;
    this.ticks = 0; // Game state variables

    this.firstStart = true;
    this.starting = false;
    this.paused = true;
    this.exited = false;
    this.killed = false;
    this.isReseted = true;
    this.gameOver = false;
    this.gameFinished = false; // only used if 2 and more snakes

    this.gameMazeWin = false; // used in maze mode

    this.scoreMax = false;
    this.errorOccurred = false;
    this.clientSidePredictionsMode = false; // Enable client-side predictions mode for the online game (disable some functions)

    this.aiStuck = false; // true if one AI is stuck - disabled if an human player is playing
    // Intervals, timeouts, frames

    this.intervalPlay; // Events

    this.reactor = new _Reactor__WEBPACK_IMPORTED_MODULE_4__["default"]();
    this.reactor.registerEvent("onStart");
    this.reactor.registerEvent("onPause");
    this.reactor.registerEvent("onContinue");
    this.reactor.registerEvent("onReset");
    this.reactor.registerEvent("onStop");
    this.reactor.registerEvent("onExit");
    this.reactor.registerEvent("onKill");
    this.reactor.registerEvent("onScoreIncreased");
    this.reactor.registerEvent("onUpdate");
    this.reactor.registerEvent("onUpdateCounter");
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GameEngine, [{
    key: "init",
    value: function init() {
      if (!this.clientSidePredictionsMode) {
        if (this.snakes == null) {
          this.errorOccurred = true;
          this.snakes = [];
        } else if (!Array.isArray(this.snakes)) {
          this.snakes = [this.snakes];
        } else if (Array.isArray(this.snakes) && this.snakes.length <= 0 || this.grid.maze && this.snakes.length > 1) {
          this.errorOccurred = true;
        }

        if (this.grid instanceof _Grid__WEBPACK_IMPORTED_MODULE_5__["default"] == false) {
          this.errorOccurred = true;
        } else if (!this.errorOccurred) {
          this.initGridAndSnakes(); // Init Snake colors

          var startHue = _GameUtils__WEBPACK_IMPORTED_MODULE_2__["default"].randRange(0, 360, this.grid ? new seedrandom__WEBPACK_IMPORTED_MODULE_7___default.a(this.grid.seedGame) : null);

          for (var i = 0; i < this.snakes.length; i++) {
            if (this.snakes[i] instanceof _Snake__WEBPACK_IMPORTED_MODULE_6__["default"] == false) {
              this.errorOccurred = true;
            } else {
              startHue = _GameUtils__WEBPACK_IMPORTED_MODULE_2__["default"].addHue(startHue, Math.round(360 / this.snakes.length));
              this.snakes[i].color = startHue;
            }
          }
        }
      }
    }
  }, {
    key: "initGridAndSnakes",
    value: function initGridAndSnakes() {
      this.grid.reset();
      this.grid.init();

      if (this.snakes != null) {
        for (var i = 0; i < this.snakes.length; i++) {
          this.snakes[i].reset();
        }

        for (var _i = 0; _i < this.snakes.length; _i++) {
          this.snakes[_i].init();
        }
      }

      this.grid.setFruit(this.snakes.length);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.paused = true;
      this.isReseted = true;
      this.exited = false;
      this.clearIntervalPlay();
      this.numFruit = 1;
      this.ticks = 0;
      this.lastKey = -1;
      this.scoreMax = false;
      this.errorOccurred = false;
      this.gameOver = false;
      this.gameFinished = false;
      this.gameMazeWin = false;
      this.starting = false;
      this.initialSpeed = this.initialSpeedUntouched;
      this.speed = this.initialSpeedUntouched;
      this.aiStuck = false;

      if (this.grid.seedGrid) {
        this.grid.seedGrid = "" + (parseInt(this.grid.seedGrid) + 1);
      }

      if (this.grid.seedGame) {
        this.grid.seedGame = "" + (parseInt(this.grid.seedGame) + 1);
      }

      this.initGridAndSnakes();
      this.reactor.dispatchEvent("onReset");
      this.start();
    }
  }, {
    key: "start",
    value: function start() {
      var _this = this;

      this.reactor.dispatchEvent("onUpdateCounter");

      if (!this.errorOccurred) {
        if (this.snakes != null) {
          for (var i = 0; i < this.snakes.length; i++) {
            if (this.snakes[i].errorInit) {
              this.errorOccurred = true;
              this.stop();
            }
          }
        }

        if (this.paused && !this.gameOver && !this.killed && !this.scoreMax && !this.starting) {
          this.starting = true;

          if (!this.firstStart) {
            this.reactor.dispatchEvent("onContinue");
          }

          this.countBeforePlay = 3;
          this.clearIntervalPlay();
          this.reactor.dispatchEvent("onUpdateCounter");
          this.intervalPlay = setInterval(function () {
            _this.countBeforePlay--;

            _this.reactor.dispatchEvent("onUpdateCounter");

            if (_this.countBeforePlay < 0) {
              _this.forceStart();
            }
          }, 1000);
        }
      }
    }
  }, {
    key: "forceStart",
    value: function forceStart() {
      this.clearIntervalPlay();
      this.countBeforePlay = -1;
      this.paused = false;
      this.isReseted = false;
      this.firstStart = false;
      this.starting = false;
      this.reactor.dispatchEvent("onStart");
      this.tick();
    }
  }, {
    key: "clearIntervalPlay",
    value: function clearIntervalPlay() {
      clearInterval(this.intervalPlay);
    }
  }, {
    key: "continue",
    value: function _continue() {
      if (!this.clientSidePredictionsMode) {
        this.start();
        this.reactor.dispatchEvent("onContinue");
      }
    }
  }, {
    key: "stop",
    value: function stop(finish) {
      if (!this.gameOver && !this.clientSidePredictionsMode) {
        this.paused = true;
        this.gameOver = true;
        if (finish) this.gameFinished = true;
        this.clearIntervalPlay();
        this.reactor.dispatchEvent("onStop");
      }
    }
  }, {
    key: "pause",
    value: function pause() {
      if (!this.paused && !this.clientSidePredictionsMode) {
        this.paused = true;
        this.clearIntervalPlay();
        this.reactor.dispatchEvent("onPause");
      }
    }
  }, {
    key: "kill",
    value: function kill() {
      if (!this.killed) {
        this.paused = true;
        this.gameOver = true;
        this.killed = true;

        if (this.snakes != null) {
          for (var i = 0; i < this.snakes.length; i++) {
            this.snakes[i].kill();
            this.snakes[i] = null;
          }
        }

        this.clearIntervalPlay();
        this.grid = null;
        this.snakes = null;
        this.reactor.dispatchEvent("onKill");
      }
    }
  }, {
    key: "exit",
    value: function exit() {
      if (!this.exited) {
        this.stop();
        this.exited = true;
        this.reactor.dispatchEvent("onExit");
      }
    }
  }, {
    key: "destroySnakes",
    value: function destroySnakes(exceptionIds, types) {
      for (var i = 0; i < this.snakes.length; i++) {
        if (exceptionIds && Array.isArray(exceptionIds) && exceptionIds.indexOf(i) < 0 && types.indexOf(this.snakes[i].player) > -1) this.snakes[i].setGameOver(this.ticks);
      }
    }
  }, {
    key: "getNBPlayer",
    value: function getNBPlayer(type) {
      var numPlayer = 0;

      if (this.snakes != null) {
        for (var i = 0; i < this.snakes.length; i++) {
          if (this.snakes[i].player == type) {
            numPlayer++;
          }
        }
      }

      return numPlayer;
    }
  }, {
    key: "getPlayer",
    value: function getPlayer(num, type) {
      var numPlayer = 0;

      if (this.snakes != null) {
        for (var i = 0; i < this.snakes.length; i++) {
          if (this.snakes[i].player == type) {
            numPlayer++;
          }

          if (numPlayer == num) {
            return this.snakes[i];
          }
        }
      }

      return null;
    }
  }, {
    key: "tick",
    value: function tick() {
      var _this2 = this;

      setTimeout(function () {
        _this2.doTick();
      }, this.initialSpeed * _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Setting.TIME_MULTIPLIER);
    }
  }, {
    key: "doTick",
    value: function doTick() {
      if (!this.paused && !this.killed) {
        if (this.lastTime == 0) this.lastTime = time;
        this.ticks++;
        var scoreIncreased,
            setFruitError = false;

        if (this.grid && (!this.grid.maze || this.grid.mazeForceAuto || this.grid.maze && this.getNBPlayer(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HUMAN) <= 0 && this.getNBPlayer(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HYBRID_HUMAN_AI) <= 0 || this.grid.maze && (this.getNBPlayer(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HUMAN) > 0 || this.getNBPlayer(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HYBRID_HUMAN_AI) > 0) && (this.getPlayer(1, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HYBRID_HUMAN_AI) || this.getPlayer(1, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HUMAN)).lastKey != -1)) {
          for (var i = 0; i < this.snakes.length; i++) {
            var initialDirection = this.snakes[i].direction;
            var setFruit = false;
            var goldFruit = false;
            setFruitError = false;
            this.snakes[i].lastTailMoved = false;

            if (!this.snakes[i].gameOver && !this.snakes[i].scoreMax) {
              if (this.snakes[i].player == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HUMAN || this.snakes[i].player == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HYBRID_HUMAN_AI) {
                this.snakes[i].moveTo(this.snakes[i].lastKey);
                this.snakes[i].lastKey = -1;
              } else if (this.snakes[i].player == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.AI && (!this.clientSidePredictionsMode || this.clientSidePredictionsMode && this.snakes[i].aiLevel != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].AiLevel.RANDOM)) {
                this.snakes[i].moveTo(this.snakes[i].ai());
              }

              var headSnakePos = this.snakes[i].getHeadPosition();

              if (this.snakes[i].player == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HYBRID_HUMAN_AI && this.grid.isDeadPosition(this.snakes[i].getNextPosition(headSnakePos, this.snakes[i].direction))) {
                this.snakes[i].direction = initialDirection;
                this.snakes[i].moveTo(this.snakes[i].ai());
                this.snakes[i].lastKey = -1;
              }

              headSnakePos = this.snakes[i].getNextPosition(headSnakePos, this.snakes[i].direction);

              if (this.grid.isDeadPosition(headSnakePos)) {
                this.snakes[i].setGameOver(this.ticks);
              } else {
                if (this.grid.get(headSnakePos) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT || this.grid.get(headSnakePos) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT_GOLD) {
                  if (this.grid.get(headSnakePos) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT) {
                    this.snakes[i].score++;
                    this.grid.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, this.grid.fruitPos);
                    this.grid.fruitPos = null;
                  } else if (this.grid.get(headSnakePos) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT_GOLD) {
                    this.snakes[i].score += 3;
                    this.grid.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, this.grid.fruitPosGold);
                    this.grid.fruitPosGold = null;
                    goldFruit = true;
                  }

                  scoreIncreased = true;
                  this.snakes[i].insert(headSnakePos);

                  if (this.grid.maze) {
                    this.gameMazeWin = true;
                    this.gameFinished = true;
                    this.stop();
                  } else if (this.snakes[i].hasMaxScore() && this.snakes.length <= 1) {
                    this.scoreMax = true;
                    this.snakes[i].scoreMax = true;
                    this.stop();
                  } else {
                    this.numFruit++;
                    if (!goldFruit) setFruit = true;
                  }

                  if (this.snakes.length <= 1 && this.progressiveSpeed && this.snakes[i].score > 0 && this.initialSpeed > 1) {
                    this.initialSpeed = Math.ceil(-this.initialSpeedUntouched / 100 * this.snakes[i].score + this.initialSpeedUntouched);
                    this.initialSpeed = this.initialSpeed < 1 ? 1 : this.initialSpeed;
                  }
                } else {
                  this.snakes[i].insert(headSnakePos);

                  if (!this.grid.maze) {
                    this.snakes[i].remove();
                    this.snakes[i].lastTailMoved = true;
                  }
                }
              }
            }

            if (!this.scoreMax && setFruit && !this.clientSidePredictionsMode) {
              setFruitError = !this.grid.setFruit(this.snakes.length);
            }
          }

          if (!this.scoreMax && !setFruitError && (this.grid.detectCorridor(this.grid.fruitPos) || this.grid.isFruitSurrounded(this.grid.fruitPos, true)) && !this.clientSidePredictionsMode) {
            setFruitError = !this.grid.setFruit(this.snakes.length);
          }

          if (!this.scoreMax && this.grid.fruitPosGold != null && (this.grid.detectCorridor(this.grid.fruitPosGold) || this.grid.isFruitSurrounded(this.grid.fruitPosGold, true))) {
            this.grid.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, this.grid.fruitPosGold);
            this.grid.fruitPosGold = null;
          }

          var nbOver = 0;

          for (var j = 0; j < this.snakes.length; j++) {
            (this.snakes[j].gameOver || this.snakes[j].scoreMax) && nbOver++;
          } // Checking if the AIs are all stuck


          var endGameAIStuck = false;

          for (var k = 0; k < this.snakes.length; k++) {
            if (!this.snakes[k].gameOver && this.snakes[k].isAIStuck(1, 1)) {
              this.aiStuck = true;

              if (this.snakes[k].isAIStuck(this.aiStuckLimit, this.aiStuckLimit)) {
                // Limit of aiStuckLimit loops - end the game
                endGameAIStuck = true;
              } else {
                endGameAIStuck = false;
              }
            } else if ((this.snakes[k].player == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HUMAN || this.snakes[k].player == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.HYBRID_HUMAN_AI) && !this.snakes[k].gameOver || this.snakes[k].player == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].PlayerType.AI && !this.snakes[k].gameOver) {
              this.aiStuck = false;
              endGameAIStuck = false;
              break;
            }
          }

          if (nbOver >= this.snakes.length || setFruitError || endGameAIStuck) {
            this.stop();

            if (this.snakes.length > 1) {
              this.gameFinished = true;
            }
          }

          this.reactor.dispatchEvent("onUpdate");

          if (scoreIncreased) {
            this.reactor.dispatchEvent("onScoreIncreased");
          }
        }

        this.tick();
      }
    }
  }, {
    key: "onReset",
    value: function onReset(callback) {
      this.reactor.addEventListener("onReset", callback);
    }
  }, {
    key: "onStart",
    value: function onStart(callback) {
      this.reactor.addEventListener("onStart", callback);
    }
  }, {
    key: "onContinue",
    value: function onContinue(callback) {
      this.reactor.addEventListener("onContinue", callback);
    }
  }, {
    key: "onStop",
    value: function onStop(callback) {
      this.reactor.addEventListener("onStop", callback);
    }
  }, {
    key: "onPause",
    value: function onPause(callback) {
      this.reactor.addEventListener("onPause", callback);
    }
  }, {
    key: "onExit",
    value: function onExit(callback) {
      this.reactor.addEventListener("onExit", callback);
    }
  }, {
    key: "onKill",
    value: function onKill(callback) {
      this.reactor.addEventListener("onKill", callback);
    }
  }, {
    key: "onScoreIncreased",
    value: function onScoreIncreased(callback) {
      this.reactor.addEventListener("onScoreIncreased", callback);
    }
  }, {
    key: "onUpdate",
    value: function onUpdate(callback) {
      this.reactor.addEventListener("onUpdate", callback);
    }
  }, {
    key: "onUpdateCounter",
    value: function onUpdateCounter(callback) {
      this.reactor.addEventListener("onUpdateCounter", callback);
    }
  }]);

  return GameEngine;
}();



/***/ }),

/***/ "./src/engine/GameGroup.js":
/*!*********************************!*\
  !*** ./src/engine/GameGroup.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GameGroup; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Reactor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Reactor */ "./src/engine/Reactor.js");



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */


var GameGroup = /*#__PURE__*/function () {
  function GameGroup(games) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GameGroup);

    this.games = games == undefined ? [] : games;
    this.reactor = new _Reactor__WEBPACK_IMPORTED_MODULE_2__["default"]();
    this.reactor.registerEvent("onStart");
    this.reactor.registerEvent("onPause");
    this.reactor.registerEvent("onContinue");
    this.reactor.registerEvent("onStop");
    this.reactor.registerEvent("onReset");
    this.reactor.registerEvent("onExit");
    this.reactor.registerEvent("onScoreIncreased");
    this.init();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GameGroup, [{
    key: "init",
    value: function init() {
      var _this = this;

      for (var i = 0; i < this.games.length; i++) {
        if (i == 0) {
          this.games[i].enableKeyMenu = true;
        }

        this.games[i].onPause(function (i) {
          _this.pauseAll(i);
        }.bind(null, i));
        this.games[i].onContinue(function (i) {
          _this.startAll(i);
        }.bind(null, i));
        this.games[i].onExit(function (i) {
          _this.checkExit(i);
        }.bind(null, i));
        this.games[i].onStop(function (i) {
          _this.checkStop(i);
        }.bind(null, i));
        this.games[i].onReset(function (i) {
          _this.resetAll(i);
        }.bind(null, i));
        this.games[i].onScoreIncreased(function (i) {
          _this.checkOnScoreIncreased(i);
        }.bind(null, i));
      }
    }
  }, {
    key: "start",
    value: function start() {
      this.startAll(null);
    }
  }, {
    key: "startAll",
    value: function startAll(game) {
      for (var i = 0; i < this.games.length; i++) {
        if (this.games[i].paused && !this.games[i].starting && (game == null || i != game)) {
          this.games[i].start();
        }
      }

      this.reactor.dispatchEvent("onStart");
    }
  }, {
    key: "onStart",
    value: function onStart(callback) {
      this.reactor.addEventListener("onStart", callback);
    }
  }, {
    key: "pauseAll",
    value: function pauseAll(game) {
      for (var i = 0; i < this.games.length; i++) {
        if (!this.games[i].paused && (game == null || i != game)) {
          this.games[i].pause();
        }
      }

      this.reactor.dispatchEvent("onPause");
    }
  }, {
    key: "onPause",
    value: function onPause(callback) {
      this.reactor.addEventListener("onPause", callback);
    }
  }, {
    key: "resetAll",
    value: function resetAll(game) {
      for (var i = 0; i < this.games.length; i++) {
        if (!this.games[i].isReseted && (game == null || i != game)) {
          this.games[i].reset();
        }
      }

      this.reactor.dispatchEvent("onReset");
    }
  }, {
    key: "onReset",
    value: function onReset(callback) {
      this.reactor.addEventListener("onReset", callback);
    }
  }, {
    key: "checkExit",
    value: function checkExit(game) {
      var allExited = true;

      for (var i = 0; i < this.games.length; i++) {
        if (!this.games[i].exited) {
          allExited = false;
        }
      }

      if (allExited) {
        this.reactor.dispatchEvent("onExit");
      } else {
        this.startAll(game);
      }
    }
  }, {
    key: "onExit",
    value: function onExit(callback) {
      this.reactor.addEventListener("onExit", callback);
    }
  }, {
    key: "checkStop",
    value: function checkStop() {
      var allStopped = true;

      for (var i = 0; i < this.games.length; i++) {
        if (!this.games[i].gameOver) {
          allStopped = false;
        }
      }

      if (allStopped) {
        this.reactor.dispatchEvent("onStop");
      }
    }
  }, {
    key: "onStop",
    value: function onStop(callback) {
      this.reactor.addEventListener("onStop", callback);
    }
  }, {
    key: "stopAll",
    value: function stopAll(finished) {
      for (var i = 0; i < this.games.length; i++) {
        if (finished) {
          this.games[i].finish(true);
        } else {
          this.games[i].stop();
        }
      }
    }
  }, {
    key: "killAll",
    value: function killAll() {
      for (var i = 0; i < this.games.length; i++) {
        this.games[i].kill();
      }
    }
  }, {
    key: "checkOnScoreIncreased",
    value: function checkOnScoreIncreased() {
      this.reactor.dispatchEvent("onScoreIncreased");
    }
  }, {
    key: "onScoreIncreased",
    value: function onScoreIncreased(callback) {
      this.reactor.addEventListener("onScoreIncreased", callback);
    }
  }, {
    key: "setDisplayFPS",
    value: function setDisplayFPS(value) {
      for (var i = 0; i < this.games.length; i++) {
        this.games[i].setDisplayFPS(value);
      }
    }
  }, {
    key: "setNotification",
    value: function setNotification(notification) {
      for (var i = 0; i < this.games.length; i++) {
        this.games[i].setNotification(notification.copy());
      }
    }
  }, {
    key: "closeNotification",
    value: function closeNotification() {
      for (var i = 0; i < this.games.length; i++) {
        this.games[i].setNotification(null);
      }
    }
  }, {
    key: "errorOccurred",
    value: function errorOccurred() {
      for (var i = 0; i < this.games.length; i++) {
        if (this.games[i].errorOccurred) return true;
      }

      return false;
    }
  }, {
    key: "closeRanking",
    value: function closeRanking() {
      for (var i = 0; i < this.games.length; i++) {
        this.games[i].closeRanking();
      }

      return false;
    }
  }, {
    key: "destroySnakes",
    value: function destroySnakes(exceptionIds, types) {
      for (var i = 0; i < this.games.length; i++) {
        this.games[i].destroySnakes(exceptionIds, types);

        if (exceptionIds && Array.isArray(exceptionIds)) {
          for (var j = 0; j < exceptionIds.length; j++) {
            exceptionIds[j] -= 1;
          }
        }
      }
    }
  }, {
    key: "getWinners",
    value: function getWinners() {
      var winners = [];
      var index = [];
      var maxScore = -1;

      for (var i = 0; i < this.games.length; i++) {
        for (var j = 0; j < this.games[i].snakes.length; j++) {
          if (this.games[i].snakes[j].score > maxScore) {
            maxScore = this.games[i].snakes[j].score;
          }
        }
      }

      if (maxScore >= 0) {
        var idx = 0;

        for (var _i = 0; _i < this.games.length; _i++) {
          for (var _j = 0; _j < this.games[_i].snakes.length; _j++) {
            if (this.games[_i].snakes[_j].score >= maxScore) {
              winners.push(this.games[_i].snakes[_j]);
              index.push(idx);
            }

            idx++;
          }
        }
      }

      return {
        winners: winners,
        score: maxScore,
        index: index
      };
    }
  }]);

  return GameGroup;
}();



/***/ }),

/***/ "./src/engine/GameUtils.js":
/*!*********************************!*\
  !*** ./src/engine/GameUtils.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */
/* harmony default export */ __webpack_exports__["default"] = ({
  randRange: function randRange(min, max, rng) {
    // Return an integer between min (inclusive) and max (inclusive)
    return Math.floor((rng ? rng() : Math.random()) * (max - min + 1)) + min;
  },
  addHue: function addHue(hue, add) {
    var res = hue + add;

    if (res > 360) {
      return res - 360;
    } else if (res < 0) {
      return 360 + res;
    }

    return res;
  },
  shuffle: function shuffle(a, rng) {
    var j, x;

    for (var i = a.length - 1; i > 0; i--) {
      j = Math.floor((rng ? rng() : Math.random()) * (i + 1));
      x = a[i];
      a[i] = a[j];
      a[j] = x;
    }

    return a;
  },
  millisecondsFormat: function millisecondsFormat(milliseconds) {
    milliseconds /= 1000;
    return ("0" + Math.trunc(milliseconds / 60)).slice(-2) + ":" + ("0" + Math.trunc(milliseconds % 60)).slice(-2);
  },
  secondsFormat: function secondsFormat(seconds) {
    return this.millisecondsFormat(seconds * 1000);
  }
});

/***/ }),

/***/ "./src/engine/Grid.js":
/*!****************************!*\
  !*** ./src/engine/Grid.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Grid; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _GameUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameUtils */ "./src/engine/GameUtils.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Constants */ "./src/engine/Constants.js");
/* harmony import */ var _Position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Position */ "./src/engine/Position.js");
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! seedrandom */ "./node_modules/seedrandom/index.js");
/* harmony import */ var seedrandom__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(seedrandom__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _libs_lowlight_astar_min__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../libs/lowlight.astar.min */ "./libs/lowlight.astar.min.js");
/* harmony import */ var _libs_lowlight_astar_min__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_libs_lowlight_astar_min__WEBPACK_IMPORTED_MODULE_6__);



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */






var Grid = /*#__PURE__*/function () {
  function Grid(width, height, generateWalls, borderWalls, maze, customGrid, mazeForceAuto, seedGrid, seedGame, probGoldFruitIncrease) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Grid);

    this.width = width == undefined ? 20 : width;
    this.height = height == undefined ? 20 : height;
    this.generateWalls = generateWalls == undefined ? false : generateWalls;
    this.borderWalls = borderWalls == undefined ? false : borderWalls;
    this.maze = maze == undefined ? false : maze;
    this.mazeFirstPosition = new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](1, 1, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT);
    this.mazeForceAuto = mazeForceAuto == undefined ? false : mazeForceAuto;
    this.grid;
    this.initialGrid;
    this.fruitPos;
    this.fruitPosGold;
    this.customGrid = customGrid;
    this.seedGrid = seedGrid ? "" + parseInt(seedGrid) : undefined;
    this.seedGame = seedGrid ? "" + parseInt(seedGame) : undefined;
    this.rngGrid;
    this.rngGame;
    this.probGoldFruitIncrease = probGoldFruitIncrease == undefined ? false : probGoldFruitIncrease;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Grid, [{
    key: "init",
    value: function init() {
      if (this.customGrid != undefined || this.initialGrid != undefined) {
        var gridToCopy;

        if (this.initialGrid != undefined) {
          gridToCopy = this.initialGrid;
        } else {
          gridToCopy = this.customGrid;
        }

        this.height = gridToCopy.length;
        this.width = gridToCopy[0].length;
        this.initialGrid = new Array(this.height);
        this.grid = new Array(this.height);

        for (var i = 0; i < this.height; i++) {
          this.initialGrid[i] = gridToCopy[i].slice();
          this.grid[i] = gridToCopy[i].slice();
        }
      } else {
        this.grid = new Array(this.height);

        for (var _i = 0; _i < this.height; _i++) {
          this.grid[_i] = new Array(this.width);

          for (var j = 0; j < this.width; j++) {
            if (this.borderWalls && (_i == 0 || _i == this.height - 1 || j == 0 || j == this.width - 1) || this.generateWalls && this.rngGrid && this.rngGrid() > 0.65 || this.maze) {
              this.grid[_i][j] = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.WALL;
            } else {
              this.grid[_i][j] = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY;
            }
          }
        }

        if (this.maze) {
          this.generateMaze();
        } else if (this.generateWalls) {
          this.fixWalls(this.borderWalls);
        }
      }

      this.fruitPosGold = null;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.grid = undefined;
      this.initialGrid = undefined;
      this.fruitPos = undefined;
      this.fruitPosGold = undefined;
      this.rngGrid = new seedrandom__WEBPACK_IMPORTED_MODULE_5___default.a(this.seedGrid);
      this.rngGame = new seedrandom__WEBPACK_IMPORTED_MODULE_5___default.a(this.seedGame);
    }
  }, {
    key: "fixWalls",
    value: function fixWalls(borderWalls) {
      var startY, startX, endY, endX;

      if (borderWalls) {
        startY = 1;
        endY = this.height - 1;
        startX = 1;
        endX = this.width - 1;
      } else {
        startY = 0;
        endY = this.height;
        startX = 0;
        endX = this.width;
      }

      for (var i = startY; i < endY; i++) {
        for (var j = startX; j < endX; j++) {
          var currentPos = new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](j, i);
          var upperCase = this.getNextPosition(currentPos, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.UP);
          var upperLeftCase = this.getNextPosition(upperCase, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT);
          var upperRightCase = this.getNextPosition(upperCase, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT);
          var downCase = this.getNextPosition(currentPos, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM);
          var downLeftCase = this.getNextPosition(downCase, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT);
          var downRightCase = this.getNextPosition(downCase, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT);

          if (this.get(upperLeftCase) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.WALL || this.get(upperRightCase) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.WALL || this.get(downLeftCase) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.WALL || this.get(downRightCase) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.WALL) {
            this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, currentPos);
          }
        }
      }
    }
  }, {
    key: "maze_recursion",
    value: function maze_recursion(r, c) {
      var directions = _GameUtils__WEBPACK_IMPORTED_MODULE_2__["default"].shuffle([_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.UP, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT], this.rngGrid);

      for (var i = 0; i < directions.length; i++) {
        switch (directions[i]) {
          case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.UP:
            if (r - 2 <= 0) continue;

            if (this.get(new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c, r - 2)) != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY) {
              this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c, r - 2));
              this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c, r - 1));
              this.maze_recursion(r - 2, c);
            }

            break;

          case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT:
            if (c + 2 >= this.width - 1) continue;

            if (this.get(new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c + 2, r)) != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY) {
              this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c + 2, r));
              this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c + 1, r));
              this.maze_recursion(r, c + 2);
            }

            break;

          case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM:
            if (r + 2 >= this.height - 1) continue;

            if (this.get(new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c, r + 2)) != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY) {
              this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c, r + 2));
              this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c, r + 1));
              this.maze_recursion(r + 2, c);
            }

            break;

          case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT:
            if (c - 2 <= 0) continue;

            if (this.get(new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c - 2, r)) != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY) {
              this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c - 2, r));
              this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](c - 1, r));
              this.maze_recursion(r, c - 2);
            }

            break;
        }
      }
    }
  }, {
    key: "generateMaze",
    value: function generateMaze() {
      this.mazeFirstPosition = new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](1, 1, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT);
      this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, this.mazeFirstPosition);
      this.maze_recursion(1, 1);
    }
  }, {
    key: "set",
    value: function set(value, position) {
      this.grid[position.y][position.x] = value;
    }
  }, {
    key: "get",
    value: function get(position) {
      return this.grid[position.y][position.x];
    }
  }, {
    key: "valToChar",
    value: function valToChar(value) {
      switch (value) {
        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY:
          return "-";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE:
          return "o";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE_DEAD:
          return "O";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT:
          return "x";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.WALL:
          return "#";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SURROUNDED:
          return "/";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT_GOLD:
          return "X";
      }
    }
  }, {
    key: "getImageCase",
    value: function getImageCase(position) {
      switch (this.get(position)) {
        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.WALL:
          return "wall.png";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT:
          return "fruit.png";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT_GOLD:
          return "fruit_gold.png";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY:
          return "";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE:
          return "";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE_DEAD:
          return "";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SURROUNDED:
          return "";

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.CROSSED:
          return "";
      }

      return "unknown.png";
    }
  }, {
    key: "getGraph",
    value: function getGraph(ignoreSnakePos) {
      var res = new Array(this.height);

      for (var i = 0; i < this.height; i++) {
        res[i] = new Array(this.width);

        for (var j = 0; j < this.width; j++) {
          var currentPos = new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](j, i);

          if (ignoreSnakePos && this.get(currentPos) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE) {
            res[i][j] = 0;
          } else if (this.isDeadPosition(currentPos)) {
            res[i][j] = 1;
          } else {
            res[i][j] = 0;
          }
        }
      }

      return res;
    }
  }, {
    key: "getRandomPosition",
    value: function getRandomPosition() {
      return new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](_GameUtils__WEBPACK_IMPORTED_MODULE_2__["default"].randRange(0, this.width - 1, this.rngGame), _GameUtils__WEBPACK_IMPORTED_MODULE_2__["default"].randRange(0, this.height - 1, this.rngGame));
    }
  }, {
    key: "setFruit",
    value: function setFruit(numberPlayers, gold) {
      var tried = [1];

      if (!gold && this.fruitPos != null && this.get(this.fruitPos) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT) {
        this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, this.fruitPos);
      }

      if (this.getTotal(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY) > 0) {
        var randomPos, isCorridor;

        do {
          randomPos = this.getRandomPosition();
          isCorridor = this.detectCorridor(randomPos);

          if (isCorridor && this.get(randomPos) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY) {
            this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SURROUNDED, randomPos);
          }

          if (this.getTotal(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY) <= 0) {
            if (this.fruitPosGold) {
              return true;
            } else {
              return false;
            }
          }
        } while (this.get(randomPos) != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY || this.isFruitSurrounded(randomPos, true) || this.maze && !this.testFruitMaze(randomPos, tried) || isCorridor);

        if (gold) {
          this.fruitPosGold = randomPos;
          this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT_GOLD, randomPos);
        } else {
          this.fruitPos = randomPos;
          this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT, randomPos);
        }
      } else if (this.getTotal(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY) <= 0 && this.fruitPosGold) {
        return true;
      } else {
        return false;
      }

      if (!this.maze && this.fruitPosGold == null && _GameUtils__WEBPACK_IMPORTED_MODULE_2__["default"].randRange(1, this.probGoldFruitIncrease ? 3 : numberPlayers > 1 ? _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Setting.PROB_GOLD_FRUIT_MULTIPLE_PLAYERS : _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Setting.PROB_GOLD_FRUIT_1_PLAYER, this.rngGame) == 1) {
        this.setFruit(numberPlayers, true);
      }

      return true;
    }
  }, {
    key: "testFruitMaze",
    value: function testFruitMaze(position, tried) {
      // Maze mode: avoid putting the fruit too close to the Snake
      var grid = this.getGraph(true);
      var graph = new _libs_lowlight_astar_min__WEBPACK_IMPORTED_MODULE_6__["Astar"].Configuration(grid, {
        order: "yx",
        torus: false,
        diagonals: false,
        cutting: false,
        cost: function cost(a, b) {
          return b == 1 ? null : 1;
        }
      });
      var path = graph.path({
        x: this.mazeFirstPosition.x,
        y: this.mazeFirstPosition.y
      }, {
        x: position.x,
        y: position.y
      });

      if (path.length < Math.ceil(this.getTotal(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY) / (1 * Math.ceil(tried[0] / 4)))) {
        tried[0]++;
        return false;
      } else {
        tried[0]++;
        return true;
      }
    }
  }, {
    key: "isCaseSurrounded",
    value: function isCaseSurrounded(position, fill, foundVals, forbiddenVals) {
      if (!position) return false;
      var gridCopy = JSON.parse(JSON.stringify(this.grid));
      var checkList = [position];

      while (checkList.length > 0) {
        var currentPosition = checkList[0];
        checkList.shift();
        var directions = [this.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.UP), this.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM), this.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT), this.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT)]; // UP, DOWN, LEFT, RIGHT

        for (var i = 0; i < directions.length; i++) {
          if (gridCopy[directions[i].y][directions[i].x] != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.CROSSED && forbiddenVals.indexOf(this.get(directions[i])) > -1) {
            checkList.push(directions[i]);

            if (foundVals.indexOf(this.get(directions[i])) > -1) {
              return false;
            }

            if (fill && this.get(directions[i]) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY) {
              this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SURROUNDED, directions[i]);
              gridCopy[directions[i].y][directions[i].x] = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SURROUNDED;
            } else {
              gridCopy[directions[i].y][directions[i].x] = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.CROSSED;
            }
          }
        }
      }

      if (fill && (this.get(position) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY || this.get(position) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT) || this.get(position) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.FRUIT_GOLD) {
        this.set(_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SURROUNDED, position);
      }

      return true;
    }
  }, {
    key: "isFruitSurrounded",
    value: function isFruitSurrounded(position, fill) {
      var surrounded = this.isCaseSurrounded(position, false, [_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE], [_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE]);

      if (surrounded && fill) {
        this.isCaseSurrounded(position, true, [_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE], [_Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.EMPTY, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE]);
      }

      return surrounded;
    }
  }, {
    key: "detectCorridor",
    value: function detectCorridor(position) {
      var gridCopy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.grid ? JSON.parse(JSON.stringify(this.grid)) : null;
      if (this.maze || !position || !gridCopy) return false;
      var posTop = this.getNextPosition(position, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.TOP);
      var posBottom = this.getNextPosition(position, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM);
      var posRight = this.getNextPosition(position, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT);
      var posLeft = this.getNextPosition(position, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT);
      var isDeadPositionTop = this.isDeadPosition(posTop, true, true);
      var isDeadPositionBottom = this.isDeadPosition(posBottom, true, true);
      var isDeadPositionRight = this.isDeadPosition(posRight, true, true);
      var isDeadPositionLeft = this.isDeadPosition(posLeft, true, true);
      var numDeadPositionArround = isDeadPositionTop + isDeadPositionBottom + isDeadPositionRight + isDeadPositionLeft;

      if (numDeadPositionArround <= 1 || this.isDeadPosition(position, true)) {
        return false;
      } else if (numDeadPositionArround >= 3) {
        return true;
      }

      gridCopy[position.y][position.x] = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.CROSSED;
      var corridorTop = gridCopy[posTop.y][posTop.x] != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.CROSSED ? this.detectCorridor(posTop, gridCopy) : false;
      var corridorBottom = gridCopy[posBottom.y][posBottom.x] != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.CROSSED ? this.detectCorridor(posBottom, gridCopy) : false;
      var corridorLeft = gridCopy[posLeft.y][posLeft.x] != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.CROSSED ? this.detectCorridor(posLeft, gridCopy) : false;
      var corridorRight = gridCopy[posRight.y][posRight.x] != _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.CROSSED ? this.detectCorridor(posRight, gridCopy) : false;

      if (corridorBottom || corridorTop || corridorLeft || corridorRight) {
        return true;
      }

      return false;
    }
  }, {
    key: "getOnLine",
    value: function getOnLine(type, line) {
      var tot = 0;

      for (var j = 0; j < this.width; j++) {
        if (this.get(new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](j, line)) == type) {
          tot++;
        }
      }

      return tot;
    }
  }, {
    key: "getTotal",
    value: function getTotal(type) {
      var tot = 0;

      for (var i = 0; i < this.height; i++) {
        tot += this.getOnLine(type, i);
      }

      return tot;
    }
  }, {
    key: "getNextPosition",
    value: function getNextPosition(oldPos, newDirection) {
      var position = new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](oldPos.x, oldPos.y, newDirection);

      switch (newDirection) {
        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT:
          position.x--;
          position.direction = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT;
          break;

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.UP:
          position.y--;
          position.direction = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.UP;
          break;

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT:
          position.x++;
          position.direction = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT;
          break;

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM:
          position.y++;
          position.direction = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM;
          break;

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Key.LEFT:
          position.x--;
          position.direction = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Key.LEFT;
          break;

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Key.UP:
          position.y--;
          position.direction = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Key.UP;
          break;

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Key.RIGHT:
          position.x++;
          position.direction = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT;
          break;

        case _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Key.BOTTOM:
          position.y++;
          position.direction = _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM;
          break;
      }

      if (position.x < 0) {
        position.x = this.width - 1;
      } else if (position.x >= this.width) {
        position.x = 0;
      }

      if (position.y < 0) {
        position.y = this.height - 1;
      } else if (position.y >= this.height) {
        position.y = 0;
      }

      return position;
    }
  }, {
    key: "getDirectionTo",
    value: function getDirectionTo(position, otherPosition) {
      if (this.getNextPosition(position, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.UP).equals(otherPosition)) {
        return _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.UP;
      } else if (this.getNextPosition(position, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM).equals(otherPosition)) {
        return _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM;
      } else if (this.getNextPosition(position, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT).equals(otherPosition)) {
        return _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT;
      } else if (this.getNextPosition(position, _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT).equals(otherPosition)) {
        return _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT;
      }

      return -1;
    }
  }, {
    key: "invertDirection",
    value: function invertDirection(direction) {
      if (direction == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.UP) {
        return _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM;
      } else if (direction == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.BOTTOM) {
        return _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.UP;
      } else if (direction == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT) {
        return _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT;
      } else if (direction == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.LEFT) {
        return _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].Direction.RIGHT;
      }

      return null;
    }
  }, {
    key: "isDeadPosition",
    value: function isDeadPosition(position, excludeSnake, includeSurrounded) {
      return !excludeSnake && this.get(position) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE || this.get(position) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.WALL || this.get(position) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SNAKE_DEAD || !!includeSurrounded && this.get(position) == _Constants__WEBPACK_IMPORTED_MODULE_3__["default"].CaseType.SURROUNDED;
    }
  }, {
    key: "toString",
    value: function toString() {
      var res = "";

      for (var i = 0; i < this.height; i++) {
        for (var j = 0; j < this.width; j++) {
          res += this.valToChar(this.get(new _Position__WEBPACK_IMPORTED_MODULE_4__["default"](j, i))) + " ";
        }

        res += "\n";
      }

      return res;
    }
  }]);

  return Grid;
}();



/***/ }),

/***/ "./src/engine/OnlineClient.js":
/*!************************************!*\
  !*** ./src/engine/OnlineClient.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return OnlineClient; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! socket.io-client */ "./node_modules/socket.io-client/lib/index.js");
/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(socket_io_client__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _GameControllerSocket__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GameControllerSocket */ "./src/engine/GameControllerSocket.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Constants */ "./src/engine/Constants.js");



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */




var OnlineClient = /*#__PURE__*/function () {
  function OnlineClient() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, OnlineClient);

    this.url;
    this.port;
    this.socket;
    this.token;
    this.id;
    this.serverSettings;
    this.currentRoom;
    this.game;
    this.serverVersion;
    this.engineServerVersion;
    this.intervalReconnect;
    this.disconnected = false;
    this.creatingRoom = false;
    this.joiningRoom = false;
    this.loadingRooms = false;
    this.pingLatency = -1;
    this.ui;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(OnlineClient, [{
    key: "connect",
    value: function connect(url, port, callback) {
      var _this = this;

      this.disconnect();
      this.disconnected = false;
      this.url = url;
      this.port = port;

      if (this.url != null && this.url.charAt(this.url.length - 1) == "/") {
        this.url = this.url.substring(0, this.url.length - 1);
      }

      this.socket = new socket_io_client__WEBPACK_IMPORTED_MODULE_2___default.a(this.getURL() + (this.token ? "?token=" + this.token : ""));
      this.socket.once("connect", function () {
        _this.socket.once("authent", function (data) {
          if (data == _Constants__WEBPACK_IMPORTED_MODULE_4__["default"].GameState.AUTHENTICATION_SUCCESS) {
            callback(true);
          } else {
            callback(false, data, _this.socket.id);
          }
        });

        _this.socket.once("token", function (token) {
          _this.token = token;

          _this.connect(_this.url, _this.port, callback);
        });
      });
      this.socket.on("error", function (data) {
        callback(false, data);

        _this.disconnect();
      });
      this.socket.on("connect_error", function (data) {
        callback(false, data);

        _this.disconnect();
      });
      this.socket.once("disconnect", function () {
        if (!_this.disconnected) {
          callback(false, _Constants__WEBPACK_IMPORTED_MODULE_4__["default"].Error.DISCONNECTED);

          _this.disconnect();
        }
      });
      this.socket.on("pong", function (ms) {
        _this.pingLatency = ms;
        if (_this.ui) _this.ui.pingLatency = ms;
      });
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      if (this.socket != null) {
        this.disconnected = true;
        this.stopGame();
        this.socket.close();
        this.creatingRoom = false;
        this.joiningRoom = false;
        this.loadingRooms = false;
        this.pingLatency = -1;
      }
    }
  }, {
    key: "stopGame",
    value: function stopGame() {
      if (this.game != null && this.game.gameUI != null) {
        this.game.kill();
        this.game.gameUI.setKill();
        this.ui = null;
      }
    }
  }, {
    key: "displayRooms",
    value: function displayRooms(callback) {
      var _this2 = this;

      if (!this.loadingRooms) {
        this.loadingRooms = true;
        var ioRooms = new socket_io_client__WEBPACK_IMPORTED_MODULE_2___default.a(this.getURL() + "/rooms" + (this.token ? "?token=" + this.token : ""));
        ioRooms.once("rooms", function (data) {
          callback(true, data);
          ioRooms.close();
          _this2.loadingRooms = false;
          _this2.serverSettings = data.settings;
        });
        ioRooms.once("error", function (data) {
          callback(false, data);
          ioRooms.close();
          _this2.loadingRooms = false;
        });
        ioRooms.once("authent", function (data) {
          if (data == _Constants__WEBPACK_IMPORTED_MODULE_4__["default"].Error.AUTHENTICATION_REQUIRED) {
            callback(false, data);
            ioRooms.close();
            _this2.loadingRooms = false;
          }
        });
        ioRooms.once("connect_error", function () {
          callback(false, data);
          ioRooms.close();
          _this2.loadingRooms = false;
        });
      } else {
        callback(false, null);
      }
    }
  }, {
    key: "createRoom",
    value: function createRoom(data, callback) {
      var _this3 = this;

      if (!this.creatingRoom) {
        this.creatingRoom = true;
        var ioCreate = new socket_io_client__WEBPACK_IMPORTED_MODULE_2___default.a(this.getURL() + "/createRoom" + (this.token ? "?token=" + this.token : ""));
        ioCreate.once("connect", function () {
          ioCreate.emit("create", data);
        });
        ioCreate.once("process", function (data) {
          if (data.success != null) {
            callback({
              success: data.success,
              connection_error: false,
              code: data.code,
              errorCode: data.errorCode
            });
          } else {
            callback({
              success: false,
              connection_error: true,
              code: null,
              errorCode: data != null ? data : null
            });
          }

          ioCreate.close();
          _this3.creatingRoom = false;
        });
        ioCreate.once("error", function (data) {
          callback({
            success: false,
            connection_error: true,
            errorCode: data != null ? data : null
          });
          ioCreate.close();
          _this3.creatingRoom = false;
        });
        ioCreate.once("authent", function (data) {
          if (data == _Constants__WEBPACK_IMPORTED_MODULE_4__["default"].Error.AUTHENTICATION_REQUIRED) {
            callback({
              success: false,
              connection_error: true,
              errorCode: data != null ? data : null
            });
            ioCreate.close();
            _this3.creatingRoom = false;
          }
        });
        ioCreate.once("connect_error", function (data) {
          callback({
            success: false,
            connection_error: true,
            errorCode: data != null ? data : null
          });
          ioCreate.close();
          _this3.creatingRoom = false;
        });
      } else {
        callback({
          success: false,
          connection_error: false
        });
      }
    }
  }, {
    key: "joinRoom",
    value: function joinRoom(code, callback) {
      var _this4 = this;

      if (!this.joiningRoom) {
        this.joiningRoom = true;

        if (this.socket != null) {
          this.socket.emit("join-room", {
            code: code,
            version: _Constants__WEBPACK_IMPORTED_MODULE_4__["default"].Setting.APP_VERSION
          });
          this.socket.once("join-room", function (data) {
            _this4.currentRoom = code;
            callback(data);
            _this4.joiningRoom = false;
          });
        }
      } else {
        callback({
          success: false
        });
      }
    }
  }, {
    key: "getGame",
    value: function getGame(ui, settings) {
      if (this.socket != null && this.currentRoom && ui != null) {
        this.game = null;
        this.stopGame();
        this.game = new _GameControllerSocket__WEBPACK_IMPORTED_MODULE_3__["default"](this.socket, ui, settings && settings.onlineEnableClientSidePredictions && this.engineServerVersion == _Constants__WEBPACK_IMPORTED_MODULE_4__["default"].Setting.APP_VERSION, settings);
        ui.controller = this.game;
        ui.pingLatency = this.pingLatency;
        this.ui = ui;
        return this.game;
      }
    }
  }, {
    key: "getURL",
    value: function getURL() {
      if (this.port != null && this.port.trim() != "") {
        return this.url + ":" + this.port;
      }

      return this.url;
    }
  }]);

  return OnlineClient;
}();



/***/ }),

/***/ "./src/engine/Position.js":
/*!********************************!*\
  !*** ./src/engine/Position.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Position; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Constants */ "./src/engine/Constants.js");



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */


var Position = /*#__PURE__*/function () {
  function Position(x, y, direction) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Position);

    this.x = x;
    this.y = y;
    this.direction = direction;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Position, [{
    key: "copy",
    value: function copy() {
      return new Position(this.x, this.y, this.direction);
    }
  }, {
    key: "convertToKeyDirection",
    value: function convertToKeyDirection() {
      switch (this.direction) {
        case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP:
          return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.UP;

        case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT:
          return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.RIGHT;

        case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT:
          return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.LEFT;

        case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM:
          return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.BOTTOM;

        default:
          return this.direction;
      }
    }
  }, {
    key: "convertToSimpleDirection",
    value: function convertToSimpleDirection() {
      switch (this.direction) {
        case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.UP:
          return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP;

        case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.RIGHT:
          return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT;

        case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.LEFT:
          return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT;

        case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.BOTTOM:
          return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM;

        default:
          return this.direction;
      }
    }
  }, {
    key: "equals",
    value: function equals(otherPosition) {
      if (otherPosition != null) {
        return this.x == otherPosition.x && this.y == otherPosition.y;
      } else {
        return false;
      }
    }
  }]);

  return Position;
}();



/***/ }),

/***/ "./src/engine/Reactor.js":
/*!*******************************!*\
  !*** ./src/engine/Reactor.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Reactor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event */ "./src/engine/Event.js");



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */


var Reactor = /*#__PURE__*/function () {
  function Reactor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Reactor);

    this.events = {};
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Reactor, [{
    key: "registerEvent",
    value: function registerEvent(eventName) {
      this.events[eventName] = new _Event__WEBPACK_IMPORTED_MODULE_2__["default"](eventName);
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(eventName, eventArgs) {
      var callbacks = this.events[eventName].callbacks;

      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i](eventArgs);
      }
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(eventName, callback) {
      this.events[eventName].registerCallback(callback);
    }
  }]);

  return Reactor;
}();



/***/ }),

/***/ "./src/engine/Snake.js":
/*!*****************************!*\
  !*** ./src/engine/Snake.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Snake; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Constants */ "./src/engine/Constants.js");
/* harmony import */ var _Position__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Position */ "./src/engine/Position.js");
/* harmony import */ var _Grid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Grid */ "./src/engine/Grid.js");
/* harmony import */ var _ai_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ai/index */ "./src/engine/ai/index.js");



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */





var Snake = /*#__PURE__*/function () {
  function Snake(direction, length, grid, player, aiLevel, autoRetry, name, customAI) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Snake);

    this.direction = direction == undefined ? _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT : direction;
    this.initialDirection = this.direction;
    this.initialLength = length == undefined ? 3 : length;
    this.initTriedDirections = [];
    this.errorInit = false;
    this.grid = grid || new _Grid__WEBPACK_IMPORTED_MODULE_4__["default"]();
    this.queue = [];
    this.lastKey = -1;
    this.lastTail;
    this.lastTailMoved;
    this.ticksDead = 0;
    this.player = player == undefined ? _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HUMAN : player;
    this.aiLevel = aiLevel == undefined ? _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].AiLevel.DEFAULT : aiLevel;
    this.autoRetry = autoRetry == undefined ? false : autoRetry;
    this.score = 0;
    this.gameOver = false;
    this.scoreMax = false;
    this.color;
    this.name = name == undefined ? "Snake" : name;
    this.snakeAI = new _ai_index__WEBPACK_IMPORTED_MODULE_5__["SnakeAI"]();
    this.customAI = customAI;
    this.ticksWithoutAction = 0;
    this.initAI();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Snake, [{
    key: "init",
    value: function init() {
      if (this.initialLength <= 0) {
        this.errorInit = true;
        return false;
      }

      if (this.grid.maze && this.initTriedDirections.length <= 0) {
        this.initialDirection = this.grid.mazeFirstPosition.direction;
        this.direction = this.initialDirection;
      }

      var spaceLineAvailable = 0;
      var spaceColAvailable = 0;

      if (this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT && this.initTriedDirections.indexOf(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT) == -1 || this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT && this.initTriedDirections.indexOf(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT) == -1) {
        for (var i = 0; i < this.grid.height; i++) {
          var emptyOnLine = 0;

          for (var j = 0; j < this.grid.width; j++) {
            if (this.grid.get(new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](j, i)) == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.EMPTY) {
              emptyOnLine++;
            } else {
              emptyOnLine = 0;
            }

            if (emptyOnLine >= this.initialLength) {
              spaceLineAvailable++;
              break;
            }
          }
        }
      } else if (this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP && this.initTriedDirections.indexOf(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP) == -1 || this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM && this.initTriedDirections.indexOf(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM) == -1) {
        for (var _i = 0; _i < this.grid.width; _i++) {
          var emptyOnCol = 0;

          for (var _j = 0; _j < this.grid.height; _j++) {
            if (this.grid.get(new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](_i, _j)) == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.EMPTY) {
              emptyOnCol++;
            } else {
              emptyOnCol = 0;
            }

            if (emptyOnCol >= this.initialLength) {
              spaceColAvailable++;
              break;
            }
          }
        }
      }

      this.initTriedDirections.push(this.initialDirection);

      if (spaceLineAvailable <= 0 && (this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT || this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT) || spaceColAvailable <= 0 && (this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP || this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM)) {
        if (this.initTriedDirections.indexOf(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT) == -1) {
          this.initialDirection = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT;
          this.direction = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT;
          return this.init();
        } else if (this.initTriedDirections.indexOf(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT) == -1) {
          this.initialDirection = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT;
          this.direction = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT;
          return this.init();
        } else if (this.initTriedDirections.indexOf(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP) == -1) {
          this.initialDirection = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP;
          this.direction = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP;
          return this.init();
        } else if (this.initTriedDirections.indexOf(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM) == -1) {
          this.initialDirection = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM;
          this.direction = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM;
          return this.init();
        }

        this.errorInit = true;
        return false;
      }

      var posNotValidated = true;
      var positionsToAdd = [];
      var startPos, currentPos;

      while (posNotValidated) {
        posNotValidated = false;

        if (this.grid.maze) {
          startPos = this.grid.mazeFirstPosition;
        } else {
          startPos = this.grid.getRandomPosition();
        }

        if (!startPos) {
          this.errorInit = true;
          return false;
        }

        currentPos = new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](startPos.x, startPos.y, this.initialDirection);
        positionsToAdd = [];

        for (var _i2 = this.initialLength - 1; _i2 >= 0; _i2--) {
          if (_i2 < this.initialLength - 1) {
            if (this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT) {
              currentPos = this.grid.getNextPosition(new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](currentPos.x, currentPos.y, this.initialDirection), _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT);
            } else if (this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT) {
              currentPos = this.grid.getNextPosition(new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](currentPos.x, currentPos.y, this.initialDirection), _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT);
            } else if (this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM) {
              currentPos = this.grid.getNextPosition(new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](currentPos.x, currentPos.y, this.initialDirection), _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM);
            } else if (this.initialDirection == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP) {
              currentPos = this.grid.getNextPosition(new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](currentPos.x, currentPos.y, this.initialDirection), _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP);
            }
          }

          if (this.grid.get(currentPos) != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.EMPTY) {
            posNotValidated = true;
          } else {
            positionsToAdd.push(new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](currentPos.x, currentPos.y, currentPos.direction));
          }
        }

        if (this.grid.maze && posNotValidated) {
          return this.init();
        }
      } // If the Snake is near a dead position


      var nearDeadPosition = false;

      if (!this.grid.maze) {
        var firstPosition = new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](positionsToAdd[positionsToAdd.length - 1].x, positionsToAdd[positionsToAdd.length - 1].y, this.direction);

        if (this.grid.isDeadPosition(this.grid.getNextPosition(firstPosition, _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP), false) && this.direction == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP || this.grid.isDeadPosition(this.grid.getNextPosition(firstPosition, _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM), false) && this.direction == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM || this.grid.isDeadPosition(this.grid.getNextPosition(firstPosition, _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT), false) && this.direction == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT || this.grid.isDeadPosition(this.grid.getNextPosition(firstPosition, _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT), false) && this.direction == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT) {
          nearDeadPosition = true;
          this.direction = this.grid.invertDirection(this.direction);
        }
      }

      for (var _i3 = 0; _i3 < positionsToAdd.length; _i3++) {
        if (nearDeadPosition) {
          var position = positionsToAdd[positionsToAdd.length - _i3 - 1];
          position.direction = this.grid.invertDirection(position.direction);
          this.insert(positionsToAdd[positionsToAdd.length - _i3 - 1]);
        } else {
          this.insert(positionsToAdd[_i3]);
        }
      }

      if (this.grid.maze && this.player == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HYBRID_HUMAN_AI) {
        this.player = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HUMAN;
      }

      if (this.player == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].PlayerType.HYBRID_HUMAN_AI) {
        this.aiLevel = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].AiLevel.HIGH;
      }

      this.lastTail = this.get(this.queue.length - 1);
      return true;
    }
  }, {
    key: "initAI",
    value: function initAI() {
      if (!this.customAI) {
        switch (this.aiLevel) {
          case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].AiLevel.RANDOM:
            this.snakeAI = new _ai_index__WEBPACK_IMPORTED_MODULE_5__["SnakeAIRandom"]();
            break;

          case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].AiLevel.LOW:
            this.snakeAI = new _ai_index__WEBPACK_IMPORTED_MODULE_5__["SnakeAILow"]();
            break;

          case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].AiLevel.DEFAULT:
            this.snakeAI = new _ai_index__WEBPACK_IMPORTED_MODULE_5__["SnakeAINormal"]();
            break;

          case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].AiLevel.HIGH:
            this.snakeAI = new _ai_index__WEBPACK_IMPORTED_MODULE_5__["SnakeAIHigh"]();
            break;

          case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].AiLevel.ULTRA:
            this.snakeAI = new _ai_index__WEBPACK_IMPORTED_MODULE_5__["SnakeAIHigh"]();
            break;

          case _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].AiLevel.MOCK:
            this.snakeAI = new _ai_index__WEBPACK_IMPORTED_MODULE_5__["SnakeAIMock"]();
            break;

          default:
            this.snakeAI = new _ai_index__WEBPACK_IMPORTED_MODULE_5__["SnakeAINormal"]();
            break;
        }
      } else {
        this.snakeAI = this.customAI;
        this.aiLevel = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].AiLevel.CUSTOM;
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.direction = this.initialDirection;
      this.initTriedDirections = [];
      this.errorInit = false;
      this.queue = [];
      this.score = 0;
      this.gameOver = false;
      this.scoreMax = false;
      this.lastTailMoved = true;
      this.lastTail = undefined;
      this.lastKey = -1;
      this.ticksDead = 0;
      this.ticksWithoutAction = 0;
      if (this.snakeAI) this.snakeAI.aiFruitGoal = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT;
    }
  }, {
    key: "insert",
    value: function insert(position) {
      this.queue.unshift(position);
      this.grid.set(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.SNAKE, position);
    }
  }, {
    key: "remove",
    value: function remove() {
      var last = this.queue.pop();
      this.grid.set(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.EMPTY, last);
      this.lastTail = last;
    }
  }, {
    key: "length",
    value: function length() {
      return this.queue.length;
    }
  }, {
    key: "get",
    value: function get(index) {
      if (this.queue[index] != null) {
        return this.queue[index].copy();
      } else {
        return null;
      }
    }
  }, {
    key: "set",
    value: function set(index, position) {
      if (index >= 0 && index < this.length()) {
        this.queue[index] = position;
      }
    }
  }, {
    key: "getHeadPosition",
    value: function getHeadPosition() {
      return this.get(0);
    }
  }, {
    key: "getTailPosition",
    value: function getTailPosition() {
      return this.get(this.length() - 1);
    }
  }, {
    key: "hasMaxScore",
    value: function hasMaxScore() {
      return this.grid.getTotal(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.EMPTY) <= 0 && !this.grid.fruitPosGold && !this.grid.fruitPos;
    }
  }, {
    key: "setGameOver",
    value: function setGameOver(ticks) {
      this.gameOver = true;
      this.ticksDead = ticks;

      for (var i = 0; i < this.length(); i++) {
        this.grid.set(_Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.SNAKE_DEAD, this.get(i));
      }
    }
  }, {
    key: "kill",
    value: function kill() {
      this.autoRetry = false;
      this.grid = null;
      this.queue = null;
    }
  }, {
    key: "keyToDirection",
    value: function keyToDirection(key) {
      if (key == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.LEFT && this.direction != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT && this.direction != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT) {
        return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT;
      }

      if (key == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.UP && this.direction != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM && this.direction != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP) {
        return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP;
      }

      if (key == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.RIGHT && this.direction != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT && this.direction != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT) {
        return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT;
      }

      if (key == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Key.BOTTOM && this.direction != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP && this.direction != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM) {
        return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM;
      }

      return null;
    }
  }, {
    key: "moveTo",
    value: function moveTo(key) {
      var direction = this.keyToDirection(key);

      if (direction != null) {
        this.direction = direction;
      }
    }
  }, {
    key: "getNextPosition",
    value: function getNextPosition(oldPos, newDirection) {
      return this.grid.getNextPosition(oldPos, newDirection);
    }
  }, {
    key: "getDirectionTo",
    value: function getDirectionTo(position, otherPosition) {
      return this.grid.getDirectionTo(position, otherPosition);
    }
  }, {
    key: "getGraphicDirectionFor",
    value: function getGraphicDirectionFor(current, next, prec) {
      if (next == undefined || prec == undefined) return current.direction;
      var directionToPrec = this.getDirectionTo(current, prec);
      var directionToNext = this.getDirectionTo(current, next);

      if (directionToPrec == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT && directionToNext == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM || directionToPrec == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM && directionToNext == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT) {
        return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.ANGLE_1;
      } else if (directionToPrec == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT && directionToNext == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM || directionToPrec == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM && directionToNext == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT) {
        return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.ANGLE_2;
      } else if (directionToPrec == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP && directionToNext == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT || directionToPrec == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT && directionToNext == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP) {
        return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.ANGLE_3;
      } else if (directionToPrec == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP && directionToNext == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT || directionToPrec == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT && directionToNext == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP) {
        return _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.ANGLE_4;
      } else {
        return current.direction;
      }
    }
  }, {
    key: "getGraphicDirection",
    value: function getGraphicDirection(index) {
      return this.getGraphicDirectionFor(this.get(index), this.get(index - 1), this.get(index + 1));
    }
  }, {
    key: "copy",
    value: function copy() {
      var snake = new Snake(direction, 3, new _Grid__WEBPACK_IMPORTED_MODULE_4__["default"](this.grid.width, this.grid.height, false, false), this.player, this.aiLevel, false);

      for (var i = 0; i < snake.grid.height; i++) {
        for (var j = 0; j < snake.grid.width; j++) {
          snake.grid.set(this.grid.get(new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](j, i)), new _Position__WEBPACK_IMPORTED_MODULE_3__["default"](j, i));
        }
      }

      snake.queue = [];

      for (var _i4 = 0; _i4 < this.queue.length; _i4++) {
        snake.queue.push(elem.copy());
      }

      return snake;
    }
  }, {
    key: "ai",
    value: function ai() {
      if (this.snakeAI && this.snakeAI.ai) {
        var action = this.snakeAI.ai(this);

        if (!action || this.keyToDirection(action) == this.direction) {
          this.ticksWithoutAction++;
        } else {
          this.ticksWithoutAction = 0;
        }

        return action;
      }

      return null;
    }
  }, {
    key: "isAIStuck",
    value: function isAIStuck(widthLimit, heightLimit) {
      if (this.snakeAI && this.snakeAI.ai) {
        if ((this.direction == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.LEFT || this.direction == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.RIGHT) && this.ticksWithoutAction >= this.grid.width * widthLimit) {
          return true;
        } else if ((this.direction == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.UP || this.direction == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].Direction.BOTTOM) && this.ticksWithoutAction >= this.grid.height * heightLimit) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "getAILevelText",
    value: function getAILevelText() {
      return this.snakeAI ? this.snakeAI.aiLevelText : "???";
    }
  }]);

  return Snake;
}();



/***/ }),

/***/ "./src/engine/ai/SnakeAI.js":
/*!**********************************!*\
  !*** ./src/engine/ai/SnakeAI.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SnakeAI; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Constants */ "./src/engine/Constants.js");



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */


var SnakeAI = /*#__PURE__*/function () {
  function SnakeAI() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SnakeAI);

    this.aiFruitGoal = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT;
    this._aiLevelText = "custom";
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SnakeAI, [{
    key: "ai",
    value: function ai(snake) {
      var currentPosition = snake.getHeadPosition();
      var fruitPos = snake.grid.fruitPos;
      var fruitPosGold = snake.grid.fruitPosGold;

      if (fruitPos && snake.grid.get(fruitPos) == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT) {
        var distFruit = Math.abs(fruitPos.x - currentPosition.x) + Math.abs(fruitPos.y - currentPosition.y);
        var distFruitGold = fruitPosGold ? Math.abs(fruitPosGold.x - currentPosition.x) + Math.abs(fruitPosGold.y - currentPosition.y) : -1;

        if (fruitPosGold && snake.grid.get(fruitPosGold) == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT_GOLD && this.aiFruitGoal == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT) {
          if (distFruitGold <= distFruit) {
            this.aiFruitGoal = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT_GOLD;
          } else {
            this.aiFruitGoal = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT;
          }
        } else if (!fruitPosGold || snake.grid.get(fruitPosGold) != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT_GOLD) {
          this.aiFruitGoal = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT;
        }
      } else if ((!fruitPos || snake.grid.get(fruitPos) != _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT) && fruitPosGold && snake.grid.get(fruitPosGold) == _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT_GOLD) {
        this.aiFruitGoal = _Constants__WEBPACK_IMPORTED_MODULE_2__["default"].CaseType.FRUIT_GOLD;
      }

      return null;
    }
  }, {
    key: "aiLevelText",
    get: function get() {
      return this._aiLevelText;
    }
  }]);

  return SnakeAI;
}();



/***/ }),

/***/ "./src/engine/ai/SnakeAIHigh.js":
/*!**************************************!*\
  !*** ./src/engine/ai/SnakeAIHigh.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SnakeAIHigh; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _SnakeAILow__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SnakeAILow */ "./src/engine/ai/SnakeAILow.js");
/* harmony import */ var _SnakeAINormal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SnakeAINormal */ "./src/engine/ai/SnakeAINormal.js");







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */



var SnakeAIHigh = /*#__PURE__*/function (_SnakeAINormal) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(SnakeAIHigh, _SnakeAINormal);

  var _super = _createSuper(SnakeAIHigh);

  function SnakeAIHigh(snake) {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SnakeAIHigh);

    _this = _super.call(this, true);
    _this.aiLow = new _SnakeAILow__WEBPACK_IMPORTED_MODULE_6__["default"](snake);
    _this._aiLevelText = "high";
    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SnakeAIHigh, [{
    key: "ai",
    value: function ai(snake) {
      var res = _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(SnakeAIHigh.prototype), "ai", this).call(this, snake);

      if (!res) {
        return this.aiLow.ai(snake);
      }

      return res;
    }
  }]);

  return SnakeAIHigh;
}(_SnakeAINormal__WEBPACK_IMPORTED_MODULE_7__["default"]);



/***/ }),

/***/ "./src/engine/ai/SnakeAILow.js":
/*!*************************************!*\
  !*** ./src/engine/ai/SnakeAILow.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SnakeAILow; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _SnakeAI__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SnakeAI */ "./src/engine/ai/SnakeAI.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Constants */ "./src/engine/Constants.js");







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */



var SnakeAILow = /*#__PURE__*/function (_SnakeAI) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(SnakeAILow, _SnakeAI);

  var _super = _createSuper(SnakeAILow);

  function SnakeAILow() {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SnakeAILow);

    _this = _super.call(this);
    _this._aiLevelText = "low";
    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SnakeAILow, [{
    key: "ai",
    value: function ai(snake) {
      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(SnakeAILow.prototype), "ai", this).call(this, snake);

      if (snake.grid.fruitPos != null) {
        var currentPosition = snake.getHeadPosition();
        var fruitPos = this.aiFruitGoal == _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].CaseType.FRUIT_GOLD ? snake.grid.fruitPosGold : snake.grid.fruitPos;
        var directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.RIGHT;

        if (fruitPos.x > currentPosition.x) {
          if (fruitPos.x - currentPosition.x > snake.grid.width / 2) {
            directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.LEFT;
          } else {
            directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.RIGHT;
          }
        } else if (fruitPos.x < currentPosition.x) {
          if (currentPosition.x - fruitPos.x > snake.grid.width / 2) {
            directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.RIGHT;
          } else {
            directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.LEFT;
          }
        } else if (fruitPos.y < currentPosition.y) {
          if (currentPosition.y - fruitPos.y > snake.grid.height / 2) {
            directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.BOTTOM;
          } else {
            directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.UP;
          }
        } else if (fruitPos.y > currentPosition.y) {
          if (fruitPos.y - currentPosition.y > snake.grid.height / 2) {
            directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.UP;
          } else {
            directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.BOTTOM;
          }
        }

        var nextPosition = snake.getNextPosition(currentPosition, directionNext);

        if (snake.grid.isDeadPosition(nextPosition)) {
          var currentDirection = this.direction;
          var firstDifferentDirection = null;

          for (var i = 1; i < snake.queue.length; i++) {
            if (snake.get(i).direction != currentDirection) {
              firstDifferentDirection = snake.get(i).direction;
              break;
            }
          }

          nextPosition = snake.getNextPosition(currentPosition, firstDifferentDirection);

          if (snake.grid.isDeadPosition(nextPosition)) {
            if (!snake.grid.isDeadPosition(snake.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.UP))) {
              directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.UP;
            } else if (!snake.grid.isDeadPosition(snake.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.RIGHT))) {
              directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.RIGHT;
            } else if (!snake.grid.isDeadPosition(snake.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.BOTTOM))) {
              directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.BOTTOM;
            } else if (!snake.grid.isDeadPosition(snake.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.LEFT))) {
              directionNext = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.LEFT;
            }
          } else {
            directionNext = nextPosition.convertToKeyDirection();
          }
        }

        return directionNext;
      }
    }
  }]);

  return SnakeAILow;
}(_SnakeAI__WEBPACK_IMPORTED_MODULE_6__["default"]);



/***/ }),

/***/ "./src/engine/ai/SnakeAIMock.js":
/*!**************************************!*\
  !*** ./src/engine/ai/SnakeAIMock.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SnakeAIMock; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _SnakeAI__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SnakeAI */ "./src/engine/ai/SnakeAI.js");






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */


var SnakeAIMock = /*#__PURE__*/function (_SnakeAI) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(SnakeAIMock, _SnakeAI);

  var _super = _createSuper(SnakeAIMock);

  function SnakeAIMock() {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SnakeAIMock);

    _this = _super.call(this);
    _this._aiLevelText = "mock";
    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SnakeAIMock, [{
    key: "ai",
    value: function ai() {
      return null;
    }
  }]);

  return SnakeAIMock;
}(_SnakeAI__WEBPACK_IMPORTED_MODULE_5__["default"]);



/***/ }),

/***/ "./src/engine/ai/SnakeAINormal.js":
/*!****************************************!*\
  !*** ./src/engine/ai/SnakeAINormal.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SnakeAINormal; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _SnakeAI__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SnakeAI */ "./src/engine/ai/SnakeAI.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Constants */ "./src/engine/Constants.js");
/* harmony import */ var _Position__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Position */ "./src/engine/Position.js");
/* harmony import */ var _libs_lowlight_astar_min__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../libs/lowlight.astar.min */ "./libs/lowlight.astar.min.js");
/* harmony import */ var _libs_lowlight_astar_min__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_libs_lowlight_astar_min__WEBPACK_IMPORTED_MODULE_9__);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */





var SnakeAINormal = /*#__PURE__*/function (_SnakeAI) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(SnakeAINormal, _SnakeAI);

  var _super = _createSuper(SnakeAINormal);

  function SnakeAINormal(enableTorus) {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SnakeAINormal);

    _this = _super.call(this);
    _this.enableTorus = enableTorus;
    _this._aiLevelText = "normal";
    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SnakeAINormal, [{
    key: "ai",
    value: function ai(snake) {
      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(SnakeAINormal.prototype), "ai", this).call(this, snake);

      var currentPosition = snake.getHeadPosition();
      var fruitPos = snake.grid.fruitPos;
      var fruitPosGold = snake.grid.fruitPosGold;
      var fruitTarget = fruitPos;

      if (currentPosition && (fruitPos || fruitPosGold)) {
        var grid = snake.grid.getGraph(false);
        var graph = new _libs_lowlight_astar_min__WEBPACK_IMPORTED_MODULE_9__["Astar"].Configuration(grid, {
          order: "yx",
          torus: this.enableTorus ? true : false,
          diagonals: false,
          cutting: false,
          "static": true,
          cost: function cost(a, b) {
            return b == 1 ? null : 1;
          }
        });

        if (fruitPosGold && this.aiFruitGoal == _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].CaseType.FRUIT_GOLD) {
          fruitTarget = fruitPosGold;
        }

        var path = graph.path({
          x: currentPosition.x,
          y: currentPosition.y
        }, {
          x: fruitTarget ? fruitTarget.x : null,
          y: fruitTarget ? fruitTarget.y : null
        });

        if (path.length < 1) {
          if (this.aiFruitGoal == _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].CaseType.FRUIT_GOLD || !fruitPosGold) {
            fruitTarget = fruitPos;
          }

          path = graph.path({
            x: currentPosition.x,
            y: currentPosition.y
          }, {
            x: fruitTarget ? fruitTarget.x : null,
            y: fruitTarget ? fruitTarget.y : null
          });
        }

        if (path.length > 1) {
          var nextPosition = new _Position__WEBPACK_IMPORTED_MODULE_8__["default"](path[1].x, path[1].y);
          return new _Position__WEBPACK_IMPORTED_MODULE_8__["default"](null, null, snake.getDirectionTo(currentPosition, nextPosition)).convertToKeyDirection();
        }

        grid, graph, path = null;
      }

      return null;
    }
  }]);

  return SnakeAINormal;
}(_SnakeAI__WEBPACK_IMPORTED_MODULE_6__["default"]);



/***/ }),

/***/ "./src/engine/ai/SnakeAIRandom.js":
/*!****************************************!*\
  !*** ./src/engine/ai/SnakeAIRandom.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SnakeAIRandom; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _SnakeAI__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SnakeAI */ "./src/engine/ai/SnakeAI.js");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Constants */ "./src/engine/Constants.js");
/* harmony import */ var _GameUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../GameUtils */ "./src/engine/GameUtils.js");







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */




var SnakeAIRandom = /*#__PURE__*/function (_SnakeAI) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(SnakeAIRandom, _SnakeAI);

  var _super = _createSuper(SnakeAIRandom);

  function SnakeAIRandom() {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SnakeAIRandom);

    _this = _super.call(this);
    _this._aiLevelText = "random";
    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SnakeAIRandom, [{
    key: "ai",
    value: function ai(snake) {
      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(SnakeAIRandom.prototype), "ai", this).call(this, snake);

      var currentPosition = snake.getHeadPosition();
      var top = snake.grid.isDeadPosition(snake.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.UP));
      var left = snake.grid.isDeadPosition(snake.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.LEFT));
      var bottom = snake.grid.isDeadPosition(snake.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.BOTTOM));
      var right = snake.grid.isDeadPosition(snake.getNextPosition(currentPosition, _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.RIGHT));

      if (top && left && bottom && right) {
        return _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.UP;
      } else {
        var direction = null;

        while (direction == null || snake.grid.isDeadPosition(snake.getNextPosition(currentPosition, direction))) {
          var r = _GameUtils__WEBPACK_IMPORTED_MODULE_8__["default"].randRange(1, 4, snake.grid ? snake.grid.rngGame : null);

          switch (r) {
            case 1:
              direction = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.UP;
              break;

            case 2:
              direction = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.LEFT;
              break;

            case 3:
              direction = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.BOTTOM;
              break;

            case 4:
              direction = _Constants__WEBPACK_IMPORTED_MODULE_7__["default"].Key.RIGHT;
              break;
          }
        }

        return direction;
      }
    }
  }]);

  return SnakeAIRandom;
}(_SnakeAI__WEBPACK_IMPORTED_MODULE_6__["default"]);



/***/ }),

/***/ "./src/engine/ai/index.js":
/*!********************************!*\
  !*** ./src/engine/ai/index.js ***!
  \********************************/
/*! exports provided: SnakeAI, SnakeAIRandom, SnakeAILow, SnakeAINormal, SnakeAIHigh, SnakeAIMock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _SnakeAI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SnakeAI */ "./src/engine/ai/SnakeAI.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SnakeAI", function() { return _SnakeAI__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _SnakeAIRandom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SnakeAIRandom */ "./src/engine/ai/SnakeAIRandom.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SnakeAIRandom", function() { return _SnakeAIRandom__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _SnakeAILow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SnakeAILow */ "./src/engine/ai/SnakeAILow.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SnakeAILow", function() { return _SnakeAILow__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _SnakeAINormal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SnakeAINormal */ "./src/engine/ai/SnakeAINormal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SnakeAINormal", function() { return _SnakeAINormal__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _SnakeAIHigh__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SnakeAIHigh */ "./src/engine/ai/SnakeAIHigh.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SnakeAIHigh", function() { return _SnakeAIHigh__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _SnakeAIMock__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SnakeAIMock */ "./src/engine/ai/SnakeAIMock.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SnakeAIMock", function() { return _SnakeAIMock__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */








/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: GameConstants, Event, Reactor, Grid, Snake, GameGroup, GameUtils, Position, GameEngine, Game, GameController, GameControllerWorker, GameControllerSocket, GameUI, OnlineClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _assets_locales_init_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assets/locales/init.js */ "./assets/locales/init.js");
/* harmony import */ var _assets_locales_menu_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../assets/locales/menu.js */ "./assets/locales/menu.js");
/* harmony import */ var _assets_locales_engine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../assets/locales/engine.js */ "./assets/locales/engine.js");
/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main.js */ "./main.js");
/* harmony import */ var _engine_Constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./engine/Constants */ "./src/engine/Constants.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GameConstants", function() { return _engine_Constants__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _engine_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./engine/Event */ "./src/engine/Event.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Event", function() { return _engine_Event__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _engine_Reactor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./engine/Reactor */ "./src/engine/Reactor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reactor", function() { return _engine_Reactor__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _engine_Grid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./engine/Grid */ "./src/engine/Grid.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Grid", function() { return _engine_Grid__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _engine_Snake__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./engine/Snake */ "./src/engine/Snake.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Snake", function() { return _engine_Snake__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _engine_GameGroup__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./engine/GameGroup */ "./src/engine/GameGroup.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GameGroup", function() { return _engine_GameGroup__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _engine_GameUtils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./engine/GameUtils */ "./src/engine/GameUtils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GameUtils", function() { return _engine_GameUtils__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony import */ var _engine_Position__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./engine/Position */ "./src/engine/Position.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Position", function() { return _engine_Position__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _engine_GameEngine__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./engine/GameEngine */ "./src/engine/GameEngine.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GameEngine", function() { return _engine_GameEngine__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony import */ var _Shim__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Shim */ "./src/Shim.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Game", function() { return _Shim__WEBPACK_IMPORTED_MODULE_13__["Game"]; });

/* harmony import */ var _engine_GameController__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./engine/GameController */ "./src/engine/GameController.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GameController", function() { return _engine_GameController__WEBPACK_IMPORTED_MODULE_14__["default"]; });

/* harmony import */ var _engine_GameControllerWorker__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./engine/GameControllerWorker */ "./src/engine/GameControllerWorker.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GameControllerWorker", function() { return _engine_GameControllerWorker__WEBPACK_IMPORTED_MODULE_15__["default"]; });

/* harmony import */ var _engine_GameControllerSocket__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./engine/GameControllerSocket */ "./src/engine/GameControllerSocket.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GameControllerSocket", function() { return _engine_GameControllerSocket__WEBPACK_IMPORTED_MODULE_16__["default"]; });

/* harmony import */ var _ui_GameUI__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ui/GameUI */ "./src/ui/GameUI.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GameUI", function() { return _ui_GameUI__WEBPACK_IMPORTED_MODULE_17__["default"]; });

/* harmony import */ var _engine_OnlineClient__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./engine/OnlineClient */ "./src/engine/OnlineClient.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OnlineClient", function() { return _engine_OnlineClient__WEBPACK_IMPORTED_MODULE_18__["default"]; });

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */
// Exports engine classes





















/***/ }),

/***/ "./src/ui/GameRanking.js":
/*!*******************************!*\
  !*** ./src/ui/GameRanking.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GameRanking; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _engine_Constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../engine/Constants */ "./src/engine/Constants.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jsgametools */ "./node_modules/jsgametools/lib/JSGameTools.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(jsgametools__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */




var GameRanking = /*#__PURE__*/function (_Component) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(GameRanking, _Component);

  var _super = _createSuper(GameRanking);

  function GameRanking(snakes, currentPlayer, fontSize, fontFamily, headerHeight, backgroundColor, scrollBarColor, disableAnimation, imageLoader, spectatorMode) {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GameRanking);

    _this = _super.call(this);
    _this.snakes = snakes;
    _this.fontSize = fontSize || Math.floor(_engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Setting.FONT_SIZE / 1.25);
    _this.fontFamily = fontFamily || _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Setting.FONT_FAMILY;
    _this.backgroundColor = backgroundColor || "rgba(44, 62, 80, 0.75)";
    _this.scrollBarColor = scrollBarColor || "rgba(44, 62, 80, 0.8)";
    _this.headerHeight = headerHeight || _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Setting.HEADER_HEIGHT_DEFAULT;
    _this.closed = false;
    _this.closing = false;
    _this.opening = false;
    _this.forceClosing = false;
    _this.overflow = false;
    _this.back = false;
    _this.lastLine = false;
    _this.timeLastFrame = 0;
    _this.offsetX = 0;
    _this.totalTimeX = 0;
    _this.totalTime = 0;
    _this.canvasTmp = document.createElement("canvas");
    _this.disableAnimation = disableAnimation;
    _this.imageLoader = imageLoader;
    _this.currentPlayer = currentPlayer;
    _this.spectatorMode = spectatorMode;

    _this.addScrollAction(function (deltaX, deltaY) {
      if (_this.lastLine && deltaY > 0) {
        _this.offsetScrollY -= deltaY;
        _this.back = false;
        _this.overflow = false;
      }

      _this.totalTime = 0;
      _this.timeLastFrame = 0;
    });

    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GameRanking, [{
    key: "draw",
    value: function draw(context) {
      if (this.snakes != null && !this.closed) {
        _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(GameRanking.prototype), "draw", this).call(this, context);

        this.canvasTmp.width = context.canvas.width;
        this.canvasTmp.height = context.canvas.height;
        var canvas = this.canvasTmp;
        var ctx = this.canvasTmp.getContext("2d");
        ctx.save();
        var title = i18next__WEBPACK_IMPORTED_MODULE_8__["default"].t("engine.ranking");
        var maxSizeName = ctx.measureText(title).width;
        var scores = [];
        var numPlayer = 0;
        var numAI = 0;
        ctx.font = this.fontSize / 1.5 + "px " + this.fontFamily;
        var sizeNumber = ctx.measureText("" + this.snakes.length).width + 15;

        for (var i = 0; i < this.snakes.length; i++) {
          var snake = this.snakes[i];

          if (snake.player == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].PlayerType.HUMAN || snake.player == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].PlayerType.HYBRID_HUMAN_AI) {
            numPlayer++;
          } else {
            numAI++;
          }

          var text = snake.name + " × " + snake.score + " (" + (this.currentPlayer == i && !this.spectatorMode ? i18next__WEBPACK_IMPORTED_MODULE_8__["default"].t("engine.playerHuman") : this.snakes[i].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].PlayerType.HUMAN || this.snakes[i].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].PlayerType.HYBRID_HUMAN_AI ? i18next__WEBPACK_IMPORTED_MODULE_8__["default"].t("engine.playerMin") + numPlayer : i18next__WEBPACK_IMPORTED_MODULE_8__["default"].t("engine.aiMin") + numAI) + ")";
          var sizeText = ctx.measureText(text).width + 30;
          if (sizeText > maxSizeName) maxSizeName = sizeText;
          scores[i] = {
            username: snake.name,
            score: snake.score,
            gameOver: snake.gameOver,
            text: text,
            rank: 0,
            id: i
          };
          lastScore = snake.score;
        }

        this.x = -(jsgametools__WEBPACK_IMPORTED_MODULE_7__["EasingFunctions"].easeInOutCubic(this.offsetX / this.width) * this.width);
        this.y = this.headerHeight;
        this.width = maxSizeName + sizeNumber + 15;
        this.height = canvas.height - this.headerHeight;
        ctx.fillStyle = "rgba(75, 75, 75, 0.35)";
        ctx.fillRect(this.x, this.headerHeight, this.width, this.height);
        ctx.font = this.fontSize + "px " + this.fontFamily;
        var yTitle = this.headerHeight + this.fontSize - this.offsetScrollY + 10; // Scroll variables

        var maxHeight = this.snakes.length * (this.fontSize + 5) + this.fontSize + 10 + this.fontSize / 1.5;
        var clientHeight = this.height * (this.height / maxHeight);
        var scrollAreaSize = this.height - clientHeight;
        var percentScrollbar = this.offsetScrollY / (maxHeight - this.height);

        if (scrollAreaSize * percentScrollbar + clientHeight > this.height) {
          // Limit max scroll
          this.offsetScrollY += this.height - (scrollAreaSize * percentScrollbar + clientHeight);
        }

        if (yTitle > this.headerHeight + this.fontSize + 10) {
          // Limit min scroll
          yTitle = this.headerHeight + this.fontSize + 10;
          this.offsetScrollY = 0;
        }

        percentScrollbar = this.offsetScrollY / (maxHeight - this.height);

        if (yTitle + this.fontSize - 10 >= this.headerHeight) {
          jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawText(ctx, i18next__WEBPACK_IMPORTED_MODULE_8__["default"].t("engine.ranking"), "rgba(255, 255, 255, 0.5)", Math.round(this.fontSize), this.fontFamily, "default", null, Math.round(this.width / 2 - ctx.measureText(title).width / 2 + this.x), Math.round(yTitle), false, true);
        }

        var ranking = scores.sort(function (a, b) {
          return b.score - a.score;
        });
        var rank = 0;
        var lastScore = 0;

        for (var _i = 0; _i < ranking.length; _i++) {
          if (ranking[_i].score < lastScore) {
            rank++;
          }

          ranking[_i].rank = rank;
          lastScore = ranking[_i].score;
        }

        var currentY = yTitle + this.fontSize / 1.5;
        this.overflow = false;
        if (this.timeLastFrame <= 0) this.timeLastFrame = performance.now();
        var offsetTime = performance.now() - this.timeLastFrame;
        this.timeLastFrame = performance.now();
        var numberRankDrawn = 0;

        for (var _i2 = 0; _i2 < ranking.length; _i2++) {
          if (currentY + this.fontSize > this.headerHeight) {
            if (ranking[_i2].rank >= 0 && ranking[_i2].rank < 3 && ranking[_i2].score > 0) {
              switch (ranking[_i2].rank) {
                case 0:
                  jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawImage(ctx, this.imageLoader ? this.imageLoader.get("assets/images/trophy.png", Math.round(this.fontSize), Math.round(this.fontSize)) : null, 5 + this.x, currentY, Math.round(this.fontSize), Math.round(this.fontSize));
                  break;

                case 1:
                  jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawImage(ctx, this.imageLoader ? this.imageLoader.get("assets/images/trophy_silver.png", Math.round(this.fontSize), Math.round(this.fontSize)) : null, 5 + this.x, currentY, Math.round(this.fontSize), Math.round(this.fontSize));
                  break;

                case 2:
                  jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawImage(ctx, this.imageLoader ? this.imageLoader.get("assets/images/trophy_bronze.png", Math.round(this.fontSize), Math.round(this.fontSize)) : null, 5 + this.x, currentY, Math.round(this.fontSize), Math.round(this.fontSize));
                  break;
              }
            } else {
              jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawText(ctx, "" + (ranking[_i2].rank + 1), "rgba(255, 255, 255, 0.5)", Math.round(this.fontSize / 1.5), this.fontFamily, null, null, Math.round(this.fontSize / 1.5 / 2 + 5 + this.x), Math.round(currentY + this.fontSize / 1.5));
            }

            jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawText(ctx, ranking[_i2].text, ranking[_i2].gameOver ? "rgba(231, 76, 60, 0.5)" : "rgba(255, 255, 255, 0.5)", Math.round(this.fontSize / 1.5), this.fontFamily, null, null, Math.round(5 + sizeNumber + this.fontSize / 1.5 + this.x), Math.round(currentY + this.fontSize / 1.5));
            numberRankDrawn++;
          }

          currentY += Math.round(this.fontSize) + 5;

          if (currentY > canvas.height && !this.back) {
            this.lastLine = false;
            this.totalTime += offsetTime;

            if (this.totalTime > 5000) {
              this.overflow = true;
            }

            break;
          } else if (_i2 == this.snakes.length - 1) {
            if (!this.back) this.totalTime = 0;
            this.back = true;
            this.lastLine = true;
          }
        }

        if (numberRankDrawn <= 0) {
          this.offsetScrollY = 0;
          this.timeLastFrame = performance.now();
          offsetTime = 0;
        }

        if (this.back) {
          this.totalTime += offsetTime;

          if (this.totalTime > 5000) {
            if (this.offsetScrollY > 0) {
              this.offsetScrollY -= offsetTime / 20;
            } else {
              this.back = false;
              this.totalTime = 0;
            }
          }
        } else if (this.overflow) {
          this.offsetScrollY += offsetTime / 20;
        }

        if (this.disableAnimation && this.closing) {
          this.closing = false;
          this.closed = true;
        } else if (this.disableAnimation && this.closing) {
          this.opening = false;
          this.closed = false;
        } else {
          if (this.closing) {
            if (this.forceClosing) {
              this.offsetX = this.width;
            } else {
              this.offsetX += offsetTime / 3;
            }

            if (this.offsetX >= this.width) {
              this.closing = false;
              this.closed = true;
              this.forceClosing = false;
            }
          } else if (this.opening) {
            this.offsetX -= offsetTime / 3;

            if (this.offsetX <= 0) {
              this.offsetX = 0;
              this.opening = false;
              this.closed = false;
            }
          }
        } // Scrollbar drawing


        if (clientHeight <= this.height) {
          ctx.fillStyle = this.scrollBarColor;
          ctx.fillRect(this.x + this.width - 15, this.headerHeight + scrollAreaSize * percentScrollbar, 15, clientHeight);
        }

        jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawImageData(context, this.canvasTmp, 0, this.headerHeight, this.width, this.height, 0, this.headerHeight, this.width, this.height);
        ctx.restore();
      } else {
        this.overflow = false;
        this.back = false;
        this.timeLastFrame = performance.now();
        this.offsetScrollY = 0;
        this.totalTime = 0;
      }
    }
  }, {
    key: "close",
    value: function close() {
      this.closing = true;
      this.opening = false;
      this.forceClosing = false;
    }
  }, {
    key: "forceClose",
    value: function forceClose() {
      this.closing = true;
      this.opening = false;
      this.forceClosing = true;
    }
  }, {
    key: "open",
    value: function open() {
      this.closing = false;
      this.opening = true;
      this.closed = false;
      this.forceClosing = false;
    }
  }, {
    key: "set",
    value: function set(snakes, fontSize, headerHeight, currentPlayer, imageLoader, spectatorMode) {
      this.snakes = snakes;
      this.fontSize = fontSize;
      this.headerHeight = headerHeight;
      this.currentPlayer = currentPlayer;
      this.imageLoader = imageLoader;
      this.spectatorMode = spectatorMode;
    }
  }]);

  return GameRanking;
}(jsgametools__WEBPACK_IMPORTED_MODULE_7__["Component"]);



/***/ }),

/***/ "./src/ui/GameUI.js":
/*!**************************!*\
  !*** ./src/ui/GameUI.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GameUI; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _engine_GameUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../engine/GameUtils */ "./src/engine/GameUtils.js");
/* harmony import */ var _GraphicsUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GraphicsUtils */ "./src/ui/GraphicsUtils.js");
/* harmony import */ var _engine_Constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../engine/Constants */ "./src/engine/Constants.js");
/* harmony import */ var _GameRanking__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GameRanking */ "./src/ui/GameRanking.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jsgametools */ "./node_modules/jsgametools/lib/JSGameTools.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(jsgametools__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _GridUI__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./GridUI */ "./src/ui/GridUI.js");
/* harmony import */ var _Header__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Header */ "./src/ui/Header.js");



/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */








jsgametools__WEBPACK_IMPORTED_MODULE_7__["Constants"].Setting.FONT_FAMILY = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.FONT_FAMILY;
jsgametools__WEBPACK_IMPORTED_MODULE_7__["Constants"].Setting.DISABLE_EXPERIMENTAL_OPTIMIZATIONS = false;
jsgametools__WEBPACK_IMPORTED_MODULE_7__["Constants"].Setting.FONT_SIZE = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.FONT_SIZE;

var GameUI = /*#__PURE__*/function () {
  function GameUI(controller, appendTo, canvasWidth, canvasHeight, displayFPS, outputType, settings) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GameUI);

    // Assets loader
    this.imageLoader = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["ImageLoader"]();
    this.assetsLoaded = false; // Game settings

    this.controller = controller;
    this.appendTo = appendTo;
    this.displayFPS = displayFPS == undefined ? false : displayFPS;
    this.outputType = outputType == undefined ? _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.GRAPHICAL : outputType;
    this.outputType = settings && settings.textOutput ? _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.TEXT : this.outputType;
    this.disableAnimation = settings && !settings.enableAnimations;
    this.renderBlur = settings && settings.renderBlur;
    this.graphicSkin = settings && settings.graphicSkin || "flat";
    this.maxFPS = settings && settings.maxFPS || -1; // UI variables

    this.lastKey = -1;
    this.frame = 0;
    this.lastFrame = 0;
    this.offsetFrame = 0;
    this.lastFrameTime = 0;
    this.currentFPS = 0;
    this.engineLoading = false; // Swipe detection variables

    this.touchEventStartX;
    this.touchEventStartY;
    this.touchEventStartTimestamp;
    this.touchEventOffsetX = 0;
    this.touchEventOffsetY = 0; // Copy of engine variables

    this.grid = null;
    this.snakes = null;
    this.speed = 8;
    this.initialSpeed = 8;
    this.ticks = 0;
    this.countBeforePlay = -1;
    this.numFruit = 0;
    this.paused = true;
    this.exited = false;
    this.killed = false;
    this.isReseted = true;
    this.gameOver = false;
    this.gameFinished = false;
    this.gameMazeWin = false;
    this.scoreMax = false;
    this.enablePause = false;
    this.enableRetry = false;
    this.progressiveSpeed = false;
    this.aiStuck = false;
    this.precAiStuck = false; // Game state variables

    this.errorOccurred = false;
    this.fullscreen = false; // Online variables

    this.onlineMode = false;
    this.enableRetryPauseMenu = true;
    this.searchingPlayers = false;
    this.playerNumber = 0;
    this.maxPlayers = 0;
    this.timeStart = 0;
    this.lastTime = 0;
    this.currentPlayer = null;
    this.spectatorMode = null;
    this.onlineMaster = false;
    this.pingLatency = -1; // Menus state variables

    this.menu = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Menu"](new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Style"]({
      "blur": this.renderBlur
    }));
    this.confirmReset = false;
    this.confirmExit = false;
    this.getInfos = false;
    this.getInfosGame = false;
    this.getAdvancedInfosGame = false;
    this.timeoutAutoRetry = null; // Components

    this.isFilterHueAvailable = jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].isFilterHueAvailable();
    this.gameRanking = new _GameRanking__WEBPACK_IMPORTED_MODULE_6__["default"](this.snakes, null, null, null, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.HEADER_HEIGHT_DEFAULT, null, null, this.disableAnimation, this.imageLoader);
    this.header = new _Header__WEBPACK_IMPORTED_MODULE_9__["default"](_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.HEADER_HEIGHT_DEFAULT, null, this.snakes, this.enablePause, null, null, null, this.gameRanking, this.bestScoreToDisplay, this.numFruit, this.imageLoader);
    this.gridUI = new _GridUI__WEBPACK_IMPORTED_MODULE_8__["default"](this.snakes, this.grid, this.speed, this.disableAnimation, this.graphicSkin, this.isFilterHueAvailable, this.header.height, this.imageLoader);
    this.progressBarLoading = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["ProgressBar"](null, null, this.canvasWidth / 4, 25, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Style"]({
      "alignement": "center",
      "disableAnimation": this.disableAnimation
    }), 0.5);
    this.box = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Box"](0, 0, null, null, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Style"]({
      "backgroundColor": "rgba(204, 207, 211, 1)"
    }));
    this.scene = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Scene"](this.box, this.gridUI, this.gameRanking, this.header, this.menu);
    this.canvas;
    this.notificationMessage;
    this.labelMenus; // DOM elements and others settings

    this.textarea;
    this.canvas;
    this.canvasCtx;
    this.canvasWidth = canvasWidth == undefined ? _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.CANVAS_WIDTH : canvasWidth;
    this.canvasHeight = canvasHeight == undefined ? _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.CANVAS_HEIGHT : canvasHeight;
    this.fontSize = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.FONT_SIZE;
    this.timerToDisplay = null;
    this.bestScoreToDisplay = null; // Intervals, timeouts, frames

    this.intervalCountFPS; // Buttons

    this.btnFullScreen;
    this.btnPause;
    this.btnContinue;
    this.btnRetry;
    this.btnQuit;
    this.btnYes;
    this.btnNo;
    this.btnOK;
    this.btnAbout;
    this.btnAdvanced;
    this.btnInfosGame;
    this.btnTopArrow;
    this.btnRightArrow;
    this.btnLeftArrow;
    this.btnBottomArrow;
    this.btnExitFullScreen;
    this.btnEnterFullScreen;
    this.btnStartGame;
    this.btnRank;
    this.init();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GameUI, [{
    key: "init",
    value: function init() {
      var _this = this;

      if (this.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.TEXT) {
        this.textarea = document.createElement("textarea");
        this.appendTo.appendChild(this.textarea);
        this.assetsLoaded = true;
      } else if (this.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.GRAPHICAL) {
        jsgametools__WEBPACK_IMPORTED_MODULE_7__["Constants"].String.ERROR_MESSAGE_CANVAS = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.errorJSGameToolsConsole");
        jsgametools__WEBPACK_IMPORTED_MODULE_7__["Constants"].String.ERROR_MESSAGE_CANVAS_LABEL = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.errorJSGameTools");
        jsgametools__WEBPACK_IMPORTED_MODULE_7__["Constants"].String.RETRY = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.retryInit");
        this.canvas = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Canvas"](this.scene, document.createElement("canvas"), this.canvasWidth, this.canvasHeight, true, this.maxFPS);
        this.canvas.appendTo(this.appendTo);
        this.btnFullScreen = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["ButtonImage"]("assets/images/fullscreen.png", null, null, null, null, 64, 64);
        this.btnPause = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["ButtonImage"]("assets/images/pause.png", null, null, null, null, 64, 64);
        this.btnRank = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["ButtonImage"]("assets/images/ranking.png", null, null, null, null, 64, 64);
        var buttonStyle = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Style"]({
          "alignement": "center",
          "backgroundColor": "#3498db",
          "backgroundColorHover": "#246A99",
          "backgroundColorClick": "#184766",
          "padding": 10
        });
        var labelStyle = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Style"]({
          "fontColor": "white",
          "fontSize": _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.FONT_SIZE,
          "fontFamily": _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.FONT_FAMILY,
          "alignement": "center"
        });
        this.btnContinue = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.continue"), null, null, labelStyle));
        this.btnRetry = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.reset"), null, null, labelStyle));
        this.btnQuit = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.exit"), null, null, labelStyle));
        this.btnYes = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.yes"), null, null, labelStyle));
        this.btnNo = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.no"), null, null, labelStyle));
        this.btnOK = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.ok"), null, null, labelStyle));
        this.btnAbout = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.about"), null, null, labelStyle));
        this.btnInfosGame = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.infosGame"), null, null, labelStyle));
        this.btnAdvanced = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.infosGameAdvanced"), null, null, labelStyle));
        this.btnTopArrow = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["ButtonImage"]("assets/images/up.png", 64, 92, "right", "bottom", 64, 64, "rgba(255, 255, 255, 0.25)", "rgba(149, 165, 166, 0.25)");
        this.btnRightArrow = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["ButtonImage"]("assets/images/right.png", 0, 46, "right", "bottom", 64, 64, "rgba(255, 255, 255, 0.25)", "rgba(149, 165, 166, 0.25)");
        this.btnLeftArrow = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["ButtonImage"]("assets/images/left.png", 128, 46, "right", "bottom", 64, 64, "rgba(255, 255, 255, 0.25)", "rgba(149, 165, 166, 0.25)");
        this.btnBottomArrow = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["ButtonImage"]("assets/images/bottom.png", 64, 0, "right", "bottom", 64, 64, "rgba(255, 255, 255, 0.25)", "rgba(149, 165, 166, 0.25)");
        this.btnExitFullScreen = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.exitFullScreen"), null, null, labelStyle));
        this.btnEnterFullScreen = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.enterFullScreen"), null, null, labelStyle));
        this.btnStartGame = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Button"](null, null, null, null, buttonStyle, new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.servers.startGame"), null, null, labelStyle));
        this.labelMenus = new jsgametools__WEBPACK_IMPORTED_MODULE_7__["Label"]("", null, null, labelStyle);
        this.header.setButtons(this.btnFullScreen, this.btnPause, this.btnRank);
        this.btnFullScreen.setClickAction(function () {
          _this.toggleFullscreen();

          _this.pause();
        });
        this.btnPause.setClickAction(function () {
          _this.pause();
        });
        this.btnRank.setClickAction(function () {
          if (_this.gameRanking.closing || _this.gameRanking.closed) {
            _this.gameRanking.open();
          } else {
            _this.gameRanking.close();
          }
        });
        this.btnTopArrow.setClickAction(function () {
          _this.controller.key(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.UP);
        });
        this.btnBottomArrow.setClickAction(function () {
          _this.controller.key(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.BOTTOM);
        });
        this.btnLeftArrow.setClickAction(function () {
          _this.controller.key(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.LEFT);
        });
        this.btnRightArrow.setClickAction(function () {
          _this.controller.key(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.RIGHT);
        });

        if (this.canvas) {
          this.canvas.addEventListener("touchstart", function (event) {
            var changedTouches = event.changedTouches[0];

            var position = _this.getTouchPos(_this.canvas, changedTouches);

            if (!_this.gameRanking.hovered) {
              _this.touchEventStartX = position.x;
              _this.touchEventStartY = position.y;
              _this.touchEventStartTimestamp = performance.now();
            }
          });

          var touchSwipeEvent = function touchSwipeEvent(event) {
            var changedTouches = event.changedTouches[0];

            var position = _this.getTouchPos(_this.canvas, changedTouches);

            if (!_this.gameRanking.hovered) {
              _this.touchEventOffsetX += position.x - _this.touchEventStartX;
              _this.touchEventOffsetY += position.y - _this.touchEventStartY;

              if (performance.now() - _this.touchEventStartTimestamp >= 250) {
                _this.touchEventOffsetX = 0;
                _this.touchEventOffsetY = 0;
              }

              if (_this.touchEventOffsetX < 0 && Math.abs(_this.touchEventOffsetX) > 50) {
                _this.controller.key(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.LEFT);
              } else if (_this.touchEventOffsetX > 0 && Math.abs(_this.touchEventOffsetX) > 50) {
                _this.controller.key(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.RIGHT);
              } else if (_this.touchEventOffsetY < 0 && Math.abs(_this.touchEventOffsetY) > 50) {
                _this.controller.key(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.UP);
              } else if (_this.touchEventOffsetY > 0 && Math.abs(_this.touchEventOffsetY) > 50) {
                _this.controller.key(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.BOTTOM);
              }

              _this.touchEventStartX = position.x;
              _this.touchEventStartY = position.y;
            }
          };

          this.canvas.addEventListener("touchend", function () {
            _this.touchEventOffsetX = 0;
            _this.touchEventOffsetY = 0;
          });
          this.canvas.addEventListener("touchmove", function (event) {
            touchSwipeEvent(event);
            event.preventDefault();
          });
        }
      }

      this.setIntervalCountFPS();
      document.addEventListener("keydown", function (evt) {
        if (!_this.killed) {
          var keyCode = evt.keyCode;
          if (keyCode == 90 || keyCode == 87) keyCode = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.UP; // W or Z

          if (keyCode == 65 || keyCode == 81) keyCode = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.LEFT; // A or Q

          if (keyCode == 83) keyCode = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.BOTTOM; // S

          if (keyCode == 68) keyCode = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.RIGHT; // D

          if (!_this.paused) {
            if (keyCode == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Key.ENTER) {
              _this.pause();
            } else {
              _this.controller.key(keyCode);
            }
          } else if (_this.countBeforePlay < 0) {
            _this.lastKeyMenu = keyCode;
          }

          evt.preventDefault();
        }
      });
      window.addEventListener("resize", function () {
        _this.autoResizeCanvas();
      }, true);
      this.autoResizeCanvas();
      this.loadAssets();
      this.startDraw();
    }
  }, {
    key: "getTouchPos",
    value: function getTouchPos(canvas, event) {
      var rect = canvas.getBoundingClientRect();
      return {
        x: event.clientX - rect.left,
        y: event.clientY - rect.top
      };
    }
  }, {
    key: "autoResizeCanvas",
    value: function autoResizeCanvas() {
      if (this.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.GRAPHICAL && !this.killed) {
        jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].autoResizeCanvas(this.canvas, this.canvasWidth, this.canvasHeight);
      }
    }
  }, {
    key: "setIntervalCountFPS",
    value: function setIntervalCountFPS() {
      var _this2 = this;

      this.clearIntervalCountFPS();
      this.intervalCountFPS = window.setInterval(function () {
        _this2.countFPS();
      }, 1000);
    }
  }, {
    key: "countFPS",
    value: function countFPS() {
      if (this.lastFrame > 0) this.currentFPS = this.frame - this.lastFrame;
      this.lastFrame = this.frame;
    }
  }, {
    key: "clearIntervalCountFPS",
    value: function clearIntervalCountFPS() {
      clearInterval(this.intervalCountFPS);
    }
  }, {
    key: "getNBPlayer",
    value: function getNBPlayer(type) {
      return this.controller.getNBPlayer(type);
    }
  }, {
    key: "getPlayer",
    value: function getPlayer(num, type) {
      return this.controller.getPlayer(num, type);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.controller && this.controller.reset();
    }
  }, {
    key: "start",
    value: function start() {
      this.controller && this.controller.start();
    }
  }, {
    key: "forceStart",
    value: function forceStart() {
      this.controller && this.controller.forceStart();
    }
  }, {
    key: "stop",
    value: function stop() {
      this.controller && this.controller.stop();
    }
  }, {
    key: "pause",
    value: function pause() {
      this.controller && this.controller.pause();
    }
  }, {
    key: "kill",
    value: function kill() {
      this.controller && this.controller.kill();
    }
  }, {
    key: "exit",
    value: function exit() {
      this.controller && this.controller.exit();
    }
  }, {
    key: "tick",
    value: function tick() {
      this.controller && this.controller.tick();
    }
  }, {
    key: "setKill",
    value: function setKill() {
      this.killed = true;
      this.clearIntervalCountFPS();
      this.grid = null;
      this.snakes = null;

      if (this.appendTo != null) {
        if (this.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.TEXT && this.textarea != null) {
          this.appendTo.removeChild(this.textarea);
          this.textarea = null;
        } else if (this.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.GRAPHICAL && this.canvas != null) {
          this.canvas.getContext("2d").clearRect(0, 0, this.canvas.width, this.canvas.height);
          this.canvas.width = 0;
          this.canvas.height = 0;
          this.canvas.remove(this.appendTo);
          this.canvas = null;
          this.canvasCtx = null;
          this.imageLoader.clear();
        }
      }
    }
  }, {
    key: "toggleFullscreen",
    value: function toggleFullscreen() {
      var _this3 = this;

      if (this.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.GRAPHICAL && !this.killed) {
        this.canvas.toggleFullscreen();

        var onfullscreenchange = function onfullscreenchange() {
          if (_this3.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.GRAPHICAL && !_this3.killed) {
            if (document.fullscreenElement == _this3.canvas) {
              _this3.fullscreen = true;
            } else {
              _this3.fullscreen = false;
            }

            if (document.fullscreenElement == _this3.canvas && typeof screen.orientation !== "undefined" && typeof screen.orientation.lock !== "undefined") {
              screen.orientation.lock("landscape")["catch"](function () {});
            }
          }
        };

        if (typeof document.onfullscreenchange !== "undefined") {
          document.onfullscreenchange = onfullscreenchange;
        } else if (typeof document.onmsfullscreenchange !== "undefined") {
          document.onmsfullscreenchange = onfullscreenchange;
        } else if (typeof document.onmozfullscreenchange !== "undefined") {
          document.onmozfullscreenchange = onfullscreenchange;
        } else if (typeof document.onwebkitfullscreenchange !== "undefined") {
          document.onwebkitfullscreenchange = onfullscreenchange;
        } else if (typeof document.onokitfullscreenchange !== "undefined") {
          document.onofullscreenchange = onfullscreenchange;
        }

        onfullscreenchange();
      }
    }
  }, {
    key: "loadAssets",
    value: function loadAssets() {
      var _this4 = this;

      if (!this.errorOccurred && this.outputType != _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.TEXT) {
        this.imageLoader.load(["assets/images/skin/" + this.graphicSkin + "/snake_4.png", "assets/images/skin/" + this.graphicSkin + "/snake_3.png", "assets/images/skin/" + this.graphicSkin + "/snake_2.png", "assets/images/skin/" + this.graphicSkin + "/snake.png", "assets/images/skin/" + this.graphicSkin + "/body_4_end.png", "assets/images/skin/" + this.graphicSkin + "/body_3_end.png", "assets/images/skin/" + this.graphicSkin + "/body_2_end.png", "assets/images/skin/" + this.graphicSkin + "/body_end.png", "assets/images/skin/" + this.graphicSkin + "/body_2.png", "assets/images/skin/" + this.graphicSkin + "/body.png", "assets/images/skin/" + this.graphicSkin + "/wall.png", "assets/images/skin/" + this.graphicSkin + "/fruit.png", "assets/images/skin/" + this.graphicSkin + "/body_angle_1.png", "assets/images/skin/" + this.graphicSkin + "/body_angle_2.png", "assets/images/skin/" + this.graphicSkin + "/body_angle_3.png", "assets/images/skin/" + this.graphicSkin + "/body_angle_4.png", "assets/images/pause.png", "assets/images/fullscreen.png", "assets/images/skin/" + this.graphicSkin + "/snake_dead_4.png", "assets/images/skin/" + this.graphicSkin + "/snake_dead_3.png", "assets/images/skin/" + this.graphicSkin + "/snake_dead_2.png", "assets/images/skin/" + this.graphicSkin + "/snake_dead.png", "assets/images/up.png", "assets/images/left.png", "assets/images/right.png", "assets/images/bottom.png", "assets/images/trophy.png", "assets/images/trophy_silver.png", "assets/images/trophy_bronze.png", "assets/images/clock.png", "assets/images/skin/" + this.graphicSkin + "/fruit_gold.png", "assets/images/ranking.png", "assets/images/skin/flat/fruit.png", "assets/images/skin/" + this.graphicSkin + "/unknown.png"], function () {
          if (_this4.imageLoader.hasError) {
            _this4.errorOccurred = true;
          } else {
            _this4.assetsLoaded = true;

            _this4.btnFullScreen.loadImage(_this4.imageLoader);

            _this4.btnPause.loadImage(_this4.imageLoader);

            _this4.btnRank.loadImage(_this4.imageLoader);

            _this4.btnTopArrow.loadImage(_this4.imageLoader);

            _this4.btnBottomArrow.loadImage(_this4.imageLoader);

            _this4.btnLeftArrow.loadImage(_this4.imageLoader);

            _this4.btnRightArrow.loadImage(_this4.imageLoader);

            _this4.start();
          }
        }, this);
      } else if (!this.errorOccurred && this.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.TEXT) {
        this.assetsLoaded = true;
        this.start();
      }
    }
  }, {
    key: "startDraw",
    value: function startDraw() {
      var _this5 = this;

      requestAnimationFrame(function (time) {
        return _this5.beforeDraw(time);
      });
    }
  }, {
    key: "beforeDraw",
    value: function beforeDraw(time) {
      if (!this.killed) {
        if (!document.hasFocus() && !this.paused && this.outputType != _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.TEXT) {
          this.controller.pause();
        }

        var offsetFrame = time - this.lastFrameTime;

        if (this.maxFPS < 1 || offsetFrame > 1000 / this.maxFPS) {
          this.lastFrameTime = time;
          this.frame++;

          if (!this.paused && !this.onlineMode || this.onlineMode || this.gameOver || this.gameFinished) {
            this.offsetFrame += offsetFrame;
            var offset = this.offsetFrame / (this.speed * _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.TIME_MULTIPLIER);

            if ((this.gameOver || this.gameFinished) && offset >= 0.95) {
              this.offsetFrame = 0;
              this.ticks++;
            }
          }

          this.draw();
          this.lastTime = Date.now();
        }

        this.startDraw();
      }
    }
  }, {
    key: "draw",
    value: function draw() {
      var _this6 = this;

      if (this.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.TEXT && !this.killed) {
        if (this.grid != null) {
          this.textarea.style.width = this.grid.width * 16.5 + "px";
          this.textarea.style.height = this.grid.height * 16 + 100 + "px";
        }

        this.textarea.innerHTML = this.toString();
      } else if (this.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.GRAPHICAL && !this.killed) {
        var ctx = this.canvasCtx;
        this.currentPlayer = this.controller.getCurrentPlayer();
        this.fontSize = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.FONT_SIZE;
        this.header.minHeight = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.HEADER_HEIGHT_DEFAULT;

        if (this.canvas.width <= _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.CANVAS_WIDTH / 1.25) {
          this.fontSize /= 1.25;
          this.header.minHeight = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.HEADER_HEIGHT_DEFAULT / 1.25;
        } else if (this.canvas.width >= _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.CANVAS_WIDTH * 1.5) {
          this.fontSize *= 1.25;
          this.header.minHeight = _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.HEADER_HEIGHT_DEFAULT * 1.25;
        }

        jsgametools__WEBPACK_IMPORTED_MODULE_7__["Constants"].Setting.FONT_SIZE = this.fontSize;
        this.labelMenus.size = this.fontSize;

        if (this.notificationMessage) {
          this.notificationMessage.fontSize = this.fontSize;
          this.notificationMessage.fontSizeInitial = this.fontSize;
          this.notificationMessage.easingFunction = jsgametools__WEBPACK_IMPORTED_MODULE_7__["EasingFunctions"].easeInOutCubic;
        }

        if (this.gameRanking) {
          this.gameRanking.fontSize = this.fontSize;
        }

        this.menu.disable();
        this.box.width = this.canvas.width;
        this.box.height = this.canvas.height;

        if (this.assetsLoaded && !this.errorOccurred) {
          this.header.set(this.snakes, this.imageLoader, this.bestScoreToDisplay, this.header.height, this.numFruit, this.enablePause);

          if (this.grid != null && (!this.grid.maze || this.grid.maze && (!this.paused || this.gameOver || this.gameFinished))) {
            this.gridUI.set(this.snakes, this.grid, this.speed, this.offsetFrame, this.header.height, this.imageLoader, this.currentPlayer, this.gameFinished, this.countBeforePlay, this.spectatorMode, this.ticks, this.gameOver);
          }

          if (this.timerToDisplay != undefined && this.timerToDisplay != null && !isNaN(this.timerToDisplay) && this.timerToDisplay >= 0) {
            var sizesTimer = jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawText(ctx, "" + _engine_GameUtils__WEBPACK_IMPORTED_MODULE_3__["default"].secondsFormat(this.timerToDisplay), "rgba(0, 0, 0, 0.5)", Math.round(this.fontSize), _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.FONT_FAMILY, "right", "default", null, Math.round(this.header.height + 15 + this.header.height * 0.475));
            jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawImage(ctx, this.imageLoader.get("assets/images/clock.png", Math.round(this.header.height * 0.64), Math.round(this.header.height * 0.64)), Math.round(sizesTimer["x"] - this.header.height * 0.64 - 10), Math.round(this.header.height + 15), Math.round(this.header.height * 0.64), Math.round(this.header.height * 0.64));
          }
        } else if (!this.assetsLoaded) {
          var percentLoaded = Math.floor(100 * Object.keys(this.imageLoader.images).length / this.imageLoader.nbImagesToLoad);
          this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.loading") + "\n" + percentLoaded + "%";
          this.labelMenus.color = "white";
          this.progressBarLoading.percent = percentLoaded / 100;
          this.progressBarLoading.width = this.canvas.width / 4;
          this.menu.set(this.labelMenus, this.progressBarLoading);
        }

        if (this.aiStuck && !this.precAiStuck) {
          this.precAiStuck = true;
          this.setNotification(new jsgametools__WEBPACK_IMPORTED_MODULE_7__["NotificationMessage"](i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.aiStuck"), null, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.ERROR_NOTIF_COLOR, 10));
        }

        if (this.notificationMessage != undefined && this.notificationMessage != null && this.notificationMessage instanceof jsgametools__WEBPACK_IMPORTED_MODULE_7__["NotificationMessage"] && !this.notificationMessage.foreGround) {
          this.notificationMessage.draw(this);
        }
        /*if(this.snakes != null && (this.getNBPlayer(GameConstants.PlayerType.HUMAN) > 0 || this.getNBPlayer(GameConstants.PlayerType.HYBRID_HUMAN_AI) > 0) && (this.getNBPlayer(GameConstants.PlayerType.HUMAN) <= 1 || this.getNBPlayer(GameConstants.PlayerType.HYBRID_HUMAN_AI) <= 1 || this.currentPlayer != null) && !this.spectatorMode) {
          this.btnTopArrow.draw(this.canvasCtx);
          this.btnBottomArrow.draw(this.canvasCtx);
          this.btnRightArrow.draw(this.canvasCtx);
          this.btnLeftArrow.draw(this.canvasCtx);
        }*/


        if (this.snakes != null && this.snakes.length <= 1) {
          this.gameRanking.forceClose();
        }

        if (!this.gameFinished && !this.gameOver && this.assetsLoaded && !this.errorOccurred) {
          this.gameRanking.set(this.snakes, this.fontSize, this.header.height, this.currentPlayer, this.imageLoader, this.spectatorMode);
        }

        this.disableAllButtons();

        if (this.searchingPlayers && this.lastTime > 0) {
          this.timeStart -= Math.max(0, Date.now() - this.lastTime);
        } else {
          this.timeStart = 0;
        }

        var nextGameText = this.timeStart > 0 ? "\n\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.servers.nextGameStart") + " " + _engine_GameUtils__WEBPACK_IMPORTED_MODULE_3__["default"].millisecondsFormat(this.timeStart) : "";

        if (this.exited) {
          this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.exited");
          this.labelMenus.color = "white";
          this.fullscreen ? this.menu.set(this.labelMenus, this.btnExitFullScreen) : this.menu.set(this.labelMenus);
          this.btnExitFullScreen.setClickAction(function () {
            _this6.toggleFullscreen();
          });
        } else if (this.errorOccurred) {
          this.labelMenus.text = this.imageLoader.hasError ? i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.errorLoading") : i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.error");
          this.labelMenus.color = "#E74C3C";
          this.menu.set(this.labelMenus, this.btnQuit);
          this.btnQuit.setClickAction(function () {
            _this6.confirmExit = false;

            _this6.exit();
          });
        } else if (this.getInfosGame) {
          if (this.getAdvancedInfosGame && this.grid && (this.grid.seedGrid || this.grid.seedGame)) {
            this.labelMenus.text = (this.grid.seedGrid ? i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.seedGrid") + "\n" + this.grid.seedGrid : "") + (this.grid.seedGame ? "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.seedGame") + "\n" + this.grid.seedGame : "");
            this.menu.set(this.labelMenus, this.btnOK);
            this.btnOK.setClickAction(function () {
              _this6.getAdvancedInfosGame = false;
            });
          } else {
            this.labelMenus.text = (this.snakes != null && this.snakes.length <= 1 && !this.spectatorMode ? i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.player") + " " + (this.snakes != null && this.snakes[0].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HUMAN && !this.spectatorMode || this.snakes != null && this.snakes[0].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HYBRID_HUMAN_AI ? i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.playerHuman") : i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.playerAI")) : "") + (this.getNBPlayer(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.AI) > 0 ? "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.aiLevel") + " " + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.aiLevelList." + this.getPlayer(1, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.AI).getAILevelText()) : "") + "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.sizeGrid") + " " + (this.grid != null && this.grid.width ? this.grid.width : "???") + "×" + (this.grid != null && this.grid.height ? this.grid.height : "???") + "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.currentSpeed") + " " + (this.initialSpeed != null ? this.initialSpeed : "???") + (this.snakes != null && this.snakes.length <= 1 && this.progressiveSpeed ? "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.progressiveSpeed") : "") + (this.grid != null && !this.grid.maze && this.snakes != null && this.snakes[0].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HYBRID_HUMAN_AI ? "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.assistAI") : "") + (this.grid != null && this.grid.maze ? "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.mazeModeMin") : "") + (this.onlineMode ? "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.onlineMode") : "") + (this.pingLatency > -1 ? "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.ping") + " " + this.pingLatency + " ms" : "");
            this.grid && (this.grid.seedGrid || this.grid.seedGame) ? this.menu.set(this.labelMenus, this.btnAdvanced, this.btnOK) : this.menu.set(this.labelMenus, this.btnOK);
            this.btnOK.setClickAction(function () {
              _this6.getInfosGame = false;
            });
            this.btnAdvanced.setClickAction(function () {
              _this6.getAdvancedInfosGame = true;
            });
          }

          this.labelMenus.color = "white";
        } else if (this.getInfos) {
          this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.aboutScreen.title") + "\nwww.eliastiksofts.com\n\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.aboutScreen.versionAndDate", {
            version: _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.APP_VERSION,
            date: new Intl.DateTimeFormat(i18next__WEBPACK_IMPORTED_MODULE_2__["default"].language).format(new Date(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.DATE_VERSION)),
            interpolation: {
              escapeValue: false
            }
          });
          this.labelMenus.color = "white";
          this.menu.set(this.labelMenus, this.btnInfosGame, this.btnOK);
          this.btnInfosGame.setClickAction(function () {
            _this6.getInfosGame = true;
          });
          this.btnOK.setClickAction(function () {
            _this6.getInfos = false;
          });
        } else if (this.confirmExit) {
          this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.exitConfirm");
          this.labelMenus.color = "#E74C3C";
          this.menu.set(this.labelMenus, this.btnNo, this.btnYes);
          this.btnYes.setClickAction(function () {
            _this6.confirmExit = false;

            _this6.exit();
          });
          this.btnNo.setClickAction(function () {
            _this6.confirmExit = false;
          });
        } else if (this.assetsLoaded && this.countBeforePlay >= 0) {
          if (this.snakes != null && (this.snakes.length > 1 && this.getNBPlayer(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HUMAN) <= 1 && this.getPlayer(1, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HUMAN) != null || this.snakes.length > 1 && this.getNBPlayer(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HYBRID_HUMAN_AI) <= 1 && this.getPlayer(1, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HYBRID_HUMAN_AI) != null || this.currentPlayer != null && this.snakes.length > 1)) {
            var playerHuman, colorName, colorRgb;

            if (!this.spectatorMode) {
              if (this.currentPlayer != null && this.currentPlayer > -1) {
                playerHuman = this.getPlayer(this.currentPlayer + 1, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HUMAN) || this.getPlayer(this.currentPlayer + 1, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HYBRID_HUMAN_AI);
              } else if (this.getPlayer(1, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HUMAN) != null) {
                playerHuman = this.getPlayer(1, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HUMAN);
              } else {
                playerHuman = this.getPlayer(1, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HYBRID_HUMAN_AI);
              }
            }

            if (playerHuman != null) {
              colorName = _GraphicsUtils__WEBPACK_IMPORTED_MODULE_4__["default"].hslToName(_engine_GameUtils__WEBPACK_IMPORTED_MODULE_3__["default"].addHue(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.IMAGE_SNAKE_HUE, playerHuman.color), _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.IMAGE_SNAKE_SATURATION, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.IMAGE_SNAKE_VALUE);
              colorRgb = _GraphicsUtils__WEBPACK_IMPORTED_MODULE_4__["default"].hsvToRgb(_engine_GameUtils__WEBPACK_IMPORTED_MODULE_3__["default"].addHue(_engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.IMAGE_SNAKE_HUE, playerHuman.color) / 360, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.IMAGE_SNAKE_SATURATION / 100, _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.IMAGE_SNAKE_VALUE / 100);
            }

            if (this.countBeforePlay > 0) {
              this.labelMenus.text = "" + this.countBeforePlay;
            } else {
              this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.ready");
            }

            this.labelMenus.text += playerHuman != null ? "\n" + (this.isFilterHueAvailable && colorName != "???" && (this.graphicSkin == "flat" || this.graphicSkin == "pixel") ? i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.colorPlayer", {
              color: colorName
            }) : i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.arrowPlayer")) : "";

            if (colorRgb && colorRgb.length >= 3) {
              this.labelMenus.color = this.isFilterHueAvailable && colorName != "???" && (this.graphicSkin == "flat" || this.graphicSkin == "pixel") ? ["white", "rgb(" + colorRgb[0] + ", " + colorRgb[1] + ", " + colorRgb[2] + ")"] : ["white", "#3498db"];
            } else {
              this.labelMenus.color = "white";
            }
          } else {
            if (this.countBeforePlay > 0) {
              this.labelMenus.text = "" + this.countBeforePlay;
            } else {
              this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.ready");
            }

            this.labelMenus.color = "white";
          }

          !this.fullscreen ? this.menu.set(this.labelMenus, this.btnEnterFullScreen) : this.menu.set(this.labelMenus);
          this.btnEnterFullScreen.setClickAction(function () {
            _this6.toggleFullscreen();
          });
        } else if (this.confirmReset && !this.gameOver) {
          this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.resetConfirm");
          this.labelMenus.color = "#E74C3C";
          this.menu.set(this.labelMenus, this.btnNo, this.btnYes);
          this.btnYes.setClickAction(function () {
            _this6.confirmReset = false;

            _this6.reset();
          });
          this.btnNo.setClickAction(function () {
            _this6.confirmReset = false;
          });
        } else if (this.gameFinished) {
          this.labelMenus.text = this.grid.maze && this.gameMazeWin ? i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.mazeWin") : i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.gameFinished") + nextGameText;
          this.labelMenus.color = this.grid.maze && this.gameMazeWin ? "#2ecc71" : "white";
          this.enableRetry ? this.menu.set(this.labelMenus, this.btnRetry, this.btnQuit) : this.menu.set(this.labelMenus, this.btnQuit);
          this.btnRetry.setClickAction(function () {
            _this6.reset();
          });
          this.btnQuit.setClickAction(function () {
            _this6.confirmExit = true;
          });
        } else if (this.scoreMax && this.snakes.length <= 1) {
          this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.scoreMax") + nextGameText;
          this.labelMenus.color = "#2ecc71";
          this.enableRetry ? this.menu.set(this.labelMenus, this.btnRetry, this.btnQuit) : this.fullscreen ? this.menu.set(this.labelMenus, this.btnExitFullScreen) : this.menu.set(this.labelMenus, this.btnQuit);
          this.btnRetry.setClickAction(function () {
            _this6.reset();
          });
          this.btnQuit.setClickAction(function () {
            _this6.confirmExit = true;
          });
          this.btnExitFullScreen.setClickAction(function () {
            _this6.toggleFullscreen();
          });
        } else if (this.gameOver && this.snakes.length <= 1) {
          this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.gameOver") + nextGameText;
          this.labelMenus.color = "#E74C3C";
          this.enableRetry && this.snakes[0] && !this.snakes[0].autoRetry ? this.menu.set(this.labelMenus, this.btnRetry, this.btnQuit) : this.fullscreen ? this.menu.set(this.labelMenus, this.btnExitFullScreen) : this.menu.set(this.labelMenus, this.btnQuit);

          if (this.snakes[0] && this.snakes[0].autoRetry && this.timeoutAutoRetry == null) {
            this.timeoutAutoRetry = setTimeout(function () {
              _this6.reset();

              _this6.timeoutAutoRetry = null;
            }, 500);
          } else {
            this.btnRetry.setClickAction(function () {
              _this6.reset();
            });
            this.btnQuit.setClickAction(function () {
              _this6.confirmExit = true;
            });
            this.btnExitFullScreen.setClickAction(function () {
              _this6.toggleFullscreen();
            });
          }
        } else if (this.assetsLoaded && this.searchingPlayers) {
          this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.servers.waitingPlayers") + "\n" + this.playerNumber + "/" + this.maxPlayers + (this.timeStart > 0 ? "\n\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.servers.gameStart") + " " + _engine_GameUtils__WEBPACK_IMPORTED_MODULE_3__["default"].millisecondsFormat(this.timeStart) : "");
          this.labelMenus.color = "white";
          this.onlineMaster ? this.menu.set(this.labelMenus, this.btnStartGame, this.btnQuit) : this.menu.set(this.labelMenus, this.btnQuit);
          this.btnQuit.setClickAction(function () {
            _this6.confirmExit = true;
          });
          this.btnStartGame.setClickAction(function () {
            _this6.forceStart();
          });
        } else if (this.paused && !this.gameOver && this.assetsLoaded) {
          this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.pause");
          this.labelMenus.color = "white";
          this.enablePause ? this.enableRetry && this.enableRetryPauseMenu ? this.menu.set(this.labelMenus, this.btnContinue, this.btnRetry, this.btnAbout, this.btnQuit) : this.menu.set(this.labelMenus, this.btnContinue, this.btnAbout, this.btnQuit) : this.menu.set(this.labelMenus, this.btnContinue, this.btnAbout);
          this.btnContinue.setClickAction(function () {
            _this6.start();
          });
          this.btnRetry.setClickAction(function () {
            _this6.confirmReset = true;
          });
          this.btnQuit.setClickAction(function () {
            _this6.confirmExit = true;
          });
          this.btnAbout.setClickAction(function () {
            _this6.getInfos = true;
          });
        } else if (this.assetsLoaded) {
          this.btnFullScreen.enable();
          this.gameRanking.enable();

          if (this.snakes != null) {
            for (var i = 0; i < this.snakes.length; i++) {
              if (this.snakes[i].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HUMAN || this.snakes[i].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].PlayerType.HYBRID_HUMAN_AI) {
                this.btnTopArrow.enable();
                this.btnBottomArrow.enable();
                this.btnLeftArrow.enable();
                this.btnRightArrow.enable();
                break;
              }
            }
          }

          if (this.enablePause) {
            this.btnPause.enable();
          }

          if (this.snakes != null && this.snakes.length > 1) {
            this.btnRank.enable();
          }

          if (this.notificationMessage != undefined && this.notificationMessage != null && this.notificationMessage instanceof jsgametools__WEBPACK_IMPORTED_MODULE_7__["NotificationMessage"] && !this.notificationMessage.foreGround) {
            this.notificationMessage.enableCloseButton();
          }
        }

        if (this.assetsLoaded && this.engineLoading) {
          this.labelMenus.text = i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.loadingWorker");
          this.labelMenus.color = "white";
          this.menu.set(this.labelMenus);
        }

        this.labelMenus.fontSize = this.fontSize;

        if ((this.gameFinished || this.gameOver) && this.snakes != null && this.snakes.length > 1 && !this.errorOccurred) {
          this.gameRanking.open();
          this.gameRanking.enable();
        }

        if (this.notificationMessage != undefined && this.notificationMessage != null && this.notificationMessage instanceof jsgametools__WEBPACK_IMPORTED_MODULE_7__["NotificationMessage"] && this.notificationMessage.foreGround) {
          this.notificationMessage.enableCloseButton();
        }

        if (this.displayFPS) {
          jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawText(ctx, this.getDebugText(), "rgba(255, 255, 255, 0.85)", Math.round(this.fontSize / 1.5), _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.FONT_FAMILY, "right", "bottom", null, null, true);
        }

        if (this.spectatorMode) {
          jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawText(ctx, i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.servers.spectatorMode"), "rgba(255, 255, 255, 0.5)", Math.round(this.fontSize), _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].Setting.FONT_FAMILY, "left", "bottom", null, null, true);
        }

        this.canvas.draw();
      }
    }
  }, {
    key: "setDisplayFPS",
    value: function setDisplayFPS(display) {
      this.displayFPS = display;
    }
  }, {
    key: "disableAllButtons",
    value: function disableAllButtons() {
      if (this.outputType == _engine_Constants__WEBPACK_IMPORTED_MODULE_5__["default"].OutputType.GRAPHICAL) {
        this.btnContinue.disable();
        this.btnRetry.disable();
        this.btnQuit.disable();
        this.btnYes.disable();
        this.btnNo.disable();
        this.btnOK.disable();
        this.btnOK.disable();
        this.btnAbout.disable();
        this.btnInfosGame.disable();
        this.btnFullScreen.disable();
        this.btnPause.disable();
        this.btnRank.disable();
        this.btnExitFullScreen.disable();
        this.btnEnterFullScreen.disable();
        this.btnStartGame.disable();
        this.gameRanking.disable();

        if (this.notificationMessage != undefined && this.notificationMessage != null && this.notificationMessage instanceof jsgametools__WEBPACK_IMPORTED_MODULE_7__["NotificationMessage"]) {
          this.notificationMessage.disableCloseButton();
        }

        this.btnTopArrow.disable();
        this.btnBottomArrow.disable();
        this.btnRightArrow.disable();
        this.btnLeftArrow.disable();
      }
    }
  }, {
    key: "setNotification",
    value: function setNotification(notification) {
      if (this.notificationMessage != undefined && this.notificationMessage != null && this.notificationMessage instanceof jsgametools__WEBPACK_IMPORTED_MODULE_7__["NotificationMessage"]) {
        this.notificationMessage.close();
        this.scene.remove(this.notificationMessage);
      }

      this.notificationMessage = notification;

      if (this.notificationMessage instanceof jsgametools__WEBPACK_IMPORTED_MODULE_7__["NotificationMessage"] && this.disableAnimation) {
        this.notificationMessage.disableAnimation = true;
      }

      if (this.notificationMessage) {
        this.scene.add(this.notificationMessage);
        this.notificationMessage.open();
      }
    }
  }, {
    key: "setTimeToDisplay",
    value: function setTimeToDisplay(time) {
      this.timerToDisplay = time;
    }
  }, {
    key: "setBestScore",
    value: function setBestScore(score) {
      if (score != undefined && score != null && score.trim() != "") {
        this.bestScoreToDisplay = score;
      }
    }
  }, {
    key: "getDebugText",
    value: function getDebugText() {
      return i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.debug.fps") + " " + this.currentFPS + " / " + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.debug.frames") + " " + this.frame + " / " + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.debug.ticks") + " " + this.ticks + " / " + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.debug.speed") + " " + this.speed + (this.pingLatency > -1 ? " / " + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.ping") + " " + this.pingLatency + " ms" : "");
    }
  }, {
    key: "toString",
    value: function toString() {
      return (this.grid != null ? this.grid.toString() : "") + "\n" + (this.snakes != null && this.snakes.length <= 1 ? i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.score") + " : " + (this.snakes != null ? this.snakes[0].score : "") : "") + (this.displayFPS ? "\n" + this.getDebugText() : "") + (this.gameOver && !this.scoreMax ? "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.gameOver") : "") + (this.scoreMax ? "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.scoreMax") : "") + (!this.gameOver && this.paused ? "\n" + i18next__WEBPACK_IMPORTED_MODULE_2__["default"].t("engine.debug.paused") : "") + (this.countBeforePlay > 0 ? "\n" + this.countBeforePlay : "");
    }
  }]);

  return GameUI;
}();



/***/ }),

/***/ "./src/ui/GraphicsUtils.js":
/*!*********************************!*\
  !*** ./src/ui/GraphicsUtils.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */

/* harmony default export */ __webpack_exports__["default"] = ({
  hsvToRgb: function hsvToRgb(h, s, v) {
    var r, g, b, i, f, p, q, t;
    i = Math.floor(h * 6);
    f = h * 6 - i;
    p = v * (1 - s);
    q = v * (1 - f * s);
    t = v * (1 - (1 - f) * s);

    switch (i % 6) {
      case 0:
        r = v, g = t, b = p;
        break;

      case 1:
        r = q, g = v, b = p;
        break;

      case 2:
        r = p, g = v, b = t;
        break;

      case 3:
        r = p, g = q, b = v;
        break;

      case 4:
        r = t, g = p, b = v;
        break;

      case 5:
        r = v, g = p, b = q;
        break;
    }

    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
  },
  hslToName: function hslToName(h, s, l) {
    if (s <= 10 && l >= 90) {
      return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.colors.white");
    } else if (s <= 10 && l <= 70 || s == 0) {
      return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.colors.gray");
    } else if (l <= 15) {
      return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.colors.black");
    } else if (h >= 0 && h <= 6 || h >= 350) {
      return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.colors.red");
    } else if (h >= 7 && h <= 42) {
      return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.colors.orange");
    } else if (h >= 43 && h <= 70) {
      return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.colors.yellow");
    } else if (h >= 71 && h <= 156) {
      return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.colors.green");
    } else if (h >= 157 && h <= 221) {
      return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.colors.blue");
    } else if (h >= 222 && h <= 290) {
      return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.colors.purple");
    } else if (h >= 291 && h <= 349) {
      return i18next__WEBPACK_IMPORTED_MODULE_0__["default"].t("engine.colors.pink");
    } else {
      return "???";
    }
  }
});

/***/ }),

/***/ "./src/ui/GridUI.js":
/*!**************************!*\
  !*** ./src/ui/GridUI.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GridUI; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _engine_Constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../engine/Constants */ "./src/engine/Constants.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! jsgametools */ "./node_modules/jsgametools/lib/JSGameTools.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(jsgametools__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _engine_Position__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../engine/Position */ "./src/engine/Position.js");







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */





var GridUI = /*#__PURE__*/function (_Component) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(GridUI, _Component);

  var _super = _createSuper(GridUI);

  function GridUI(snakes, grid, speed, disableAnimation, graphicSkin, isFilterHueAvailable, headerHeight, imageLoader, currentPlayer, gameFinished, countBeforePlay, spectatorMode, ticks, gameOver) {
    var _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GridUI);

    _this = _super.call(this);
    _this.snakes = snakes;
    _this.grid = grid;
    _this.speed = speed;
    _this.disableAnimation = disableAnimation;
    _this.isFilterHueAvailable = isFilterHueAvailable;
    _this.headerHeight = headerHeight;
    _this.imageLoader = imageLoader;
    _this.graphicSkin = graphicSkin;
    _this.currentPlayer = currentPlayer;
    _this.gameFinished = gameFinished;
    _this.offsetFrame = 0;
    _this.countBeforePlay = countBeforePlay;
    _this.spectatorMode = spectatorMode;
    _this.ticks = ticks;
    _this.gameOver = gameOver;
    _this.canvasTmp = document.createElement("canvas");
    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GridUI, [{
    key: "draw",
    value: function draw(context) {
      if (this.grid && this.grid.grid) {
        _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(GridUI.prototype), "draw", this).call(this, context);

        var canvas = context.canvas;
        var ctx = canvas.getContext("2d");
        this.canvasTmp.width = canvas.width;
        this.canvasTmp.height = canvas.height;
        ctx.save();
        var caseHeight = Math.floor((canvas.height - this.headerHeight) / this.grid.height);
        var caseWidth = Math.floor(canvas.width / this.grid.width);
        caseHeight = caseHeight > caseWidth ? caseWidth : caseHeight;
        caseWidth = caseWidth > caseHeight ? caseHeight : caseWidth;
        var totalWidth = caseWidth * this.grid.width;
        var totalHeight = caseHeight * this.grid.height;
        this.width = totalWidth;
        this.height = totalHeight;

        for (var i = 0; i < this.grid.height; i++) {
          for (var j = 0; j < this.grid.width; j++) {
            var caseX = Math.floor(j * caseWidth + (canvas.width - totalWidth) / 2);
            var caseY = this.headerHeight + i * caseHeight;

            if (i == 0 && j == 0) {
              this.x = caseX;
              this.y = caseY;
            }

            if (i % 2 == 0 && j % 2 == 0 || i % 2 == 1 && j % 2 == 1) {
              ctx.fillStyle = "rgba(127, 140, 141, 0.75)";
            } else {
              ctx.fillStyle = "rgba(44, 62, 80, 0.75)";
            }

            ctx.fillRect(caseX, caseY, caseWidth, caseHeight);
            jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawImage(ctx, this.imageLoader.get("assets/images/skin/" + this.graphicSkin + "/" + this.grid.getImageCase(new _engine_Position__WEBPACK_IMPORTED_MODULE_9__["default"](j, i)), Math.round(caseWidth), Math.round(caseHeight)), Math.round(caseX), Math.round(caseY), Math.round(caseWidth), Math.round(caseHeight));
          }
        }

        this.drawSnake(ctx, caseWidth, caseHeight, totalWidth, this.currentPlayer);
        this.canvasTmp.width = 0;
        this.canvasTmp.height = 0;
        ctx.restore();
      }
    }
  }, {
    key: "drawSnake",
    value: function drawSnake(ctx, caseWidth, caseHeight, totalWidth, currentPlayer) {
      if (this.snakes != null) {
        var canvas = this.canvasTmp;
        var ctxTmp = this.canvasTmp.getContext("2d");

        for (var j = 0; j < this.snakes.length; j++) {
          ctxTmp.clearRect(0, 0, this.canvasTmp.width, this.canvasTmp.height);

          if (this.snakes[j].color != undefined) {
            ctxTmp.filter = "hue-rotate(" + this.snakes[j].color + "deg)";
          }

          for (var i = this.snakes[j].length() - 1; i >= -1 && this.snakes[j].length() > 1 || i >= 0; i--) {
            // -1 == tail
            var position = void 0;

            if (i == -1) {
              position = this.snakes[j].get(this.snakes[j].length() - 1);
            } else {
              position = this.snakes[j].get(i);
            }

            var caseX = 0;
            var caseY = 0;
            var direction = position.direction;
            var angle = 0;
            var imageLoc = "";
            var eraseBelow = true;

            if (i == 0) {
              direction = this.snakes[j].getHeadPosition().direction;
            } else if (i == -1) {
              if (!this.disableAnimation && !this.snakes[j].gameOver && !this.snakes[j].scoreMax && !this.gameFinished && this.snakes[j].lastTailMoved) {
                direction = this.snakes[j].getTailPosition().direction;
              } else {
                direction = this.snakes[j].get(this.snakes[j].length() - 2).direction;
              }
            } else {
              direction = this.snakes[j].getGraphicDirection(i);
            } // Animation


            if (!this.disableAnimation && (i == 0 || i == -1 && this.snakes[j].lastTailMoved) && !this.snakes[j].scoreMax && (!this.gameFinished && !this.gameOver || this.snakes[j].gameOver) && (!this.snakes[j].gameOver || this.snakes[j].gameOver && this.ticks < this.snakes[j].ticksDead + 2)) {
              var offset = this.offsetFrame / (this.speed * _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Setting.TIME_MULTIPLIER); // Percentage of the animation

              if (this.snakes[j].gameOver && this.snakes[j].ticksDead) {
                if (this.ticks <= this.snakes[j].ticksDead) {
                  offset = 1 - offset; // Dead animation

                  offset = jsgametools__WEBPACK_IMPORTED_MODULE_7__["EasingFunctions"].easeInCubic(offset);
                } else {
                  offset = jsgametools__WEBPACK_IMPORTED_MODULE_7__["EasingFunctions"].easeOutBounce(offset);
                }
              }

              offset = Math.max(0, Math.min(1, offset));
              var offsetX = caseWidth * offset - caseWidth;
              var offsetY = caseHeight * offset - caseHeight;
              var currentPosition = position;
              var graphicDirection = void 0;

              if (i == 0) {
                if (this.snakes[j].length() > 1) {
                  graphicDirection = this.snakes[j].getGraphicDirection(1);
                } else {
                  graphicDirection = this.snakes[j].getGraphicDirection(0);
                }
              } else if (i == -1) {
                graphicDirection = this.snakes[j].getGraphicDirectionFor(this.snakes[j].getTailPosition(), this.snakes[j].lastTail, this.snakes[j].get(this.snakes[j].length() - 2));
              }

              if (i == -1 && this.snakes[j].length() > 1) {
                currentPosition = this.snakes[j].get(this.snakes[j].length() - 1);
              }

              if ((i == 0 || i == -1) && (graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_1 || graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_2 || graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_3 || graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_4)) {
                if (i == 0) {
                  angle = -90;
                }

                if (i == 0) {
                  angle += -128.073 * Math.pow(offset, 2) + 222.332 * offset - 5.47066; // Interpolated rotation animation
                } else if (i == -1) {
                  angle += 126.896 * Math.pow(offset, 2) + -33.6471 * offset + 1.65942; // Interpolated rotation animation tail
                }

                if (i == 0 && (graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_4 && direction == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.UP || graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_1 && direction == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.LEFT || graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_2 && direction == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.BOTTOM || graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_3 && direction == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.RIGHT)) {
                  angle = -angle;
                } else if (i == -1 && (graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_4 && direction == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.RIGHT || graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_3 && direction == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.BOTTOM || graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_1 && direction == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.UP || graphicDirection == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_2 && direction == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.LEFT)) {
                  angle = -angle;
                }

                eraseBelow = false;
              }

              switch (currentPosition.direction) {
                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.UP:
                  caseY -= offsetY;
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.BOTTOM:
                  caseY += offsetY;
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.RIGHT:
                  caseX += offsetX;
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.LEFT:
                  caseX -= offsetX;
                  break;
              }
            }

            if (i == this.snakes[j].length() - 1) {
              direction = this.snakes[j].getGraphicDirectionFor(position, this.snakes[j].get(i - 1), this.snakes[j].lastTail);
            }

            var posX = position.x;
            var posY = position.y;
            caseX += Math.floor(posX * caseWidth + (canvas.width - totalWidth) / 2);
            caseY += this.headerHeight + posY * caseHeight;

            if (i == 0) {
              if (this.snakes[j].gameOver && !this.snakes[j].scoreMax) {
                switch (direction) {
                  case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.BOTTOM:
                    imageLoc = "assets/images/skin/" + this.graphicSkin + "/snake_dead.png";
                    break;

                  case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.RIGHT:
                    imageLoc = "assets/images/skin/" + this.graphicSkin + "/snake_dead_2.png";
                    break;

                  case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.UP:
                    imageLoc = "assets/images/skin/" + this.graphicSkin + "/snake_dead_3.png";
                    break;

                  case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.LEFT:
                    imageLoc = "assets/images/skin/" + this.graphicSkin + "/snake_dead_4.png";
                    break;
                }
              } else {
                switch (direction) {
                  case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.BOTTOM:
                    imageLoc = "assets/images/skin/" + this.graphicSkin + "/snake.png";
                    break;

                  case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.RIGHT:
                    imageLoc = "assets/images/skin/" + this.graphicSkin + "/snake_2.png";
                    break;

                  case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.UP:
                    imageLoc = "assets/images/skin/" + this.graphicSkin + "/snake_3.png";
                    break;

                  case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.LEFT:
                    imageLoc = "assets/images/skin/" + this.graphicSkin + "/snake_4.png";
                    break;
                }
              }
            } else if (i == -1) {
              switch (direction) {
                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.BOTTOM:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body_end.png";
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.RIGHT:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body_2_end.png";
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.UP:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body_3_end.png";
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.LEFT:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body_4_end.png";
                  break;
              }
            } else {
              switch (direction) {
                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.UP:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body.png";
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.BOTTOM:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body.png";
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.RIGHT:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body_2.png";
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.LEFT:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body_2.png";
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_1:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body_angle_1.png";
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_2:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body_angle_2.png";
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_3:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body_angle_3.png";
                  break;

                case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.ANGLE_4:
                  imageLoc = "assets/images/skin/" + this.graphicSkin + "/body_angle_4.png";
                  break;
              }
            }

            jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawImage(ctxTmp, this.imageLoader.get(imageLoc, Math.round(caseWidth), Math.round(caseHeight)), Math.round(caseX), Math.round(caseY), Math.round(caseWidth), Math.round(caseHeight), null, null, null, null, eraseBelow, Math.round(angle));
          }

          jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawImageData(ctx, this.canvasTmp, Math.round((canvas.width - totalWidth) / 2), this.headerHeight, totalWidth, Math.round(caseHeight * this.grid.height), Math.floor((canvas.width - totalWidth) / 2), this.headerHeight, totalWidth, Math.round(caseHeight * this.grid.height));
          ctxTmp.filter = "none";
        }

        if (this.snakes.length > 1) {
          this.drawSnakeInfos(ctx, totalWidth, caseWidth, caseHeight, currentPlayer);
        }
      }
    }
  }, {
    key: "drawSnakeInfos",
    value: function drawSnakeInfos(ctx, totalWidth, caseWidth, caseHeight, currentPlayer) {
      var numPlayer = 0;
      var numAI = 0;

      for (var i = 0; i < this.snakes.length; i++) {
        if (this.snakes[i].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].PlayerType.HUMAN || this.snakes[i].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].PlayerType.HYBRID_HUMAN_AI) {
          numPlayer++;
        } else {
          numAI++;
        }

        var position = this.snakes[i].get(0);

        if (position != null) {
          var posX = position.x;
          var posY = position.y;
          var caseX = Math.floor(posX * caseWidth + (this.canvasTmp.width - totalWidth) / 2);
          var caseY = this.headerHeight + posY * caseHeight;

          if (!this.disableAnimation && !this.snakes[i].gameOver && !this.gameFinished && !this.gameOver) {
            var offset = this.offsetFrame / (this.speed * _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Setting.TIME_MULTIPLIER);
            offset = offset > 1 ? 1 : offset;
            var offsetX = caseWidth * offset - caseWidth;
            var offsetY = caseHeight * offset - caseHeight;

            switch (position.direction) {
              case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.UP:
                caseY -= offsetY;
                break;

              case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.BOTTOM:
                caseY += offsetY;
                break;

              case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.RIGHT:
                caseX += offsetX;
                break;

              case _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Direction.LEFT:
                caseX -= offsetX;
                break;
            }
          }

          jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawText(ctx, (this.snakes[i].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].PlayerType.HUMAN || this.snakes[i].player == _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].PlayerType.HYBRID_HUMAN_AI ? i18next__WEBPACK_IMPORTED_MODULE_8__["default"].t("engine.playerMin") + numPlayer : i18next__WEBPACK_IMPORTED_MODULE_8__["default"].t("engine.aiMin") + numAI) + "\n× " + this.snakes[i].score, "rgb(255, 255, 255)", Math.round(caseHeight / 2), _engine_Constants__WEBPACK_IMPORTED_MODULE_6__["default"].Setting.FONT_FAMILY, null, null, caseX, caseY - Math.round(caseHeight / 1.75), false, true);

          if (!this.spectatorMode && currentPlayer == i && this.countBeforePlay >= 0 && (currentPlayer != null || this.isFilterHueAvailable && this.snakes.length > 2 || !this.isFilterHueAvailable && this.snakes.length > 1)) {
            jsgametools__WEBPACK_IMPORTED_MODULE_7__["Utils"].drawArrow(ctx, Math.round(caseX + caseWidth / 2), Math.round(caseY - caseHeight * 2), Math.round(caseX + caseWidth / 2), Math.round(caseY - 5));
          }
        }
      }
    }
  }, {
    key: "set",
    value: function set(snakes, grid, speed, offsetFrame, headerHeight, imageLoader, currentPlayer, gameFinished, countBeforePlay, spectatorMode, ticks, gameOver) {
      this.snakes = snakes;
      this.grid = grid;
      this.speed = speed;
      this.headerHeight = headerHeight;
      this.imageLoader = imageLoader;
      this.currentPlayer = currentPlayer;
      this.gameFinished = gameFinished;
      this.offsetFrame = offsetFrame;
      this.countBeforePlay = countBeforePlay;
      this.spectatorMode = spectatorMode;
      this.ticks = ticks;
      this.gameOver = gameOver;
    }
  }]);

  return GridUI;
}(jsgametools__WEBPACK_IMPORTED_MODULE_7__["Component"]);



/***/ }),

/***/ "./src/ui/Header.js":
/*!**************************!*\
  !*** ./src/ui/Header.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Header; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");
/* harmony import */ var _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/set */ "./node_modules/@babel/runtime/helpers/set.js");
/* harmony import */ var _babel_runtime_helpers_set__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_set__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! jsgametools */ "./node_modules/jsgametools/lib/JSGameTools.js");
/* harmony import */ var jsgametools__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(jsgametools__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _engine_Constants__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../engine/Constants */ "./src/engine/Constants.js");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! i18next */ "./node_modules/i18next/dist/esm/i18next.js");









function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/*
 * Copyright (C) 2019-2020 Eliastik (eliastiksofts.com)
 *
 * This file is part of "SnakeIA".
 *
 * "SnakeIA" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "SnakeIA" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with "SnakeIA".  If not, see <http://www.gnu.org/licenses/>.
 */




var Header = /*#__PURE__*/function (_Row) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(Header, _Row);

  var _super = _createSuper(Header);

  function Header(height, backgroundColor, snakes, enablePause, btnFullScreen, btnPause, btnRank, gameRanking, bestScoreToDisplay, numFruit, imageLoader) {
    var _thisSuper, _this;

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Header);

    _this = _super.call(this, 0, 0, null, null, new jsgametools__WEBPACK_IMPORTED_MODULE_8__["Style"]({
      "backgroundColor": backgroundColor || "#27AE60"
    }));
    _this.rowButtons = new jsgametools__WEBPACK_IMPORTED_MODULE_8__["Row"](null, null, null, null, new jsgametools__WEBPACK_IMPORTED_MODULE_8__["Style"]({
      "alignement": "right",
      "spaceBetweenComponents": 5,
      "verticalAlignement": "center"
    }));
    _this.fruitImage = new jsgametools__WEBPACK_IMPORTED_MODULE_8__["ImageContainer"]("assets/images/skin/flat/fruit.png", null, null, null, null, new jsgametools__WEBPACK_IMPORTED_MODULE_8__["Style"]({
      "alignement": "left",
      "verticalAlignement": "center"
    }), imageLoader);
    _this.labelScore = new jsgametools__WEBPACK_IMPORTED_MODULE_8__["Label"]("", null, null, new jsgametools__WEBPACK_IMPORTED_MODULE_8__["Style"]({
      "verticalAlignement": "center"
    }));

    _this.setButtons(btnFullScreen, btnPause, btnRank);

    _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_6___default()((_thisSuper = _babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2___default()(_this), _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Header.prototype)), "addAll", _thisSuper).call(_thisSuper, _this.fruitImage, _this.labelScore, _this.rowButtons);

    _this.minHeight = height;
    _this.snakes = snakes;
    _this.btnFullScreen = btnFullScreen;
    _this.btnPause = btnPause;
    _this.btnRank = btnRank;
    _this.enablePause = enablePause;
    _this.gameRanking = gameRanking;
    _this.bestScoreToDisplay = bestScoreToDisplay;
    _this.numFruit = numFruit;
    _this.imageLoader = imageLoader;
    return _this;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Header, [{
    key: "draw",
    value: function draw(context) {
      var canvas = context.canvas;
      var ctx = canvas.getContext("2d");
      ctx.save();
      this.minWidth = canvas.width;

      if (this.fruitImage) {
        this.fruitImage.width = this.height;
      }

      if (this.btnPause) {
        this.btnPause.width = this.height * 0.85;
        this.btnPause.height = this.height * 0.85;
        this.btnPause.style.set("verticalAlignement", "center");
      }

      if (this.btnFullScreen) {
        this.btnFullScreen.width = this.height * 0.85;
        this.btnFullScreen.height = this.height * 0.85;
        this.btnFullScreen.style.set("verticalAlignement", "center");
      }

      if (this.btnRank) {
        this.btnRank.width = this.height * 0.85;
        this.btnRank.height = this.height * 0.85;
        this.btnRank.style.set("verticalAlignement", "center");
      }

      if (this.gameRanking && (this.gameRanking.closing || this.gameRanking.closed)) {
        this.btnRank.style.set("backgroundColor", "rgba(0, 0, 0, 0)");
      } else {
        this.btnRank.style.set("backgroundColor", this.btnRank.style.backgroundColorDown);
      }

      this.fruitImage.loadImage(this.imageLoader);
      /*Utils.drawImage(ctx, this.imageLoader.get("assets/images/skin/flat/fruit.png", Math.round(this.height * 0.85 * (this.bestScoreToDisplay ? 0.5 : 1)), Math.round(this.height * 0.85 * (this.bestScoreToDisplay ? 0.5 : 1))), 5, 5, Math.round(this.height * 0.85 * (this.bestScoreToDisplay ? 0.5 : 1)), Math.round(this.height * 0.85 * (this.bestScoreToDisplay ? 0.5 : 1)));*/

      if (this.snakes != null && this.snakes.length == 1) {
        this.labelScore.text = "× " + this.snakes[0].score;
        this.labelScore.style.set("fontSize", Math.round(this.height * 0.43 * (this.bestScoreToDisplay ? 0.75 : 1)));
      } else {
        this.labelScore.text = i18next__WEBPACK_IMPORTED_MODULE_10__["default"].t("engine.num") + (this.numFruit != null ? this.numFruit : "???");
        this.labelScore.style.set("fontSize", Math.round(this.height * 0.43 * (this.bestScoreToDisplay ? 0.75 : 1)));
      }

      if (this.bestScoreToDisplay) {
        jsgametools__WEBPACK_IMPORTED_MODULE_8__["Utils"].drawImage(ctx, this.imageLoader.get("assets/images/trophy.png", Math.round(this.height * 0.425), Math.round(this.height * 0.425)), 5, Math.round(8 + this.height * 0.425), Math.round(this.height * 0.425), Math.round(this.height * 0.425));
        jsgametools__WEBPACK_IMPORTED_MODULE_8__["Utils"].drawText(ctx, this.bestScoreToDisplay, "black", Math.round(this.height * 0.43 * (this.bestScoreToDisplay ? 0.75 : 1)), _engine_Constants__WEBPACK_IMPORTED_MODULE_9__["default"].Setting.FONT_FAMILY, "default", "default", Math.round(this.height * 0.9 * (this.bestScoreToDisplay ? 0.58 : 1)), Math.round(this.height * 0.425 + this.height * 0.67 * (this.bestScoreToDisplay ? 0.63 : 1)));
      }

      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_6___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Header.prototype), "draw", this).call(this, context);

      ctx.restore();
    }
  }, {
    key: "set",
    value: function set(snakes, imageLoader, bestScoreToDisplay, height, numFruit, enablePause) {
      this.enablePause = enablePause;
      this.snakes = snakes;
      this.imageLoader = imageLoader;
      this.bestScoreToDisplay = bestScoreToDisplay;
      this.minHeight = height;
      this.numFruit = numFruit;
    }
  }, {
    key: "setButtons",
    value: function setButtons(btnFullScreen, btnPause, btnRank) {
      this.rowButtons.clear();
      this.btnFullScreen = btnFullScreen;
      this.btnPause = btnPause;
      this.btnRank = btnRank;
      if (btnRank) this.rowButtons.add(btnRank);
      if (btnPause) this.rowButtons.add(btnPause);
      if (btnFullScreen) this.rowButtons.add(btnFullScreen);
    }
  }, {
    key: "minHeight",
    set: function set(minHeight) {
      _babel_runtime_helpers_set__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Header.prototype), "minHeight", minHeight, this, true);

      _babel_runtime_helpers_set__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Header.prototype), "maxHeight", minHeight, this, true);
    }
  }, {
    key: "height",
    get: function get() {
      return this.minHeight || this.maxHeight || _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_6___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Header.prototype), "height", this) || 0;
    }
  }]);

  return Header;
}(jsgametools__WEBPACK_IMPORTED_MODULE_8__["Row"]);



/***/ }),

/***/ 0:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!********************!*\
  !*** ws (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,